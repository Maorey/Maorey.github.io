import{B as s,o as a,e as n,f as t,D as e,G as l,s as p}from"./framework.c00dda38.js";const r='{"title":"动态规划","description":"","frontmatter":{"index":3},"headers":[{"level":2,"title":"这是啥","slug":"这是啥"},{"level":2,"title":"能干啥","slug":"能干啥"},{"level":2,"title":"怎么干","slug":"怎么干"},{"level":3,"title":"基础概念","slug":"基础概念"},{"level":2,"title":"举例子","slug":"举例子"},{"level":3,"title":"普通递归算法 👎","slug":"普通递归算法"},{"level":3,"title":"带备忘录递归算法 👍","slug":"带备忘录递归算法"},{"level":3,"title":"动态规划算法 😍🤙","slug":"动态规划算法"},{"level":2,"title":"讲套路","slug":"讲套路"},{"level":2,"title":"做练习","slug":"做练习"},{"level":3,"title":"问题分析","slug":"问题分析"},{"level":2,"title":"留作业","slug":"留作业"},{"level":2,"title":"参考文献","slug":"参考文献"}],"relativePath":"blog/dynamicProgramming.md","lastUpdated":1607629562831.115}';var c={};const o=l('<h1 id="动态规划"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h1><h2 id="这是啥"><a class="header-anchor" href="#这是啥" aria-hidden="true">#</a> 这是啥</h2><p>参考百度百科 😉 :</p><p><strong>动态规划</strong>(Dynamic Programming, DP)是:</p><ul><li><strong>数学</strong>的二级学科<strong>运筹学</strong>下的三级学科</li><li>求解<strong>多阶段决策过程最优化</strong>的过程, 是一种数学方法论, 没有公式可套 (但有套路)</li><li>每个阶段的决策依赖当前状态, 而又会引起状态转移, 故称&quot;动态&quot;</li><li>兄弟姐妹有 <em>线型规划</em> 、<em>非线型规划</em>、<em>组合最优化</em>、<em>图论</em>等</li></ul><h2 id="能干啥"><a class="header-anchor" href="#能干啥" aria-hidden="true">#</a> 能干啥</h2><p><s>主持大菊, 运筹帷幄</s></p><p>应用广泛, 如经济、工业、军事等领域, 并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果...</p><div class="tip custom-block"><p class="custom-block-title">画重点</p><p>这里只讨论编程领域的应用</p></div><h2 id="怎么干"><a class="header-anchor" href="#怎么干" aria-hidden="true">#</a> 怎么干</h2><h3 id="基础概念"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p><em>(做出决策 = 计算出结果)</em></p><ul><li>状态: 当前阶段上下文</li><li>边界: 无法继续优化的阶段, 即决策确定 <em>(无边界 = 无解/无数解 = 死循环)</em></li><li>无后效性: 当前阶段做出决策后, 后续决策 不受 之前阶段 的影响, 即状态单向转移, 后续决策都是基于前面有限的阶段</li><li>状态转移方程: 不同阶段间上下文关系</li><li>重叠子结构: 不同阶段之间要解决的若干问题有重复</li><li>备忘录(DP Table): 在寻找最优子结构, 化简状态转移方程的过程中用于记录各阶段状态或决策的额外数据, 应该尽量去掉</li><li>最优子结构: 对阶段的划分和决策的过程最优化, 最优子结构一定也是由最优子结构组成</li></ul><h2 id="举例子"><a class="header-anchor" href="#举例子" aria-hidden="true">#</a> 举例子</h2><p>与分治法类似 (如快速/归并排序算法), 都是将待求解问题分为若干子问题, 从子问题的解得到原问题的解, 大事化小, 小事化了. 不同的是分治法一般是<strong>自顶向下</strong>递归求解, 而动态规划优化后一般是<strong>自底向上</strong>求解</p><p>以求解 斐波那契数列 第 <code>n</code> 位的值为例</p><p>问题分析🤔: 斐波那契数列 前两位为 <code>1</code>， 之后的每一位的值等于它前面两位的和</p><p>💡✨ 暴力求解无脑走一波(自顶向下)</p><h3 id="普通递归算法"><a class="header-anchor" href="#普通递归算法" aria-hidden="true">#</a> 普通递归算法 👎</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>求解过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;) --&gt; B111\n        A111 --&gt; A1112(&quot;f(2)&quot;) --&gt; B111\n      A11 --&gt; A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;) --&gt; B112\n        A112 --&gt; A1122(&quot;f(2)&quot;) --&gt; B112\n        end\n    A1 --&gt; A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;) --&gt; B121\n        A121 --&gt; A1212(&quot;f(2)&quot;) --&gt; B121\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;) --&gt; B122\n        A122 --&gt; A1222(&quot;f(2)&quot;) --&gt; B122\n      end\n  A --&gt; A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;) --&gt; B211\n        A211 --&gt; A2112(&quot;f(2)&quot;) --&gt; B211\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;) --&gt; B212\n        A212 --&gt; A2122(&quot;f(2)&quot;) --&gt; B212\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;) --&gt; B221\n        A221 --&gt; A2212(&quot;f(2)&quot;) --&gt; B221\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;) --&gt; B222\n        A222 --&gt; A2222(&quot;f(2)&quot;) --&gt; B222\n  end\n\n  B1(&quot;f(n - 1)&quot;) --&gt; B(&quot;f(n)&quot;)\n    B11(&quot;f(n - 2)&quot;) --&gt; B1\n      B111(...) --&gt; B11\n      B112(...) --&gt; B11\n    B12(&quot;f(n - 3)&quot;) --&gt; B1\n      subgraph b\n      B121(...) --&gt; B12\n      B122(...) --&gt; B12\n      end\n  B2(&quot;f(n - 2)&quot;) --&gt; B\n    subgraph a\n    B21(&quot;f(n - 3)&quot;) --&gt; B2\n      B211(...) --&gt; B21\n      B212(...) --&gt; B21\n    B22(&quot;f(n - 4)&quot;) --&gt; B2\n      B221(...) --&gt; B22\n      B222(...) --&gt; B22\n    end</pre><p>如图所示, 圈起来的都是重复子问题, 可以通过使用备忘录空间换时间的方式来实现剪枝</p><h3 id="带备忘录递归算法"><a class="header-anchor" href="#带备忘录递归算法" aria-hidden="true">#</a> 带备忘录递归算法 👍</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="动态规划算法"><a class="header-anchor" href="#动态规划算法" aria-hidden="true">#</a> 动态规划算法 😍🤙</h3><p>我们应用动态规划的概念来审视上面的解法</p><ul><li>状态: <code>n</code>的值</li><li>重叠子结构: 上图框起来的部分, 比如 <code>f(n - 2)</code> 计算了两次, <code>f(n - 3)</code> 计算了三次...</li><li>备忘录: 使用一个简单对象(这里也可以是数组)缓存每个阶段计算结果</li><li>最优子结构: 对于 <code>n &gt; 2</code> 存在最优子结构, 如下图:</li></ul><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;)\n        A111 --&gt; A1112(&quot;f(2)&quot;)\n      A11 x-.-x A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;)\n        A112 --&gt; A1122(&quot;f(2)&quot;)\n        end\n    A1 x-.-x A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;)\n        A121 --&gt; A1212(&quot;f(2)&quot;)\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;)\n        A122 --&gt; A1222(&quot;f(2)&quot;)\n      end\n  A x-.-x A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;)\n        A211 --&gt; A2112(&quot;f(2)&quot;)\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;)\n        A212 --&gt; A2122(&quot;f(2)&quot;)\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;)\n        A221 --&gt; A2212(&quot;f(2)&quot;)\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;)\n        A222 --&gt; A2222(&quot;f(2)&quot;)\n  end\nstyle a fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle b fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle c fill:#ddd,stroke:#ccc,stroke-dasharray:5 5</pre>',29),u=t("li",null,[p("边界: "),t("code",null,"n = 1 或 2")],-1),m=t("li",null,[p("无后效性: "),t("code",null,"n > 2"),p(" 的每个阶段的结果"),t("strong",null,"完全取决于"),p("它前面两个阶段的结果")],-1),i=p("状态转移方程: 易得(已最简): "),d={class:"katex"},g={class:"katex-mathml"},f=p("f"),h=p("("),_=p("n"),k=p(")"),y=p("="),b=p("{"),A=p("("),x=p("1"),q=p(","),w=p("if"),v=p("n"),T=p("="),B=p("1"),P=p(","),C=p("2"),S=p(")"),D=p(","),I=p("("),M=p("f"),V=p("("),j=p("n"),z=p("−"),E=p("1"),N=p(")"),R=p("+"),G=p("f"),L=p("("),O=p("n"),F=p("−"),U=p("2"),H=p(")"),J=p(","),K=p("if"),Q=p("n"),W=p(">"),X=p("2"),Y=p(")"),Z=p("\\{f\\{\\{\\left(\\{n}\\right)}}}=\\{\\left\\lbrace\\{\\left(\\{1},\\{\\quad\\text\\{if}\\quad}\\{n}=\\{1},\\{2}\\right)},\\{\\left(\\{f\\{\\{\\left(\\{n}-\\{1}\\right)}}}+\\{f\\{\\{\\left(\\{n}-\\{2}\\right)}}},\\{\\quad\\text\\{if}\\quad}\\{n}>\\{2}\\right)}\\right.}"),$=l('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">1</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>',1),ss=l('<p>所以这么一波分析之后, 找到最优的求解过程应该如下</p><pre class="mermaid loading">flowchart TB\n  A1(&quot;f(1)&quot;) --&gt; A3(&quot;f(3)&quot;)\n  A2(&quot;f(2)&quot;) --&gt; A3\n  A2 --&gt; A4(&quot;f(4)&quot;)\n  A3 --&gt; A4\n  A3 --&gt; Ad1(...)\n  A4 --&gt; Ad1\n  A4 --&gt; Ad2(...)\n  Ad1 --&gt; Ad2\n  Ad1 --&gt; An2(&quot;f(n - 2)&quot;)\n  Ad2 --&gt; An2\n  Ad2 --&gt; An1(&quot;f(n - 1)&quot;)\n  An2 --&gt; An1\n  An2 --&gt; An(&quot;f(n)&quot;)\n  An1 --&gt; An</pre><p>顺着备忘录的思路根据<strong>状态转移方程</strong>改为<strong>自底向上</strong>求解的形式:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    DPTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>很明显备忘录是可以优化掉的, 易得:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> next\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    next <span class="token operator">=</span> prev <span class="token operator">+</span> curr\n    prev <span class="token operator">=</span> curr\n    curr <span class="token operator">=</span> next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> curr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="讲套路"><a class="header-anchor" href="#讲套路" aria-hidden="true">#</a> 讲套路</h2><p>上面的示例只是体现了动态规划的一般过程, 动态规划是一种求解<strong>最值</strong>的方法论, 它的核心是<strong>尽可能压缩可能解空间</strong>, 具体做法是将大问题拆解为若干小问题, 求解小问题推导出大问题的解。</p><p>设计动态规划算法主要思路为:</p><ul><li>明确状态, 搞清楚当前的面对的问题</li><li>分析上游状态, 弄明白要解决当前阶段的问题最直接的需求</li><li>跟踪下游状态, 对当前问题的解决是否满足对下游的需求</li></ul><p>上下游情况考虑清楚一个, 往往就能设计出状态转移方程, 从求解一个问题开始, 一般的解决过程是:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;分析问题, 尝试枚举出所有可能解(暴力求解)&quot;) --&gt; B{&quot;分析DP要素(重叠子结构/状态/边界/无后效性), 确定是否可DP&quot;}\n  B ------&gt; |否| D(其他办法)\n  B --&gt; |是| C(DP开始)\n  C --&gt; C1(尝试自顶向下递归, 分析执行过程)\n  C1 --&gt; C2(找出最优子结构, 设计状态转移方程)\n  C2 --&gt; C3(使用备忘录剪枝重叠子问题)\n  C3 --&gt; C4(将算法改造成自底向上求解的方式)\n  C -.-&gt; C2\n  C2 -.-&gt; C4</pre><h2 id="做练习"><a class="header-anchor" href="#做练习" aria-hidden="true">#</a> 做练习</h2><div class="warning custom-block"><p class="custom-block-title">黄金矿工</p><p>有<strong>5座</strong>储量不同的金矿, 每座金矿需要参与挖掘的人数不同(如下表), 现有矿工<strong>10人</strong>, 每座金矿只能挖光或不挖, 不能只投入一部分人挖走部分金矿。求利益最大化方案</p></div><table><thead><tr><th style="text-align:center;">金矿</th><th style="text-align:center;">金矿1</th><th style="text-align:center;">金矿2</th><th style="text-align:center;">金矿3</th><th style="text-align:center;">金矿4</th><th style="text-align:center;">金矿5</th></tr></thead><tbody><tr><td style="text-align:center;">储量</td><td style="text-align:center;">400</td><td style="text-align:center;">500</td><td style="text-align:center;">200</td><td style="text-align:center;">300</td><td style="text-align:center;">350</td></tr><tr><td style="text-align:center;">需要的工人数</td><td style="text-align:center;">5</td><td style="text-align:center;">5</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td></tr></tbody></table><h3 id="问题分析"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3>',16),as=p("穷举: 每个矿只能挖或不挖, 共有 "),ns={class:"katex"},ts={class:"katex-mathml"},es=p("∑"),ls=p("n"),ps=p("="),rs=p("1"),cs=p("5"),os=p("C"),us=p("5"),ms=p("n"),is=p("\\{\\sum_\\{\\{\\{n}=\\{1}}}^\\{\\{5}}}\\{\\{C}_\\{\\{5}}^\\{\\{n}}}"),ds=l('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>',1),gs=p(" 种组合, 找出使用了最接近10人的组合, 算法时间复杂度为 "),fs={class:"katex"},hs={class:"katex-mathml"},_s=p("O"),ks=p("("),ys=p("2"),bs=p("n"),As=p(")"),xs=p("\\{O}\\{\\left(\\{2}^\\{\\{n}}\\right)}"),qs=l('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord">2</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>',1),ws=l('<p>分解问题:</p><pre class="mermaid loading">flowchart TB\n  A(10人挖5矿方案) --&gt; B(10人挖4矿方案)\n  A --&gt; C(x人挖一矿 + 10-x人挖4矿方案)</pre><p>😉发现动态规划要素了没？</p><p>继续分解看看:</p><pre class="mermaid loading">flowchart TB\n  A(10人挖5矿方案) --&gt; B(10人挖4矿方案)\n  A --&gt; C(x人挖一矿 + 10-x人挖4矿方案)\n\n  B --&gt; D(10人挖3矿方案)\n  B --&gt; E(x人挖一矿 + 10-x人挖3矿方案)\n\n  C --&gt; F(10-x人挖3矿方案)\n  C --&gt; G(y人挖一矿 + 10-x-y人挖3矿方案)</pre><p>所以这个问题是可以用动态规划的方法解决的✌️</p><p>设金矿数量为 <code>n</code> , 工人数为 <code>w</code>, 金矿储量依次为 <code>g[]</code> , 金矿用工依次为 <code>p[]</code> , 则<code>5矿10人</code>可以表示为: <code>f(5, 10) = Max(f(4, 10), f(4, 10 - p[4]) + G[4])</code></p><p>递推下去这个问题会有边界么? 有的</p>',8),vs={class:"katex-display"},Ts={class:"katex"},Bs={class:"katex-mathml"},Ps=p("f"),Cs=p("("),Ss=p("1"),Ds=p(","),Is=p("w"),Ms=p(")"),Vs=p("="),js=p("("),zs=p("g"),Es=p("["),Ns=p("0"),Rs=p("]"),Gs=p(","),Ls=p("i"),Os=p("f"),Fs=p("w"),Us=p(">"),Hs=p("="),Js=p("p"),Ks=p("["),Qs=p("0"),Ws=p("]"),Xs=p(")"),Ys=p(","),Zs=p("("),$s=p("0"),sa=p(","),aa=p("i"),na=p("f"),ta=p("w"),ea=p("<"),la=p("p"),pa=p("["),ra=p("0"),ca=p("]"),oa=p(")"),ua=p(":"),ma=p("f(1,w)=\\{ (g[0],if w>=p[0]), (0,if w<p[0]) :} "),ia=l('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),da=t("p",null,"那么可以得出状态转移方程:",-1),ga={class:"katex-display"},fa={class:"katex"},ha={class:"katex-mathml"},_a=p("f"),ka=p("("),ya=p("n"),ba=p(","),Aa=p("w"),xa=p(")"),qa=p("="),wa=p("("),va=p("0"),Ta=p(","),Ba=p("i"),Pa=p("f"),Ca=p("n"),Sa=p("<"),Da=p("="),Ia=p("1"),Ma=p(","),Va=p("w"),ja=p("<"),za=p("p"),Ea=p("["),Na=p("0"),Ra=p("]"),Ga=p(")"),La=p(","),Oa=p("("),Fa=p("g"),Ua=p("["),Ha=p("0"),Ja=p("]"),Ka=p(","),Qa=p("i"),Wa=p("f"),Xa=p("n"),Ya=p("="),Za=p("1"),$a=p(","),sn=p("w"),an=p(">"),nn=p("="),tn=p("p"),en=p("["),ln=p("0"),pn=p("]"),rn=p(")"),cn=p(","),on=p("("),un=p('"'),mn=p("f"),dn=p("("),gn=p("n"),fn=p("−"),hn=p("1"),_n=p(","),kn=p("w"),yn=p(")"),bn=p('"'),An=p(","),xn=p("i"),qn=p("f"),wn=p("n"),vn=p(">"),Tn=p("1"),Bn=p(","),Pn=p("w"),Cn=p("<"),Sn=p("p"),Dn=p("["),In=p("n"),Mn=p("−"),Vn=p("1"),jn=p("]"),zn=p(")"),En=p(","),Nn=p("("),Rn=p('"'),Gn=p("m"),Ln=p("a"),On=p("x"),Fn=p("("),Un=p("f"),Hn=p("("),Jn=p("n"),Kn=p("−"),Qn=p("1"),Wn=p(","),Xn=p("w"),Yn=p(")"),Zn=p(","),$n=p("f"),st=p("("),at=p("n"),nt=p("−"),tt=p("1"),et=p(","),lt=p("w"),pt=p("−"),rt=p("p"),ct=p("["),ot=p("n"),ut=p("−"),mt=p("1"),it=p("]"),dt=p("+"),gt=p("g"),ft=p("["),ht=p("n"),_t=p("−"),kt=p("1"),yt=p("]"),bt=p(")"),At=p(")"),xt=p('"'),qt=p(","),wt=p("i"),vt=p("f"),Tt=p("n"),Bt=p(">"),Pt=p("1"),Ct=p(","),St=p("w"),Dt=p(">"),It=p("="),Mt=p("p"),Vt=p("["),jt=p("n"),zt=p("−"),Et=p("1"),Nt=p("]"),Rt=p(")"),Gt=p(":"),Lt=p('f(n,w)=\\{ (0,if n<=1,w<p[0]), (g[0], if n=1,w>=p[0]), ("f(n - 1, w)", if n>1,w<p[n-1]), ("max(f(n - 1, w), f(n - 1, w - p[n - 1] + g[n - 1]))", if n>1,w>=p[n-1]) :} '),Ot=l('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),Ft=l('<p>那么DP走起, 参考<code>f(n,w)</code>备忘录及代码实现:</p><table><thead><tr><th style="text-align:center;">n/w</th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th><th style="text-align:center;">6</th><th style="text-align:center;">7</th><th style="text-align:center;">8</th><th style="text-align:center;">9</th><th style="text-align:center;">10</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">400</td><td style="text-align:center;">400</td><td style="text-align:center;">400</td><td style="text-align:center;">400</td><td style="text-align:center;">400</td><td style="text-align:center;">400</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">900</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200</td><td style="text-align:center;">200</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">700</td><td style="text-align:center;">700</td><td style="text-align:center;">900</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200</td><td style="text-align:center;">300</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">500</td><td style="text-align:center;">700</td><td style="text-align:center;">800</td><td style="text-align:center;">900</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">350</td><td style="text-align:center;">350</td><td style="text-align:center;">500</td><td style="text-align:center;">550</td><td style="text-align:center;">650</td><td style="text-align:center;">850</td><td style="text-align:center;">850</td><td style="text-align:center;">900</td></tr></tbody></table><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> g<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> results<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> g0 <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> p0 <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> gi<span class="token punctuation">,</span> pi<span class="token punctuation">,</span> j<span class="token punctuation">,</span> rj<span class="token punctuation">,</span> rPre<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    gi <span class="token operator">=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    pi <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      rj <span class="token operator">=</span> j <span class="token operator">&lt;</span> p0 <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> g0\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> pi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rj\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        rPre <span class="token operator">=</span> results<span class="token punctuation">[</span>j <span class="token operator">-</span> pi<span class="token punctuation">]</span> <span class="token operator">+</span> gi\n        results<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rj <span class="token operator">&gt;</span> rPre <span class="token operator">?</span> rj <span class="token operator">:</span> rPre\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> results<span class="token punctuation">[</span>w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// getMostGold(5, 10, [400, 500, 200, 300, 350], [5, 5, 3, 4, 3])</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="留作业"><a class="header-anchor" href="#留作业" aria-hidden="true">#</a> 留作业</h2><p>请思考: 动态规划一定比递归更优么？</p><p><em>考虑工人数远远大于金矿数的情况</em></p><h2 id="参考文献"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p><em>TODO</em></p>',8);c.render=function(l,p,r,c,Ut,Ht){const Jt=s("mi"),Kt=s("mo"),Qt=s("mrow"),Wt=s("mn"),Xt=s("mspace"),Yt=s("mtext"),Zt=s("annotation"),$t=s("semantics"),se=s("math"),ae=s("msubsup"),ne=s("msup");return a(),n("div",null,[o,t("ul",null,[u,m,t("li",null,[i,t("span",d,[t("span",g,[t(se,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:e((()=>[t($t,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[f])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[h])),_:1}),t(Jt,null,{default:e((()=>[_])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[k])),_:1})])),_:1})])),_:1}),t(Kt,null,{default:e((()=>[y])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[b])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[A])),_:1}),t(Wt,null,{default:e((()=>[x])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[q])),_:1}),t(Qt,null,{default:e((()=>[t(Xt,{width:"1em"}),t(Yt,null,{default:e((()=>[w])),_:1}),t(Xt,{width:"1em"})])),_:1}),t(Jt,null,{default:e((()=>[v])),_:1}),t(Kt,null,{default:e((()=>[T])),_:1}),t(Wt,null,{default:e((()=>[B])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[P])),_:1}),t(Wt,null,{default:e((()=>[C])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[S])),_:1})])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[D])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[I])),_:1}),t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[M])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[V])),_:1}),t(Jt,null,{default:e((()=>[j])),_:1}),t(Kt,null,{default:e((()=>[z])),_:1}),t(Wt,null,{default:e((()=>[E])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[N])),_:1})])),_:1})])),_:1}),t(Kt,null,{default:e((()=>[R])),_:1}),t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[G])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[L])),_:1}),t(Jt,null,{default:e((()=>[O])),_:1}),t(Kt,null,{default:e((()=>[F])),_:1}),t(Wt,null,{default:e((()=>[U])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[H])),_:1})])),_:1})])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[J])),_:1}),t(Qt,null,{default:e((()=>[t(Xt,{width:"1em"}),t(Yt,null,{default:e((()=>[K])),_:1}),t(Xt,{width:"1em"})])),_:1}),t(Jt,null,{default:e((()=>[Q])),_:1}),t(Kt,null,{default:e((()=>[W])),_:1}),t(Wt,null,{default:e((()=>[X])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[Y])),_:1})])),_:1})])),_:1})])),_:1}),t(Zt,{encoding:"application/x-tex"},{default:e((()=>[Z])),_:1})])),_:1})])),_:1})]),$])])]),ss,t("p",null,[as,t("span",ns,[t("span",ts,[t(se,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:e((()=>[t($t,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(ae,null,{default:e((()=>[t(Kt,null,{default:e((()=>[es])),_:1}),t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[ls])),_:1}),t(Kt,null,{default:e((()=>[ps])),_:1}),t(Wt,null,{default:e((()=>[rs])),_:1})])),_:1}),t(Wt,null,{default:e((()=>[cs])),_:1})])),_:1}),t(ae,null,{default:e((()=>[t(Jt,null,{default:e((()=>[os])),_:1}),t(Wt,null,{default:e((()=>[us])),_:1}),t(Jt,null,{default:e((()=>[ms])),_:1})])),_:1})])),_:1}),t(Zt,{encoding:"application/x-tex"},{default:e((()=>[is])),_:1})])),_:1})])),_:1})]),ds]),gs,t("span",fs,[t("span",hs,[t(se,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:e((()=>[t($t,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[_s])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{fence:"true"},{default:e((()=>[ks])),_:1}),t(ne,null,{default:e((()=>[t(Wt,null,{default:e((()=>[ys])),_:1}),t(Jt,null,{default:e((()=>[bs])),_:1})])),_:1}),t(Kt,{fence:"true"},{default:e((()=>[As])),_:1})])),_:1})])),_:1}),t(Zt,{encoding:"application/x-tex"},{default:e((()=>[xs])),_:1})])),_:1})])),_:1})]),qs])]),ws,t("p",null,[t("span",vs,[t("span",Ts,[t("span",Bs,[t(se,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:e((()=>[t($t,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[Ps])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Cs])),_:1}),t(Wt,null,{default:e((()=>[Ss])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ds])),_:1}),t(Jt,null,{default:e((()=>[Is])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ms])),_:1}),t(Kt,null,{default:e((()=>[Vs])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{stretchy:"false"},{default:e((()=>[js])),_:1}),t(Jt,null,{default:e((()=>[zs])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Es])),_:1}),t(Wt,null,{default:e((()=>[Ns])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Rs])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Gs])),_:1}),t(Jt,null,{default:e((()=>[Ls])),_:1}),t(Jt,null,{default:e((()=>[Os])),_:1}),t(Jt,null,{default:e((()=>[Fs])),_:1}),t(Kt,null,{default:e((()=>[Us])),_:1}),t(Kt,null,{default:e((()=>[Hs])),_:1}),t(Jt,null,{default:e((()=>[Js])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ks])),_:1}),t(Wt,null,{default:e((()=>[Qs])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ws])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Xs])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ys])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Zs])),_:1}),t(Wt,null,{default:e((()=>[$s])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[sa])),_:1}),t(Jt,null,{default:e((()=>[aa])),_:1}),t(Jt,null,{default:e((()=>[na])),_:1}),t(Jt,null,{default:e((()=>[ta])),_:1}),t(Kt,null,{default:e((()=>[ea])),_:1}),t(Jt,null,{default:e((()=>[la])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[pa])),_:1}),t(Wt,null,{default:e((()=>[ra])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[ca])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[oa])),_:1}),t(Kt,null,{default:e((()=>[ua])),_:1})])),_:1})])),_:1}),t(Zt,{encoding:"application/x-tex"},{default:e((()=>[ma])),_:1})])),_:1})])),_:1})]),ia])])]),da,t("p",null,[t("span",ga,[t("span",fa,[t("span",ha,[t(se,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:e((()=>[t($t,null,{default:e((()=>[t(Qt,null,{default:e((()=>[t(Jt,null,{default:e((()=>[_a])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[ka])),_:1}),t(Jt,null,{default:e((()=>[ya])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[ba])),_:1}),t(Jt,null,{default:e((()=>[Aa])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[xa])),_:1}),t(Kt,null,{default:e((()=>[qa])),_:1}),t(Qt,null,{default:e((()=>[t(Kt,{stretchy:"false"},{default:e((()=>[wa])),_:1}),t(Wt,null,{default:e((()=>[va])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ta])),_:1}),t(Jt,null,{default:e((()=>[Ba])),_:1}),t(Jt,null,{default:e((()=>[Pa])),_:1}),t(Jt,null,{default:e((()=>[Ca])),_:1}),t(Kt,null,{default:e((()=>[Sa])),_:1}),t(Kt,null,{default:e((()=>[Da])),_:1}),t(Wt,null,{default:e((()=>[Ia])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ma])),_:1}),t(Jt,null,{default:e((()=>[Va])),_:1}),t(Kt,null,{default:e((()=>[ja])),_:1}),t(Jt,null,{default:e((()=>[za])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ea])),_:1}),t(Wt,null,{default:e((()=>[Na])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ra])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ga])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[La])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Oa])),_:1}),t(Jt,null,{default:e((()=>[Fa])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ua])),_:1}),t(Wt,null,{default:e((()=>[Ha])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Ja])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ka])),_:1}),t(Jt,null,{default:e((()=>[Qa])),_:1}),t(Jt,null,{default:e((()=>[Wa])),_:1}),t(Jt,null,{default:e((()=>[Xa])),_:1}),t(Kt,null,{default:e((()=>[Ya])),_:1}),t(Wt,null,{default:e((()=>[Za])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[$a])),_:1}),t(Jt,null,{default:e((()=>[sn])),_:1}),t(Kt,null,{default:e((()=>[an])),_:1}),t(Kt,null,{default:e((()=>[nn])),_:1}),t(Jt,null,{default:e((()=>[tn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[en])),_:1}),t(Wt,null,{default:e((()=>[ln])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[pn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[rn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[cn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[on])),_:1}),t(Jt,{mathvariant:"normal"},{default:e((()=>[un])),_:1}),t(Jt,null,{default:e((()=>[mn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[dn])),_:1}),t(Jt,null,{default:e((()=>[gn])),_:1}),t(Kt,null,{default:e((()=>[fn])),_:1}),t(Wt,null,{default:e((()=>[hn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[_n])),_:1}),t(Jt,null,{default:e((()=>[kn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[yn])),_:1}),t(Jt,{mathvariant:"normal"},{default:e((()=>[bn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[An])),_:1}),t(Jt,null,{default:e((()=>[xn])),_:1}),t(Jt,null,{default:e((()=>[qn])),_:1}),t(Jt,null,{default:e((()=>[wn])),_:1}),t(Kt,null,{default:e((()=>[vn])),_:1}),t(Wt,null,{default:e((()=>[Tn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Bn])),_:1}),t(Jt,null,{default:e((()=>[Pn])),_:1}),t(Kt,null,{default:e((()=>[Cn])),_:1}),t(Jt,null,{default:e((()=>[Sn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Dn])),_:1}),t(Jt,null,{default:e((()=>[In])),_:1}),t(Kt,null,{default:e((()=>[Mn])),_:1}),t(Wt,null,{default:e((()=>[Vn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[jn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[zn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[En])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Nn])),_:1}),t(Jt,{mathvariant:"normal"},{default:e((()=>[Rn])),_:1}),t(Jt,null,{default:e((()=>[Gn])),_:1}),t(Jt,null,{default:e((()=>[Ln])),_:1}),t(Jt,null,{default:e((()=>[On])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Fn])),_:1}),t(Jt,null,{default:e((()=>[Un])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Hn])),_:1}),t(Jt,null,{default:e((()=>[Jn])),_:1}),t(Kt,null,{default:e((()=>[Kn])),_:1}),t(Wt,null,{default:e((()=>[Qn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Wn])),_:1}),t(Jt,null,{default:e((()=>[Xn])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Yn])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Zn])),_:1}),t(Jt,null,{default:e((()=>[$n])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[st])),_:1}),t(Jt,null,{default:e((()=>[at])),_:1}),t(Kt,null,{default:e((()=>[nt])),_:1}),t(Wt,null,{default:e((()=>[tt])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[et])),_:1}),t(Jt,null,{default:e((()=>[lt])),_:1}),t(Kt,null,{default:e((()=>[pt])),_:1}),t(Jt,null,{default:e((()=>[rt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[ct])),_:1}),t(Jt,null,{default:e((()=>[ot])),_:1}),t(Kt,null,{default:e((()=>[ut])),_:1}),t(Wt,null,{default:e((()=>[mt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[it])),_:1}),t(Kt,null,{default:e((()=>[dt])),_:1}),t(Jt,null,{default:e((()=>[gt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[ft])),_:1}),t(Jt,null,{default:e((()=>[ht])),_:1}),t(Kt,null,{default:e((()=>[_t])),_:1}),t(Wt,null,{default:e((()=>[kt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[yt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[bt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[At])),_:1}),t(Jt,{mathvariant:"normal"},{default:e((()=>[xt])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[qt])),_:1}),t(Jt,null,{default:e((()=>[wt])),_:1}),t(Jt,null,{default:e((()=>[vt])),_:1}),t(Jt,null,{default:e((()=>[Tt])),_:1}),t(Kt,null,{default:e((()=>[Bt])),_:1}),t(Wt,null,{default:e((()=>[Pt])),_:1}),t(Kt,{separator:"true"},{default:e((()=>[Ct])),_:1}),t(Jt,null,{default:e((()=>[St])),_:1}),t(Kt,null,{default:e((()=>[Dt])),_:1}),t(Kt,null,{default:e((()=>[It])),_:1}),t(Jt,null,{default:e((()=>[Mt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Vt])),_:1}),t(Jt,null,{default:e((()=>[jt])),_:1}),t(Kt,null,{default:e((()=>[zt])),_:1}),t(Wt,null,{default:e((()=>[Et])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Nt])),_:1}),t(Kt,{stretchy:"false"},{default:e((()=>[Rt])),_:1}),t(Kt,null,{default:e((()=>[Gt])),_:1})])),_:1})])),_:1}),t(Zt,{encoding:"application/x-tex"},{default:e((()=>[Lt])),_:1})])),_:1})])),_:1})]),Ot])])]),Ft])};export default c;export{r as __pageData};
