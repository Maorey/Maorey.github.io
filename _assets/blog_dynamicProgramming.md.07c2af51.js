import{B as a,o as n,e as s,f as l,D as t,G as e,s as p}from"./framework.c00dda38.js";const r='{"title":"动态规划","description":"","frontmatter":{"index":3},"headers":[{"level":2,"title":"这是啥","slug":"这是啥"},{"level":2,"title":"能干啥","slug":"能干啥"},{"level":2,"title":"怎么干","slug":"怎么干"},{"level":3,"title":"基础概念","slug":"基础概念"},{"level":2,"title":"举例子","slug":"举例子"},{"level":3,"title":"普通递归算法 👎","slug":"普通递归算法"},{"level":3,"title":"带备忘录递归算法 👍","slug":"带备忘录递归算法"},{"level":3,"title":"动态规划算法 😍🤙","slug":"动态规划算法"},{"level":3,"title":"对比","slug":"对比"},{"level":2,"title":"讲套路","slug":"讲套路"},{"level":2,"title":"做练习","slug":"做练习"},{"level":3,"title":"问题分析","slug":"问题分析"},{"level":3,"title":"递归形式","slug":"递归形式"},{"level":3,"title":"递推(迭代)形式","slug":"递推-迭代-形式"},{"level":2,"title":"留作业","slug":"留作业"},{"level":2,"title":"参考文献","slug":"参考文献"}],"relativePath":"blog/dynamicProgramming.md","lastUpdated":1608228164118.7983}';var o={};const m=e('<h1 id="动态规划"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h1><h2 id="这是啥"><a class="header-anchor" href="#这是啥" aria-hidden="true">#</a> 这是啥</h2><p>参考百度百科 😉 :</p><p><strong>动态规划</strong>(Dynamic Programming, DP)是:</p><ul><li><strong>数学</strong>的二级学科<strong>运筹学</strong>下的三级学科</li><li>求解<strong>多阶段决策过程最优化</strong>的过程, 是一种数学方法论, 没有公式可套 (但有套路)</li><li>每个阶段的决策依赖当前状态, 而又会引起状态转移, 故称&quot;动态&quot;</li><li>兄弟姐妹有 <em>线型规划</em> 、<em>非线型规划</em>、<em>组合最优化</em>、<em>图论</em>等</li></ul><h2 id="能干啥"><a class="header-anchor" href="#能干啥" aria-hidden="true">#</a> 能干啥</h2><p><s>主持大菊, 运筹帷幄</s></p><p>应用广泛, 如经济、工业、军事等领域, 并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果...</p><div class="tip custom-block"><p class="custom-block-title">画重点</p><p>这里只讨论编程领域的应用</p></div><h2 id="怎么干"><a class="header-anchor" href="#怎么干" aria-hidden="true">#</a> 怎么干</h2><h3 id="基础概念"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p><em>(做出决策 = 计算出结果)</em></p><ul><li>状态: 当前阶段上下文</li><li>边界: 无法继续优化的阶段, 即决策确定 <em>(无边界 = 无解/无数解 = 死循环)</em></li><li>无后效性: 当前阶段做出决策后, 后续决策 不受 之前阶段 的影响, 即状态单向转移, 后续决策都是基于前面有限的阶段</li><li>状态转移方程: 不同阶段间上下文关系</li><li>重叠子结构: 不同阶段之间要解决的若干问题有重复</li><li>备忘录(DP Table): 在寻找最优子结构, 化简状态转移方程的过程中用于记录各阶段状态或决策的额外数据, 应该尽量去掉</li><li>最优子结构: 对阶段的划分和决策的过程最优化, 最优子结构一定也是由最优子结构组成</li></ul><h2 id="举例子"><a class="header-anchor" href="#举例子" aria-hidden="true">#</a> 举例子</h2><p>与分治法类似 (如快速/归并排序算法), 都是将待求解问题分为若干子问题, 从子问题的解得到原问题的解, 大事化小, 小事化了. 不同的是分治法一般是<strong>自顶向下</strong>递归求解, 而动态规划优化后一般是<strong>自底向上</strong>求解</p><p>以求解 斐波那契数列 第 <code>n</code> 位的值为例</p><p>问题分析🤔: 斐波那契数列 前两位为 <code>1</code>， 之后的每一位的值等于它前面两位的和</p><p>💡✨ 暴力求解无脑走一波(自顶向下)</p><h3 id="普通递归算法"><a class="header-anchor" href="#普通递归算法" aria-hidden="true">#</a> 普通递归算法 👎</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>求解过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;) --&gt; B111\n        A111 --&gt; A1112(&quot;f(2)&quot;) --&gt; B111\n      A11 --&gt; A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;) --&gt; B112\n        A112 --&gt; A1122(&quot;f(2)&quot;) --&gt; B112\n        end\n    A1 --&gt; A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;) --&gt; B121\n        A121 --&gt; A1212(&quot;f(2)&quot;) --&gt; B121\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;) --&gt; B122\n        A122 --&gt; A1222(&quot;f(2)&quot;) --&gt; B122\n      end\n  A --&gt; A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;) --&gt; B211\n        A211 --&gt; A2112(&quot;f(2)&quot;) --&gt; B211\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;) --&gt; B212\n        A212 --&gt; A2122(&quot;f(2)&quot;) --&gt; B212\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;) --&gt; B221\n        A221 --&gt; A2212(&quot;f(2)&quot;) --&gt; B221\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;) --&gt; B222\n        A222 --&gt; A2222(&quot;f(2)&quot;) --&gt; B222\n  end\n\n  B1(&quot;f(n - 1)&quot;) --&gt; B(&quot;f(n)&quot;)\n    B11(&quot;f(n - 2)&quot;) --&gt; B1\n      B111(...) --&gt; B11\n      B112(...) --&gt; B11\n    B12(&quot;f(n - 3)&quot;) --&gt; B1\n      subgraph b\n      B121(...) --&gt; B12\n      B122(...) --&gt; B12\n      end\n  B2(&quot;f(n - 2)&quot;) --&gt; B\n    subgraph a\n    B21(&quot;f(n - 3)&quot;) --&gt; B2\n      B211(...) --&gt; B21\n      B212(...) --&gt; B21\n    B22(&quot;f(n - 4)&quot;) --&gt; B2\n      B221(...) --&gt; B22\n      B222(...) --&gt; B22\n    end</pre><p>如图所示, 圈起来的都是重复子问题, 可以通过使用备忘录空间换时间的方式来实现剪枝</p><h3 id="带备忘录递归算法"><a class="header-anchor" href="#带备忘录递归算法" aria-hidden="true">#</a> 带备忘录递归算法 👍</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="动态规划算法"><a class="header-anchor" href="#动态规划算法" aria-hidden="true">#</a> 动态规划算法 😍🤙</h3><p>我们应用动态规划的概念来审视上面的解法</p><ul><li>状态: <code>n</code>的值</li><li>重叠子结构: 上图框起来的部分, 比如 <code>f(n - 2)</code> 计算了两次, <code>f(n - 3)</code> 计算了三次...</li><li>备忘录: 使用一个简单对象(这里也可以是数组)缓存每个阶段计算结果</li><li>最优子结构: 对于 <code>n &gt; 2</code> 存在最优子结构, 如下图:</li></ul><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;)\n        A111 --&gt; A1112(&quot;f(2)&quot;)\n      A11 x-.-x A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;)\n        A112 --&gt; A1122(&quot;f(2)&quot;)\n        end\n    A1 x-.-x A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;)\n        A121 --&gt; A1212(&quot;f(2)&quot;)\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;)\n        A122 --&gt; A1222(&quot;f(2)&quot;)\n      end\n  A x-.-x A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;)\n        A211 --&gt; A2112(&quot;f(2)&quot;)\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;)\n        A212 --&gt; A2122(&quot;f(2)&quot;)\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;)\n        A221 --&gt; A2212(&quot;f(2)&quot;)\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;)\n        A222 --&gt; A2222(&quot;f(2)&quot;)\n  end\nstyle a fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle b fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle c fill:#ddd,stroke:#ccc,stroke-dasharray:5 5</pre>',29),c=l("li",null,[p("边界: "),l("code",null,"n = 1 或 2")],-1),u=l("li",null,[p("无后效性: "),l("code",null,"n > 2"),p(" 的每个阶段的结果"),l("strong",null,"完全取决于"),p("它前面两个阶段的结果")],-1),d=p("状态转移方程: 易得(已最简): "),i={class:"katex"},g={class:"katex-mathml"},h=p("f"),f=p("("),_=p("n"),k=p(")"),b=p("="),y=p("{"),A=p("("),x=p("1"),C=p(","),q=p("if"),M=p("n"),B=p("="),w=p("1"),v=p(","),T=p("2"),P=p(")"),D=p(","),S=p("("),E=p("f"),G=p("("),I=p("n"),V=p("−"),z=p("1"),O=p(")"),N=p("+"),R=p("f"),L=p("("),$=p("n"),j=p("−"),F=p("2"),U=p(")"),H=p(","),J=p("if"),K=p("n"),Q=p(">"),W=p("2"),X=p(")"),Y=p("\\{f\\{\\{\\left(\\{n}\\right)}}}=\\{\\left\\lbrace\\{\\left(\\{1},\\{\\quad\\text\\{if}\\quad}\\{n}=\\{1},\\{2}\\right)},\\{\\left(\\{f\\{\\{\\left(\\{n}-\\{1}\\right)}}}+\\{f\\{\\{\\left(\\{n}-\\{2}\\right)}}},\\{\\quad\\text\\{if}\\quad}\\{n}>\\{2}\\right)}\\right.}"),Z=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">1</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>',1),aa=e('<p>所以这么一波分析之后, 找到最优的求解过程应该如下</p><pre class="mermaid loading">flowchart TB\n  A1(&quot;f(1)&quot;) --&gt; A3(&quot;f(3)&quot;)\n  A2(&quot;f(2)&quot;) --&gt; A3\n  A2 --&gt; A4(&quot;f(4)&quot;)\n  A3 --&gt; A4\n  A3 --&gt; Ad1(...)\n  A4 --&gt; Ad1\n  A4 --&gt; Ad2(...)\n  Ad1 --&gt; Ad2\n  Ad1 --&gt; An2(&quot;f(n - 2)&quot;)\n  Ad2 --&gt; An2\n  Ad2 --&gt; An1(&quot;f(n - 1)&quot;)\n  An2 --&gt; An1\n  An2 --&gt; An(&quot;f(n)&quot;)\n  An1 --&gt; An</pre><p>顺着备忘录的思路根据<strong>状态转移方程</strong>改为<strong>自底向上</strong>求解的形式:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    DPTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>很明显备忘录是可以优化掉的, 易得:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> next\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    next <span class="token operator">=</span> prev <span class="token operator">+</span> curr\n    prev <span class="token operator">=</span> curr\n    curr <span class="token operator">=</span> next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> curr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="对比"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p><em>TODO: 时间/空间复杂度</em></p><pre class="echarts loading" style="height:250px;">{\n    tooltip: {\n        trigger: &#39;axis&#39;,\n        axisPointer: {\n            type: &#39;cross&#39;,\n            crossStyle: {\n                color: &#39;#999&#39;\n            }\n        }\n    },\n    xAxis: [\n        {\n            type: &#39;category&#39;,\n            data: [&#39;普通递归&#39;, &#39;带备忘录递归&#39;, &#39;带备忘录动态规划&#39;, &#39;动态规划&#39;],\n            axisPointer: {\n                type: &#39;shadow&#39;\n            }\n        }\n    ],\n    yAxis: [\n        {\n            type: &#39;value&#39;,\n            name: &#39;时间复杂度&#39;,\n            axisLabel: {\n                formatter: &#39;O({value}}&#39;\n            }\n        },\n        {\n            type: &#39;value&#39;,\n            name: &#39;空间复杂度&#39;,\n            axisLabel: {\n                formatter: &#39;O({value})&#39;\n            }\n        }\n    ],\n    series: [\n        {\n            name: &#39;时间复杂度&#39;,\n            type: &#39;bar&#39;,\n            data: [2.0, 4.9, 7.0, 23.2]\n        },\n        {\n            name: &#39;空间复杂度&#39;,\n            type: &#39;bar&#39;,\n            yAxisIndex: 1,\n            data: [2.6, 5.9, 9.0, 26.4]\n        }\n    ]\n}</pre><h2 id="讲套路"><a class="header-anchor" href="#讲套路" aria-hidden="true">#</a> 讲套路</h2><p>上面的示例只是体现了动态规划的一般过程, 动态规划是一种求解<strong>最值</strong>的方法论, 它的核心是<strong>尽可能压缩可能解空间</strong>, 具体做法是将大问题拆解为若干小问题, 求解小问题推导出大问题的解。</p><p>设计动态规划算法主要思路为:</p><ul><li>明确状态, 搞清楚当前面对的问题</li><li>分析上游状态, 弄明白要解决当前阶段的问题最直接的需求</li><li>跟踪下游状态, 对当前问题的解决是否满足对下游的需求</li></ul><p>上下游情况考虑清楚一个, 往往就能设计出状态转移方程. 从求解一个问题开始, 一般的解决过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;分析问题, 尝试枚举出所有可能解(暴力求解)&quot;) --&gt; B{&quot;分析DP要素(重叠子结构/状态/边界/无后效性), 确定是否可DP&quot;}\n  B ------&gt; |否| D(其他办法)\n  B --&gt; |是| C(DP开始)\n  C --&gt; C1(尝试自顶向下递归, 分析执行过程)\n  C1 --&gt; C2(找出最优子结构, 设计状态转移方程)\n  C2 --&gt; C3(使用备忘录剪枝重叠子问题)\n  C3 --&gt; C4(将算法改造成自底向上求解的方式)\n  C -.-&gt; C2\n  C2 -.-&gt; C4</pre><h2 id="做练习"><a class="header-anchor" href="#做练习" aria-hidden="true">#</a> 做练习</h2><div class="warning custom-block"><p class="custom-block-title">黄金矿工</p><p>有<strong>5座</strong>储量不尽相同的金矿, 每座金矿需要的矿工人数也不尽相同(如下表), 现有矿工<strong>10位</strong>, 每座金矿只能挖光或不挖, 不能只投入一部分人挖走部分金矿。求利益最大化方案(挖到最多金子)?</p></div><table><thead><tr><th style="text-align:center;">金矿</th><th style="text-align:center;">金矿A</th><th style="text-align:center;">金矿B</th><th style="text-align:center;">金矿C</th><th style="text-align:center;">金矿D</th><th style="text-align:center;">金矿E</th></tr></thead><tbody><tr><td style="text-align:center;">储量(kg)</td><td style="text-align:center;">400</td><td style="text-align:center;">500</td><td style="text-align:center;">200</td><td style="text-align:center;">300</td><td style="text-align:center;">350</td></tr><tr><td style="text-align:center;">需要的矿工数</td><td style="text-align:center;">5</td><td style="text-align:center;">5</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td></tr></tbody></table><h3 id="问题分析"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3>',19),na=p("穷举: 每座矿只有挖或不挖两种情况, 故挖矿方案共有 "),sa={class:"katex"},la={class:"katex-mathml"},ta=p("∑"),ea=p("n"),pa=p("="),ra=p("1"),oa=p("5"),ma=p("C"),ca=p("5"),ua=p("n"),da=p("\\{\\sum_\\{\\{\\{n}=\\{1}}}^\\{\\{5}}}\\{\\{C}_\\{\\{5}}^\\{\\{n}}}"),ia=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>',1),ga=p(" 种, 从中找出投入不超过10位矿工并且获得金矿最多的方案即可, 算法实现的时间复杂度为 "),ha={class:"katex"},fa={class:"katex-mathml"},_a=p("O"),ka=p("("),ba=p("2"),ya=p("n"),Aa=p(")"),xa=p("\\{O}\\{\\left(\\{2}^\\{\\{n}}\\right)}"),Ca=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord">2</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>',1),qa=p(" (空间复杂度"),Ma={class:"katex"},Ba={class:"katex-mathml"},wa=p("O"),va=p("("),Ta=p("n"),Pa=p(")"),Da=p("\\{O}\\{\\left(\\{n}\\right)}"),Sa=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>',1),Ea=p(", 金矿全都挖的时候)"),Ga=e('<p>尝试DP (以下 &quot;x位矿工挖n座矿的最优方案&quot; 简称 &quot;x人n矿&quot;)</p><p>分解问题:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿) -.-&gt; |若总收益大于右边方案| D[最优采矿方案]\n  A --&gt; C(x人1矿 + 10-x人4矿) -.-&gt; |若总收益大于左边方案| D</pre><p>😉发现动态规划要素了没？</p><p>继续分解看看:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿)\n  A --&gt; C(x人1矿 + 10-x人4矿)\n\n  B --&gt; D(10人3矿)\n  B --&gt; E(y人1矿 + 10-y人3矿)\n\n  C --&gt; F(10-x人3矿)\n  C --&gt; G(z人1矿 + 10-x-z人3矿)</pre><p>若设金矿数量为 <code>goldMineCount</code> , 矿工数为 <code>minerCount</code>, 金矿储量依次为 <code>reserves[]</code> , 金矿用工数依次为 <code>requiredMiners[]</code> , 则<code>10人5矿</code>可以表示为: <code>f(10, 5) = max(f(10, 4), reserves[4] + f(10 - requiredMiners[4]), 4)</code></p><p>递推下去这个问题会有边界么? 显然存在, 如下:</p>',8),Ia={class:"katex-display"},Va={class:"katex"},za={class:"katex-mathml"},Oa=p("f"),Na=p("("),Ra=p("x"),La=p(","),$a=p("1"),ja=p(")"),Fa=p("="),Ua=p("("),Ha=p("r"),Ja=p("e"),Ka=p("s"),Qa=p("e"),Wa=p("r"),Xa=p("v"),Ya=p("e"),Za=p("s"),an=p("["),nn=p("0"),sn=p("]"),ln=p(","),tn=p("i"),en=p("f"),pn=p("x"),rn=p(">"),on=p("="),mn=p("r"),cn=p("e"),un=p("q"),dn=p("u"),gn=p("i"),hn=p("r"),fn=p("e"),_n=p("d"),kn=p("M"),bn=p("i"),yn=p("n"),An=p("e"),xn=p("r"),Cn=p("s"),qn=p("["),Mn=p("0"),Bn=p("]"),wn=p(")"),vn=p(","),Tn=p("("),Pn=p("0"),Dn=p(","),Sn=p("i"),En=p("f"),Gn=p("x"),In=p("<"),Vn=p("r"),zn=p("e"),On=p("q"),Nn=p("u"),Rn=p("i"),Ln=p("r"),$n=p("e"),jn=p("d"),Fn=p("M"),Un=p("i"),Hn=p("n"),Jn=p("e"),Kn=p("r"),Qn=p("s"),Wn=p("["),Xn=p("0"),Yn=p("]"),Zn=p(")"),as=p(":"),ns=p("f(x,1)=\\{ (reserves[0],if x>=requiredMiners[0]), (0,if x<requiredMiners[0]) :} "),ss=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),ls=l("p",null,"所以这个问题是可以用动态规划方法解决的✌️",-1),ts=l("p",null,"由上可得状态转移方程如下:",-1),es={class:"katex-display"},ps={class:"katex"},rs={class:"katex-mathml"},os=p("f"),ms=p("("),cs=p("m"),us=p("i"),ds=p("n"),is=p("e"),gs=p("r"),hs=p("C"),fs=p("o"),_s=p("u"),ks=p("n"),bs=p("t"),ys=p(","),As=p("g"),xs=p("o"),Cs=p("l"),qs=p("d"),Ms=p("M"),Bs=p("i"),ws=p("n"),vs=p("e"),Ts=p("C"),Ps=p("o"),Ds=p("u"),Ss=p("n"),Es=p("t"),Gs=p(")"),Is=p("="),Vs=p("("),zs=p("0"),Os=p(","),Ns=p("i"),Rs=p("f"),Ls=p("g"),$s=p("o"),js=p("l"),Fs=p("d"),Us=p("M"),Hs=p("i"),Js=p("n"),Ks=p("e"),Qs=p("C"),Ws=p("o"),Xs=p("u"),Ys=p("n"),Zs=p("t"),al=p("<"),nl=p("="),sl=p("1"),ll=p(","),tl=p("m"),el=p("i"),pl=p("n"),rl=p("e"),ol=p("r"),ml=p("C"),cl=p("o"),ul=p("u"),dl=p("n"),il=p("t"),gl=p("<"),hl=p("r"),fl=p("e"),_l=p("q"),kl=p("u"),bl=p("i"),yl=p("r"),Al=p("e"),xl=p("d"),Cl=p("M"),ql=p("i"),Ml=p("n"),Bl=p("e"),wl=p("r"),vl=p("s"),Tl=p("["),Pl=p("0"),Dl=p("]"),Sl=p(")"),El=p(","),Gl=p("("),Il=p("r"),Vl=p("e"),zl=p("s"),Ol=p("e"),Nl=p("r"),Rl=p("v"),Ll=p("e"),$l=p("s"),jl=p("["),Fl=p("0"),Ul=p("]"),Hl=p(","),Jl=p("i"),Kl=p("f"),Ql=p("g"),Wl=p("o"),Xl=p("l"),Yl=p("d"),Zl=p("M"),at=p("i"),nt=p("n"),st=p("e"),lt=p("C"),tt=p("o"),et=p("u"),pt=p("n"),rt=p("t"),ot=p("="),mt=p("1"),ct=p(","),ut=p("m"),dt=p("i"),it=p("n"),gt=p("e"),ht=p("r"),ft=p("C"),_t=p("o"),kt=p("u"),bt=p("n"),yt=p("t"),At=p(">"),xt=p("="),Ct=p("r"),qt=p("e"),Mt=p("q"),Bt=p("u"),wt=p("i"),vt=p("r"),Tt=p("e"),Pt=p("d"),Dt=p("M"),St=p("i"),Et=p("n"),Gt=p("e"),It=p("r"),Vt=p("s"),zt=p("["),Ot=p("0"),Nt=p("]"),Rt=p(")"),Lt=p(","),$t=p("("),jt=p('"'),Ft=p("f"),Ut=p("("),Ht=p("m"),Jt=p("i"),Kt=p("n"),Qt=p("e"),Wt=p("r"),Xt=p("C"),Yt=p("o"),Zt=p("u"),ae=p("n"),ne=p("t"),se=p(","),le=p("g"),te=p("o"),ee=p("l"),pe=p("d"),re=p("M"),oe=p("i"),me=p("n"),ce=p("e"),ue=p("C"),de=p("o"),ie=p("u"),ge=p("n"),he=p("t"),fe=p("−"),_e=p("1"),ke=p(")"),be=p('"'),ye=p(","),Ae=p("i"),xe=p("f"),Ce=p("g"),qe=p("o"),Me=p("l"),Be=p("d"),we=p("M"),ve=p("i"),Te=p("n"),Pe=p("e"),De=p("C"),Se=p("o"),Ee=p("u"),Ge=p("n"),Ie=p("t"),Ve=p(">"),ze=p("1"),Oe=p(","),Ne=p("m"),Re=p("i"),Le=p("n"),$e=p("e"),je=p("r"),Fe=p("C"),Ue=p("o"),He=p("u"),Je=p("n"),Ke=p("t"),Qe=p("<"),We=p("r"),Xe=p("e"),Ye=p("q"),Ze=p("u"),ap=p("i"),np=p("r"),sp=p("e"),lp=p("d"),tp=p("M"),ep=p("i"),pp=p("n"),rp=p("e"),op=p("r"),mp=p("s"),cp=p("["),up=p("g"),dp=p("o"),ip=p("l"),gp=p("d"),hp=p("M"),fp=p("i"),_p=p("n"),kp=p("e"),bp=p("C"),yp=p("o"),Ap=p("u"),xp=p("n"),Cp=p("t"),qp=p("−"),Mp=p("1"),Bp=p("]"),wp=p(")"),vp=p(","),Tp=p("("),Pp=p('"'),Dp=p("m"),Sp=p("a"),Ep=p("x"),Gp=p("("),Ip=p("f"),Vp=p("("),zp=p("m"),Op=p("i"),Np=p("n"),Rp=p("e"),Lp=p("r"),$p=p("C"),jp=p("o"),Fp=p("u"),Up=p("n"),Hp=p("t"),Jp=p(","),Kp=p("g"),Qp=p("o"),Wp=p("l"),Xp=p("d"),Yp=p("M"),Zp=p("i"),ar=p("n"),nr=p("e"),sr=p("C"),lr=p("o"),tr=p("u"),er=p("n"),pr=p("t"),rr=p("−"),or=p("1"),mr=p(")"),cr=p(","),ur=p("r"),dr=p("e"),ir=p("s"),gr=p("e"),hr=p("r"),fr=p("v"),_r=p("e"),kr=p("s"),br=p("["),yr=p("g"),Ar=p("o"),xr=p("l"),Cr=p("d"),qr=p("M"),Mr=p("i"),Br=p("n"),wr=p("e"),vr=p("C"),Tr=p("o"),Pr=p("u"),Dr=p("n"),Sr=p("t"),Er=p("−"),Gr=p("1"),Ir=p("]"),Vr=p("+"),zr=p("f"),Or=p("("),Nr=p("m"),Rr=p("i"),Lr=p("n"),$r=p("e"),jr=p("r"),Fr=p("C"),Ur=p("o"),Hr=p("u"),Jr=p("n"),Kr=p("t"),Qr=p("−"),Wr=p("r"),Xr=p("e"),Yr=p("q"),Zr=p("u"),ao=p("i"),no=p("r"),so=p("e"),lo=p("d"),to=p("M"),eo=p("i"),po=p("n"),ro=p("e"),oo=p("r"),mo=p("s"),co=p("["),uo=p("g"),io=p("o"),go=p("l"),ho=p("d"),fo=p("M"),_o=p("i"),ko=p("n"),bo=p("e"),yo=p("C"),Ao=p("o"),xo=p("u"),Co=p("n"),qo=p("t"),Mo=p("−"),Bo=p("1"),wo=p("]"),vo=p(","),To=p("g"),Po=p("o"),Do=p("l"),So=p("d"),Eo=p("M"),Go=p("i"),Io=p("n"),Vo=p("e"),zo=p("C"),Oo=p("o"),No=p("u"),Ro=p("n"),Lo=p("t"),$o=p("−"),jo=p("1"),Fo=p(")"),Uo=p(")"),Ho=p('"'),Jo=p(","),Ko=p("i"),Qo=p("f"),Wo=p("g"),Xo=p("o"),Yo=p("l"),Zo=p("d"),am=p("M"),nm=p("i"),sm=p("n"),lm=p("e"),tm=p("C"),em=p("o"),pm=p("u"),rm=p("n"),om=p("t"),mm=p(">"),cm=p("1"),um=p(","),dm=p("m"),im=p("i"),gm=p("n"),hm=p("e"),fm=p("r"),_m=p("C"),km=p("o"),bm=p("u"),ym=p("n"),Am=p("t"),xm=p(">"),Cm=p("="),qm=p("r"),Mm=p("e"),Bm=p("q"),wm=p("u"),vm=p("i"),Tm=p("r"),Pm=p("e"),Dm=p("d"),Sm=p("M"),Em=p("i"),Gm=p("n"),Im=p("e"),Vm=p("r"),zm=p("s"),Om=p("["),Nm=p("g"),Rm=p("o"),Lm=p("l"),$m=p("d"),jm=p("M"),Fm=p("i"),Um=p("n"),Hm=p("e"),Jm=p("C"),Km=p("o"),Qm=p("u"),Wm=p("n"),Xm=p("t"),Ym=p("−"),Zm=p("1"),ac=p("]"),nc=p(")"),sc=p(":"),lc=p('f(minerCount,goldMineCount)=\\{ (0,if goldMineCount<=1,minerCount<requiredMiners[0]), (reserves[0], if goldMineCount=1,minerCount>=requiredMiners[0]), ("f(minerCount, goldMineCount - 1)", if goldMineCount>1,minerCount<requiredMiners[goldMineCount-1]), ("max(f(minerCount, goldMineCount - 1), reserves[goldMineCount - 1] + f(minerCount - requiredMiners[goldMineCount - 1], goldMineCount - 1))", if goldMineCount>1,minerCount>=requiredMiners[goldMineCount-1]) :} '),tc=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),ec=e('<p>那么DP走起, <code>f(minerCount, goldMineCount)</code> 备忘录如下:</p><table><thead><tr><th style="text-align:center;">minerCount / goldMineCount</th><th style="text-align:center;">1</th><th style="text-align:center;">2</th><th style="text-align:center;">3</th><th style="text-align:center;">4</th><th style="text-align:center;">5</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">300<br><em>(D)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">550<br><em>(C + E)</em></td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B) / (C + D)</em></td><td style="text-align:center;">650<br><em>(D + E)</em></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">800<br><em>(B + D)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1050<br><em>(B + C + E)</em></td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1000<br><em>(B + C + D)</em></td><td style="text-align:center;">1150<br><em>(B + D + E)</em></td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1350<br><em>(B + C + D + E)</em></td></tr><tr><td style="text-align:center;">16</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1450<br><em>(A + B + C + E)</em></td></tr><tr><td style="text-align:center;">17</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;">18</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;">19</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;">20</td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1750<br><em>(A + B + C + D + E)</em></td></tr></tbody></table><h3 id="递归形式"><a class="header-anchor" href="#递归形式" aria-hidden="true">#</a> 递归形式</h3><p>只计算最大收益数值:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 金矿信息 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 黄金储量 */</span>\n  gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/** 需要矿工数 */</span>\n  cost<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// const DPTable: { [key: string /** `${minerCount}-${goldMineCount}` */]: number } = {}</span>\n<span class="token keyword">function</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> GoldMine<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">return</span> minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span>\n    minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost\n      <span class="token operator">?</span> <span class="token number">0</span>\n      <span class="token operator">:</span> minerCount <span class="token operator">===</span> goldMine<span class="token punctuation">.</span>cost\n        <span class="token operator">?</span> goldMine<span class="token punctuation">.</span>gold\n        <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold <span class="token operator">+</span>\n          <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> left <span class="token operator">&gt;</span> right <span class="token operator">?</span> left <span class="token operator">:</span> right\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 验证\ngetMostGold(\n  [\n    { gold: 400, cost: 5 },\n    { gold: 500, cost: 5 },\n    { gold: 200, cost: 3 },\n    { gold: 300, cost: 4 },\n    { gold: 350, cost: 3 },\n  ],\n  10\n)\n*/</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>得到详细方案:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 金矿信息 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 黄金储量 */</span>\n  gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/** 需要矿工数 */</span>\n  cost<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 得到黄金最多的采矿方案 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">Plan</span> <span class="token keyword">extends</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 要挖掘的金矿 */</span>\n  mines<span class="token operator">:</span> GoldMine<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getPlan</span><span class="token punctuation">(</span>goldMine<span class="token operator">:</span> GoldMine<span class="token punctuation">,</span> minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Plan <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost\n    <span class="token operator">?</span> <span class="token punctuation">{</span> gold<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> cost<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token operator">:</span> <span class="token punctuation">{</span> gold<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token operator">:</span> GoldMine<span class="token punctuation">,</span> plans<span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> plan\n  <span class="token keyword">let</span> r <span class="token operator">=</span> plans<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> gold<span class="token punctuation">,</span> cost <span class="token punctuation">}</span> <span class="token operator">=</span> goldMine\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    plan <span class="token operator">=</span> plans<span class="token punctuation">[</span>r<span class="token punctuation">]</span>\n\n    plan<span class="token punctuation">.</span>gold <span class="token operator">+=</span> gold\n    plan<span class="token punctuation">.</span>cost <span class="token operator">+=</span> cost\n    plan<span class="token punctuation">.</span>mines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>leftPlans<span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightPlans<span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> leftGold <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n  <span class="token keyword">const</span> rightGold <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftGold <span class="token operator">===</span> rightGold<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 归并</span>\n    <span class="token keyword">let</span> l <span class="token operator">=</span> leftPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> r <span class="token operator">=</span> rightPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> p <span class="token operator">=</span> l <span class="token operator">+</span> r\n    <span class="token keyword">const</span> plans<span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPlans<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">&gt;</span> rightPlans<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        plans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        plans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      plans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      plans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> plans\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> leftGold <span class="token operator">&gt;</span> rightGold <span class="token operator">?</span> leftPlans <span class="token operator">:</span> rightPlans\n<span class="token punctuation">}</span>\n\n<span class="token comment">// const DPTable: { [key: string /** `${minerCount}-${goldMineCount}` */]: Plan[] } = {}</span>\n<span class="token keyword">function</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> GoldMine<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">getPlan</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minerCount<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> right\n  <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>minerCount <span class="token operator">&gt;</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n    <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">getPlan</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">,</span> minerCount<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h3 id="递推-迭代-形式"><a class="header-anchor" href="#递推-迭代-形式" aria-hidden="true">#</a> 递推(迭代)形式</h3><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 金矿信息 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 黄金储量 */</span>\n  gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/** 需要矿工数 */</span>\n  cost<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 得到黄金最多的采矿方案 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">Plan</span> <span class="token keyword">extends</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 要挖掘的金矿 */</span>\n  mines<span class="token operator">:</span> GoldMine<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> GoldMine<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TODO</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="留作业"><a class="header-anchor" href="#留作业" aria-hidden="true">#</a> 留作业</h2><p>请思考: 动态规划一定比递归更优么？</p><p><em>考虑矿工数远远大于金矿数的情况</em></p><h2 id="参考文献"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p><em>TODO</em></p>',14);o.render=function(e,p,r,o,pc,rc){const oc=a("mi"),mc=a("mo"),cc=a("mrow"),uc=a("mn"),dc=a("mspace"),ic=a("mtext"),gc=a("annotation"),hc=a("semantics"),fc=a("math"),_c=a("msubsup"),kc=a("msup");return n(),s("div",null,[m,l("ul",null,[c,u,l("li",null,[d,l("span",i,[l("span",g,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[h])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[f])),_:1}),l(oc,null,{default:t((()=>[_])),_:1}),l(mc,{fence:"true"},{default:t((()=>[k])),_:1})])),_:1})])),_:1}),l(mc,null,{default:t((()=>[b])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[y])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[A])),_:1}),l(uc,null,{default:t((()=>[x])),_:1}),l(mc,{separator:"true"},{default:t((()=>[C])),_:1}),l(cc,null,{default:t((()=>[l(dc,{width:"1em"}),l(ic,null,{default:t((()=>[q])),_:1}),l(dc,{width:"1em"})])),_:1}),l(oc,null,{default:t((()=>[M])),_:1}),l(mc,null,{default:t((()=>[B])),_:1}),l(uc,null,{default:t((()=>[w])),_:1}),l(mc,{separator:"true"},{default:t((()=>[v])),_:1}),l(uc,null,{default:t((()=>[T])),_:1}),l(mc,{fence:"true"},{default:t((()=>[P])),_:1})])),_:1}),l(mc,{separator:"true"},{default:t((()=>[D])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[S])),_:1}),l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[E])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[G])),_:1}),l(oc,null,{default:t((()=>[I])),_:1}),l(mc,null,{default:t((()=>[V])),_:1}),l(uc,null,{default:t((()=>[z])),_:1}),l(mc,{fence:"true"},{default:t((()=>[O])),_:1})])),_:1})])),_:1}),l(mc,null,{default:t((()=>[N])),_:1}),l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[R])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[L])),_:1}),l(oc,null,{default:t((()=>[$])),_:1}),l(mc,null,{default:t((()=>[j])),_:1}),l(uc,null,{default:t((()=>[F])),_:1}),l(mc,{fence:"true"},{default:t((()=>[U])),_:1})])),_:1})])),_:1}),l(mc,{separator:"true"},{default:t((()=>[H])),_:1}),l(cc,null,{default:t((()=>[l(dc,{width:"1em"}),l(ic,null,{default:t((()=>[J])),_:1}),l(dc,{width:"1em"})])),_:1}),l(oc,null,{default:t((()=>[K])),_:1}),l(mc,null,{default:t((()=>[Q])),_:1}),l(uc,null,{default:t((()=>[W])),_:1}),l(mc,{fence:"true"},{default:t((()=>[X])),_:1})])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[Y])),_:1})])),_:1})])),_:1})]),Z])])]),aa,l("p",null,[na,l("span",sa,[l("span",la,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(_c,null,{default:t((()=>[l(mc,null,{default:t((()=>[ta])),_:1}),l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[ea])),_:1}),l(mc,null,{default:t((()=>[pa])),_:1}),l(uc,null,{default:t((()=>[ra])),_:1})])),_:1}),l(uc,null,{default:t((()=>[oa])),_:1})])),_:1}),l(_c,null,{default:t((()=>[l(oc,null,{default:t((()=>[ma])),_:1}),l(uc,null,{default:t((()=>[ca])),_:1}),l(oc,null,{default:t((()=>[ua])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[da])),_:1})])),_:1})])),_:1})]),ia]),ga,l("span",ha,[l("span",fa,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[_a])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[ka])),_:1}),l(kc,null,{default:t((()=>[l(uc,null,{default:t((()=>[ba])),_:1}),l(oc,null,{default:t((()=>[ya])),_:1})])),_:1}),l(mc,{fence:"true"},{default:t((()=>[Aa])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[xa])),_:1})])),_:1})])),_:1})]),Ca]),qa,l("span",Ma,[l("span",Ba,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[wa])),_:1}),l(cc,null,{default:t((()=>[l(mc,{fence:"true"},{default:t((()=>[va])),_:1}),l(oc,null,{default:t((()=>[Ta])),_:1}),l(mc,{fence:"true"},{default:t((()=>[Pa])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[Da])),_:1})])),_:1})])),_:1})]),Sa]),Ea]),Ga,l("p",null,[l("span",Ia,[l("span",Va,[l("span",za,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[Oa])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Na])),_:1}),l(oc,null,{default:t((()=>[Ra])),_:1}),l(mc,{separator:"true"},{default:t((()=>[La])),_:1}),l(uc,null,{default:t((()=>[$a])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[ja])),_:1}),l(mc,null,{default:t((()=>[Fa])),_:1}),l(cc,null,{default:t((()=>[l(mc,{stretchy:"false"},{default:t((()=>[Ua])),_:1}),l(oc,null,{default:t((()=>[Ha])),_:1}),l(oc,null,{default:t((()=>[Ja])),_:1}),l(oc,null,{default:t((()=>[Ka])),_:1}),l(oc,null,{default:t((()=>[Qa])),_:1}),l(oc,null,{default:t((()=>[Wa])),_:1}),l(oc,null,{default:t((()=>[Xa])),_:1}),l(oc,null,{default:t((()=>[Ya])),_:1}),l(oc,null,{default:t((()=>[Za])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[an])),_:1}),l(uc,null,{default:t((()=>[nn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[sn])),_:1}),l(mc,{separator:"true"},{default:t((()=>[ln])),_:1}),l(oc,null,{default:t((()=>[tn])),_:1}),l(oc,null,{default:t((()=>[en])),_:1}),l(oc,null,{default:t((()=>[pn])),_:1}),l(mc,null,{default:t((()=>[rn])),_:1}),l(mc,null,{default:t((()=>[on])),_:1}),l(oc,null,{default:t((()=>[mn])),_:1}),l(oc,null,{default:t((()=>[cn])),_:1}),l(oc,null,{default:t((()=>[un])),_:1}),l(oc,null,{default:t((()=>[dn])),_:1}),l(oc,null,{default:t((()=>[gn])),_:1}),l(oc,null,{default:t((()=>[hn])),_:1}),l(oc,null,{default:t((()=>[fn])),_:1}),l(oc,null,{default:t((()=>[_n])),_:1}),l(oc,null,{default:t((()=>[kn])),_:1}),l(oc,null,{default:t((()=>[bn])),_:1}),l(oc,null,{default:t((()=>[yn])),_:1}),l(oc,null,{default:t((()=>[An])),_:1}),l(oc,null,{default:t((()=>[xn])),_:1}),l(oc,null,{default:t((()=>[Cn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[qn])),_:1}),l(uc,null,{default:t((()=>[Mn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Bn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[wn])),_:1}),l(mc,{separator:"true"},{default:t((()=>[vn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Tn])),_:1}),l(uc,null,{default:t((()=>[Pn])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Dn])),_:1}),l(oc,null,{default:t((()=>[Sn])),_:1}),l(oc,null,{default:t((()=>[En])),_:1}),l(oc,null,{default:t((()=>[Gn])),_:1}),l(mc,null,{default:t((()=>[In])),_:1}),l(oc,null,{default:t((()=>[Vn])),_:1}),l(oc,null,{default:t((()=>[zn])),_:1}),l(oc,null,{default:t((()=>[On])),_:1}),l(oc,null,{default:t((()=>[Nn])),_:1}),l(oc,null,{default:t((()=>[Rn])),_:1}),l(oc,null,{default:t((()=>[Ln])),_:1}),l(oc,null,{default:t((()=>[$n])),_:1}),l(oc,null,{default:t((()=>[jn])),_:1}),l(oc,null,{default:t((()=>[Fn])),_:1}),l(oc,null,{default:t((()=>[Un])),_:1}),l(oc,null,{default:t((()=>[Hn])),_:1}),l(oc,null,{default:t((()=>[Jn])),_:1}),l(oc,null,{default:t((()=>[Kn])),_:1}),l(oc,null,{default:t((()=>[Qn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Wn])),_:1}),l(uc,null,{default:t((()=>[Xn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Yn])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Zn])),_:1}),l(mc,null,{default:t((()=>[as])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[ns])),_:1})])),_:1})])),_:1})]),ss])])]),ls,ts,l("p",null,[l("span",es,[l("span",ps,[l("span",rs,[l(fc,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:t((()=>[l(hc,null,{default:t((()=>[l(cc,null,{default:t((()=>[l(oc,null,{default:t((()=>[os])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[ms])),_:1}),l(oc,null,{default:t((()=>[cs])),_:1}),l(oc,null,{default:t((()=>[us])),_:1}),l(oc,null,{default:t((()=>[ds])),_:1}),l(oc,null,{default:t((()=>[is])),_:1}),l(oc,null,{default:t((()=>[gs])),_:1}),l(oc,null,{default:t((()=>[hs])),_:1}),l(oc,null,{default:t((()=>[fs])),_:1}),l(oc,null,{default:t((()=>[_s])),_:1}),l(oc,null,{default:t((()=>[ks])),_:1}),l(oc,null,{default:t((()=>[bs])),_:1}),l(mc,{separator:"true"},{default:t((()=>[ys])),_:1}),l(oc,null,{default:t((()=>[As])),_:1}),l(oc,null,{default:t((()=>[xs])),_:1}),l(oc,null,{default:t((()=>[Cs])),_:1}),l(oc,null,{default:t((()=>[qs])),_:1}),l(oc,null,{default:t((()=>[Ms])),_:1}),l(oc,null,{default:t((()=>[Bs])),_:1}),l(oc,null,{default:t((()=>[ws])),_:1}),l(oc,null,{default:t((()=>[vs])),_:1}),l(oc,null,{default:t((()=>[Ts])),_:1}),l(oc,null,{default:t((()=>[Ps])),_:1}),l(oc,null,{default:t((()=>[Ds])),_:1}),l(oc,null,{default:t((()=>[Ss])),_:1}),l(oc,null,{default:t((()=>[Es])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Gs])),_:1}),l(mc,null,{default:t((()=>[Is])),_:1}),l(cc,null,{default:t((()=>[l(mc,{stretchy:"false"},{default:t((()=>[Vs])),_:1}),l(uc,null,{default:t((()=>[zs])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Os])),_:1}),l(oc,null,{default:t((()=>[Ns])),_:1}),l(oc,null,{default:t((()=>[Rs])),_:1}),l(oc,null,{default:t((()=>[Ls])),_:1}),l(oc,null,{default:t((()=>[$s])),_:1}),l(oc,null,{default:t((()=>[js])),_:1}),l(oc,null,{default:t((()=>[Fs])),_:1}),l(oc,null,{default:t((()=>[Us])),_:1}),l(oc,null,{default:t((()=>[Hs])),_:1}),l(oc,null,{default:t((()=>[Js])),_:1}),l(oc,null,{default:t((()=>[Ks])),_:1}),l(oc,null,{default:t((()=>[Qs])),_:1}),l(oc,null,{default:t((()=>[Ws])),_:1}),l(oc,null,{default:t((()=>[Xs])),_:1}),l(oc,null,{default:t((()=>[Ys])),_:1}),l(oc,null,{default:t((()=>[Zs])),_:1}),l(mc,null,{default:t((()=>[al])),_:1}),l(mc,null,{default:t((()=>[nl])),_:1}),l(uc,null,{default:t((()=>[sl])),_:1}),l(mc,{separator:"true"},{default:t((()=>[ll])),_:1}),l(oc,null,{default:t((()=>[tl])),_:1}),l(oc,null,{default:t((()=>[el])),_:1}),l(oc,null,{default:t((()=>[pl])),_:1}),l(oc,null,{default:t((()=>[rl])),_:1}),l(oc,null,{default:t((()=>[ol])),_:1}),l(oc,null,{default:t((()=>[ml])),_:1}),l(oc,null,{default:t((()=>[cl])),_:1}),l(oc,null,{default:t((()=>[ul])),_:1}),l(oc,null,{default:t((()=>[dl])),_:1}),l(oc,null,{default:t((()=>[il])),_:1}),l(mc,null,{default:t((()=>[gl])),_:1}),l(oc,null,{default:t((()=>[hl])),_:1}),l(oc,null,{default:t((()=>[fl])),_:1}),l(oc,null,{default:t((()=>[_l])),_:1}),l(oc,null,{default:t((()=>[kl])),_:1}),l(oc,null,{default:t((()=>[bl])),_:1}),l(oc,null,{default:t((()=>[yl])),_:1}),l(oc,null,{default:t((()=>[Al])),_:1}),l(oc,null,{default:t((()=>[xl])),_:1}),l(oc,null,{default:t((()=>[Cl])),_:1}),l(oc,null,{default:t((()=>[ql])),_:1}),l(oc,null,{default:t((()=>[Ml])),_:1}),l(oc,null,{default:t((()=>[Bl])),_:1}),l(oc,null,{default:t((()=>[wl])),_:1}),l(oc,null,{default:t((()=>[vl])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Tl])),_:1}),l(uc,null,{default:t((()=>[Pl])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Dl])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Sl])),_:1}),l(mc,{separator:"true"},{default:t((()=>[El])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Gl])),_:1}),l(oc,null,{default:t((()=>[Il])),_:1}),l(oc,null,{default:t((()=>[Vl])),_:1}),l(oc,null,{default:t((()=>[zl])),_:1}),l(oc,null,{default:t((()=>[Ol])),_:1}),l(oc,null,{default:t((()=>[Nl])),_:1}),l(oc,null,{default:t((()=>[Rl])),_:1}),l(oc,null,{default:t((()=>[Ll])),_:1}),l(oc,null,{default:t((()=>[$l])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[jl])),_:1}),l(uc,null,{default:t((()=>[Fl])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Ul])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Hl])),_:1}),l(oc,null,{default:t((()=>[Jl])),_:1}),l(oc,null,{default:t((()=>[Kl])),_:1}),l(oc,null,{default:t((()=>[Ql])),_:1}),l(oc,null,{default:t((()=>[Wl])),_:1}),l(oc,null,{default:t((()=>[Xl])),_:1}),l(oc,null,{default:t((()=>[Yl])),_:1}),l(oc,null,{default:t((()=>[Zl])),_:1}),l(oc,null,{default:t((()=>[at])),_:1}),l(oc,null,{default:t((()=>[nt])),_:1}),l(oc,null,{default:t((()=>[st])),_:1}),l(oc,null,{default:t((()=>[lt])),_:1}),l(oc,null,{default:t((()=>[tt])),_:1}),l(oc,null,{default:t((()=>[et])),_:1}),l(oc,null,{default:t((()=>[pt])),_:1}),l(oc,null,{default:t((()=>[rt])),_:1}),l(mc,null,{default:t((()=>[ot])),_:1}),l(uc,null,{default:t((()=>[mt])),_:1}),l(mc,{separator:"true"},{default:t((()=>[ct])),_:1}),l(oc,null,{default:t((()=>[ut])),_:1}),l(oc,null,{default:t((()=>[dt])),_:1}),l(oc,null,{default:t((()=>[it])),_:1}),l(oc,null,{default:t((()=>[gt])),_:1}),l(oc,null,{default:t((()=>[ht])),_:1}),l(oc,null,{default:t((()=>[ft])),_:1}),l(oc,null,{default:t((()=>[_t])),_:1}),l(oc,null,{default:t((()=>[kt])),_:1}),l(oc,null,{default:t((()=>[bt])),_:1}),l(oc,null,{default:t((()=>[yt])),_:1}),l(mc,null,{default:t((()=>[At])),_:1}),l(mc,null,{default:t((()=>[xt])),_:1}),l(oc,null,{default:t((()=>[Ct])),_:1}),l(oc,null,{default:t((()=>[qt])),_:1}),l(oc,null,{default:t((()=>[Mt])),_:1}),l(oc,null,{default:t((()=>[Bt])),_:1}),l(oc,null,{default:t((()=>[wt])),_:1}),l(oc,null,{default:t((()=>[vt])),_:1}),l(oc,null,{default:t((()=>[Tt])),_:1}),l(oc,null,{default:t((()=>[Pt])),_:1}),l(oc,null,{default:t((()=>[Dt])),_:1}),l(oc,null,{default:t((()=>[St])),_:1}),l(oc,null,{default:t((()=>[Et])),_:1}),l(oc,null,{default:t((()=>[Gt])),_:1}),l(oc,null,{default:t((()=>[It])),_:1}),l(oc,null,{default:t((()=>[Vt])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[zt])),_:1}),l(uc,null,{default:t((()=>[Ot])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Nt])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Rt])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Lt])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[$t])),_:1}),l(oc,{mathvariant:"normal"},{default:t((()=>[jt])),_:1}),l(oc,null,{default:t((()=>[Ft])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Ut])),_:1}),l(oc,null,{default:t((()=>[Ht])),_:1}),l(oc,null,{default:t((()=>[Jt])),_:1}),l(oc,null,{default:t((()=>[Kt])),_:1}),l(oc,null,{default:t((()=>[Qt])),_:1}),l(oc,null,{default:t((()=>[Wt])),_:1}),l(oc,null,{default:t((()=>[Xt])),_:1}),l(oc,null,{default:t((()=>[Yt])),_:1}),l(oc,null,{default:t((()=>[Zt])),_:1}),l(oc,null,{default:t((()=>[ae])),_:1}),l(oc,null,{default:t((()=>[ne])),_:1}),l(mc,{separator:"true"},{default:t((()=>[se])),_:1}),l(oc,null,{default:t((()=>[le])),_:1}),l(oc,null,{default:t((()=>[te])),_:1}),l(oc,null,{default:t((()=>[ee])),_:1}),l(oc,null,{default:t((()=>[pe])),_:1}),l(oc,null,{default:t((()=>[re])),_:1}),l(oc,null,{default:t((()=>[oe])),_:1}),l(oc,null,{default:t((()=>[me])),_:1}),l(oc,null,{default:t((()=>[ce])),_:1}),l(oc,null,{default:t((()=>[ue])),_:1}),l(oc,null,{default:t((()=>[de])),_:1}),l(oc,null,{default:t((()=>[ie])),_:1}),l(oc,null,{default:t((()=>[ge])),_:1}),l(oc,null,{default:t((()=>[he])),_:1}),l(mc,null,{default:t((()=>[fe])),_:1}),l(uc,null,{default:t((()=>[_e])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[ke])),_:1}),l(oc,{mathvariant:"normal"},{default:t((()=>[be])),_:1}),l(mc,{separator:"true"},{default:t((()=>[ye])),_:1}),l(oc,null,{default:t((()=>[Ae])),_:1}),l(oc,null,{default:t((()=>[xe])),_:1}),l(oc,null,{default:t((()=>[Ce])),_:1}),l(oc,null,{default:t((()=>[qe])),_:1}),l(oc,null,{default:t((()=>[Me])),_:1}),l(oc,null,{default:t((()=>[Be])),_:1}),l(oc,null,{default:t((()=>[we])),_:1}),l(oc,null,{default:t((()=>[ve])),_:1}),l(oc,null,{default:t((()=>[Te])),_:1}),l(oc,null,{default:t((()=>[Pe])),_:1}),l(oc,null,{default:t((()=>[De])),_:1}),l(oc,null,{default:t((()=>[Se])),_:1}),l(oc,null,{default:t((()=>[Ee])),_:1}),l(oc,null,{default:t((()=>[Ge])),_:1}),l(oc,null,{default:t((()=>[Ie])),_:1}),l(mc,null,{default:t((()=>[Ve])),_:1}),l(uc,null,{default:t((()=>[ze])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Oe])),_:1}),l(oc,null,{default:t((()=>[Ne])),_:1}),l(oc,null,{default:t((()=>[Re])),_:1}),l(oc,null,{default:t((()=>[Le])),_:1}),l(oc,null,{default:t((()=>[$e])),_:1}),l(oc,null,{default:t((()=>[je])),_:1}),l(oc,null,{default:t((()=>[Fe])),_:1}),l(oc,null,{default:t((()=>[Ue])),_:1}),l(oc,null,{default:t((()=>[He])),_:1}),l(oc,null,{default:t((()=>[Je])),_:1}),l(oc,null,{default:t((()=>[Ke])),_:1}),l(mc,null,{default:t((()=>[Qe])),_:1}),l(oc,null,{default:t((()=>[We])),_:1}),l(oc,null,{default:t((()=>[Xe])),_:1}),l(oc,null,{default:t((()=>[Ye])),_:1}),l(oc,null,{default:t((()=>[Ze])),_:1}),l(oc,null,{default:t((()=>[ap])),_:1}),l(oc,null,{default:t((()=>[np])),_:1}),l(oc,null,{default:t((()=>[sp])),_:1}),l(oc,null,{default:t((()=>[lp])),_:1}),l(oc,null,{default:t((()=>[tp])),_:1}),l(oc,null,{default:t((()=>[ep])),_:1}),l(oc,null,{default:t((()=>[pp])),_:1}),l(oc,null,{default:t((()=>[rp])),_:1}),l(oc,null,{default:t((()=>[op])),_:1}),l(oc,null,{default:t((()=>[mp])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[cp])),_:1}),l(oc,null,{default:t((()=>[up])),_:1}),l(oc,null,{default:t((()=>[dp])),_:1}),l(oc,null,{default:t((()=>[ip])),_:1}),l(oc,null,{default:t((()=>[gp])),_:1}),l(oc,null,{default:t((()=>[hp])),_:1}),l(oc,null,{default:t((()=>[fp])),_:1}),l(oc,null,{default:t((()=>[_p])),_:1}),l(oc,null,{default:t((()=>[kp])),_:1}),l(oc,null,{default:t((()=>[bp])),_:1}),l(oc,null,{default:t((()=>[yp])),_:1}),l(oc,null,{default:t((()=>[Ap])),_:1}),l(oc,null,{default:t((()=>[xp])),_:1}),l(oc,null,{default:t((()=>[Cp])),_:1}),l(mc,null,{default:t((()=>[qp])),_:1}),l(uc,null,{default:t((()=>[Mp])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Bp])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[wp])),_:1}),l(mc,{separator:"true"},{default:t((()=>[vp])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Tp])),_:1}),l(oc,{mathvariant:"normal"},{default:t((()=>[Pp])),_:1}),l(oc,null,{default:t((()=>[Dp])),_:1}),l(oc,null,{default:t((()=>[Sp])),_:1}),l(oc,null,{default:t((()=>[Ep])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Gp])),_:1}),l(oc,null,{default:t((()=>[Ip])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Vp])),_:1}),l(oc,null,{default:t((()=>[zp])),_:1}),l(oc,null,{default:t((()=>[Op])),_:1}),l(oc,null,{default:t((()=>[Np])),_:1}),l(oc,null,{default:t((()=>[Rp])),_:1}),l(oc,null,{default:t((()=>[Lp])),_:1}),l(oc,null,{default:t((()=>[$p])),_:1}),l(oc,null,{default:t((()=>[jp])),_:1}),l(oc,null,{default:t((()=>[Fp])),_:1}),l(oc,null,{default:t((()=>[Up])),_:1}),l(oc,null,{default:t((()=>[Hp])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Jp])),_:1}),l(oc,null,{default:t((()=>[Kp])),_:1}),l(oc,null,{default:t((()=>[Qp])),_:1}),l(oc,null,{default:t((()=>[Wp])),_:1}),l(oc,null,{default:t((()=>[Xp])),_:1}),l(oc,null,{default:t((()=>[Yp])),_:1}),l(oc,null,{default:t((()=>[Zp])),_:1}),l(oc,null,{default:t((()=>[ar])),_:1}),l(oc,null,{default:t((()=>[nr])),_:1}),l(oc,null,{default:t((()=>[sr])),_:1}),l(oc,null,{default:t((()=>[lr])),_:1}),l(oc,null,{default:t((()=>[tr])),_:1}),l(oc,null,{default:t((()=>[er])),_:1}),l(oc,null,{default:t((()=>[pr])),_:1}),l(mc,null,{default:t((()=>[rr])),_:1}),l(uc,null,{default:t((()=>[or])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[mr])),_:1}),l(mc,{separator:"true"},{default:t((()=>[cr])),_:1}),l(oc,null,{default:t((()=>[ur])),_:1}),l(oc,null,{default:t((()=>[dr])),_:1}),l(oc,null,{default:t((()=>[ir])),_:1}),l(oc,null,{default:t((()=>[gr])),_:1}),l(oc,null,{default:t((()=>[hr])),_:1}),l(oc,null,{default:t((()=>[fr])),_:1}),l(oc,null,{default:t((()=>[_r])),_:1}),l(oc,null,{default:t((()=>[kr])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[br])),_:1}),l(oc,null,{default:t((()=>[yr])),_:1}),l(oc,null,{default:t((()=>[Ar])),_:1}),l(oc,null,{default:t((()=>[xr])),_:1}),l(oc,null,{default:t((()=>[Cr])),_:1}),l(oc,null,{default:t((()=>[qr])),_:1}),l(oc,null,{default:t((()=>[Mr])),_:1}),l(oc,null,{default:t((()=>[Br])),_:1}),l(oc,null,{default:t((()=>[wr])),_:1}),l(oc,null,{default:t((()=>[vr])),_:1}),l(oc,null,{default:t((()=>[Tr])),_:1}),l(oc,null,{default:t((()=>[Pr])),_:1}),l(oc,null,{default:t((()=>[Dr])),_:1}),l(oc,null,{default:t((()=>[Sr])),_:1}),l(mc,null,{default:t((()=>[Er])),_:1}),l(uc,null,{default:t((()=>[Gr])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Ir])),_:1}),l(mc,null,{default:t((()=>[Vr])),_:1}),l(oc,null,{default:t((()=>[zr])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Or])),_:1}),l(oc,null,{default:t((()=>[Nr])),_:1}),l(oc,null,{default:t((()=>[Rr])),_:1}),l(oc,null,{default:t((()=>[Lr])),_:1}),l(oc,null,{default:t((()=>[$r])),_:1}),l(oc,null,{default:t((()=>[jr])),_:1}),l(oc,null,{default:t((()=>[Fr])),_:1}),l(oc,null,{default:t((()=>[Ur])),_:1}),l(oc,null,{default:t((()=>[Hr])),_:1}),l(oc,null,{default:t((()=>[Jr])),_:1}),l(oc,null,{default:t((()=>[Kr])),_:1}),l(mc,null,{default:t((()=>[Qr])),_:1}),l(oc,null,{default:t((()=>[Wr])),_:1}),l(oc,null,{default:t((()=>[Xr])),_:1}),l(oc,null,{default:t((()=>[Yr])),_:1}),l(oc,null,{default:t((()=>[Zr])),_:1}),l(oc,null,{default:t((()=>[ao])),_:1}),l(oc,null,{default:t((()=>[no])),_:1}),l(oc,null,{default:t((()=>[so])),_:1}),l(oc,null,{default:t((()=>[lo])),_:1}),l(oc,null,{default:t((()=>[to])),_:1}),l(oc,null,{default:t((()=>[eo])),_:1}),l(oc,null,{default:t((()=>[po])),_:1}),l(oc,null,{default:t((()=>[ro])),_:1}),l(oc,null,{default:t((()=>[oo])),_:1}),l(oc,null,{default:t((()=>[mo])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[co])),_:1}),l(oc,null,{default:t((()=>[uo])),_:1}),l(oc,null,{default:t((()=>[io])),_:1}),l(oc,null,{default:t((()=>[go])),_:1}),l(oc,null,{default:t((()=>[ho])),_:1}),l(oc,null,{default:t((()=>[fo])),_:1}),l(oc,null,{default:t((()=>[_o])),_:1}),l(oc,null,{default:t((()=>[ko])),_:1}),l(oc,null,{default:t((()=>[bo])),_:1}),l(oc,null,{default:t((()=>[yo])),_:1}),l(oc,null,{default:t((()=>[Ao])),_:1}),l(oc,null,{default:t((()=>[xo])),_:1}),l(oc,null,{default:t((()=>[Co])),_:1}),l(oc,null,{default:t((()=>[qo])),_:1}),l(mc,null,{default:t((()=>[Mo])),_:1}),l(uc,null,{default:t((()=>[Bo])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[wo])),_:1}),l(mc,{separator:"true"},{default:t((()=>[vo])),_:1}),l(oc,null,{default:t((()=>[To])),_:1}),l(oc,null,{default:t((()=>[Po])),_:1}),l(oc,null,{default:t((()=>[Do])),_:1}),l(oc,null,{default:t((()=>[So])),_:1}),l(oc,null,{default:t((()=>[Eo])),_:1}),l(oc,null,{default:t((()=>[Go])),_:1}),l(oc,null,{default:t((()=>[Io])),_:1}),l(oc,null,{default:t((()=>[Vo])),_:1}),l(oc,null,{default:t((()=>[zo])),_:1}),l(oc,null,{default:t((()=>[Oo])),_:1}),l(oc,null,{default:t((()=>[No])),_:1}),l(oc,null,{default:t((()=>[Ro])),_:1}),l(oc,null,{default:t((()=>[Lo])),_:1}),l(mc,null,{default:t((()=>[$o])),_:1}),l(uc,null,{default:t((()=>[jo])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Fo])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Uo])),_:1}),l(oc,{mathvariant:"normal"},{default:t((()=>[Ho])),_:1}),l(mc,{separator:"true"},{default:t((()=>[Jo])),_:1}),l(oc,null,{default:t((()=>[Ko])),_:1}),l(oc,null,{default:t((()=>[Qo])),_:1}),l(oc,null,{default:t((()=>[Wo])),_:1}),l(oc,null,{default:t((()=>[Xo])),_:1}),l(oc,null,{default:t((()=>[Yo])),_:1}),l(oc,null,{default:t((()=>[Zo])),_:1}),l(oc,null,{default:t((()=>[am])),_:1}),l(oc,null,{default:t((()=>[nm])),_:1}),l(oc,null,{default:t((()=>[sm])),_:1}),l(oc,null,{default:t((()=>[lm])),_:1}),l(oc,null,{default:t((()=>[tm])),_:1}),l(oc,null,{default:t((()=>[em])),_:1}),l(oc,null,{default:t((()=>[pm])),_:1}),l(oc,null,{default:t((()=>[rm])),_:1}),l(oc,null,{default:t((()=>[om])),_:1}),l(mc,null,{default:t((()=>[mm])),_:1}),l(uc,null,{default:t((()=>[cm])),_:1}),l(mc,{separator:"true"},{default:t((()=>[um])),_:1}),l(oc,null,{default:t((()=>[dm])),_:1}),l(oc,null,{default:t((()=>[im])),_:1}),l(oc,null,{default:t((()=>[gm])),_:1}),l(oc,null,{default:t((()=>[hm])),_:1}),l(oc,null,{default:t((()=>[fm])),_:1}),l(oc,null,{default:t((()=>[_m])),_:1}),l(oc,null,{default:t((()=>[km])),_:1}),l(oc,null,{default:t((()=>[bm])),_:1}),l(oc,null,{default:t((()=>[ym])),_:1}),l(oc,null,{default:t((()=>[Am])),_:1}),l(mc,null,{default:t((()=>[xm])),_:1}),l(mc,null,{default:t((()=>[Cm])),_:1}),l(oc,null,{default:t((()=>[qm])),_:1}),l(oc,null,{default:t((()=>[Mm])),_:1}),l(oc,null,{default:t((()=>[Bm])),_:1}),l(oc,null,{default:t((()=>[wm])),_:1}),l(oc,null,{default:t((()=>[vm])),_:1}),l(oc,null,{default:t((()=>[Tm])),_:1}),l(oc,null,{default:t((()=>[Pm])),_:1}),l(oc,null,{default:t((()=>[Dm])),_:1}),l(oc,null,{default:t((()=>[Sm])),_:1}),l(oc,null,{default:t((()=>[Em])),_:1}),l(oc,null,{default:t((()=>[Gm])),_:1}),l(oc,null,{default:t((()=>[Im])),_:1}),l(oc,null,{default:t((()=>[Vm])),_:1}),l(oc,null,{default:t((()=>[zm])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[Om])),_:1}),l(oc,null,{default:t((()=>[Nm])),_:1}),l(oc,null,{default:t((()=>[Rm])),_:1}),l(oc,null,{default:t((()=>[Lm])),_:1}),l(oc,null,{default:t((()=>[$m])),_:1}),l(oc,null,{default:t((()=>[jm])),_:1}),l(oc,null,{default:t((()=>[Fm])),_:1}),l(oc,null,{default:t((()=>[Um])),_:1}),l(oc,null,{default:t((()=>[Hm])),_:1}),l(oc,null,{default:t((()=>[Jm])),_:1}),l(oc,null,{default:t((()=>[Km])),_:1}),l(oc,null,{default:t((()=>[Qm])),_:1}),l(oc,null,{default:t((()=>[Wm])),_:1}),l(oc,null,{default:t((()=>[Xm])),_:1}),l(mc,null,{default:t((()=>[Ym])),_:1}),l(uc,null,{default:t((()=>[Zm])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[ac])),_:1}),l(mc,{stretchy:"false"},{default:t((()=>[nc])),_:1}),l(mc,null,{default:t((()=>[sc])),_:1})])),_:1})])),_:1}),l(gc,{encoding:"application/x-tex"},{default:t((()=>[lc])),_:1})])),_:1})])),_:1})]),tc])])]),ec])};export default o;export{r as __pageData};
