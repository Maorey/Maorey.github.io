import{B as n,o as a,e as s,f as t,D as l,G as e,s as p}from"./framework.c00dda38.js";const o='{"title":"动态规划","description":"","frontmatter":{"index":3},"headers":[{"level":2,"title":"这是啥","slug":"这是啥"},{"level":2,"title":"能干啥","slug":"能干啥"},{"level":2,"title":"怎么干","slug":"怎么干"},{"level":3,"title":"基础概念","slug":"基础概念"},{"level":2,"title":"举例子","slug":"举例子"},{"level":3,"title":"普通递归算法 👎","slug":"普通递归算法"},{"level":3,"title":"带备忘录递归算法 👍","slug":"带备忘录递归算法"},{"level":3,"title":"动态规划算法 😍🤙","slug":"动态规划算法"},{"level":3,"title":"对比","slug":"对比"},{"level":2,"title":"讲套路","slug":"讲套路"},{"level":2,"title":"做练习","slug":"做练习"},{"level":3,"title":"问题分析","slug":"问题分析"},{"level":3,"title":"递归形式","slug":"递归形式"},{"level":3,"title":"递推(迭代)形式","slug":"递推-迭代-形式"},{"level":2,"title":"留作业","slug":"留作业"},{"level":2,"title":"参考文献","slug":"参考文献"}],"relativePath":"blog/dynamicProgramming.md","lastUpdated":1608435481246.726}';var r={};const c=e('<h1 id="动态规划"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h1><h2 id="这是啥"><a class="header-anchor" href="#这是啥" aria-hidden="true">#</a> 这是啥</h2><p>参考百度百科 😉 :</p><p><strong>动态规划</strong>(Dynamic Programming, DP)是:</p><ul><li><strong>数学</strong>的二级学科<strong>运筹学</strong>下的三级学科</li><li>求解<strong>多阶段决策过程最优化</strong>的过程, 是一种数学方法论, 没有公式可套 (但有套路)</li><li>每个阶段的决策依赖当前状态, 而又会引起状态转移, 故称&quot;动态&quot;</li><li>兄弟姐妹有 <em>线型规划</em> 、<em>非线型规划</em>、<em>组合最优化</em>、<em>图论</em>等</li></ul><h2 id="能干啥"><a class="header-anchor" href="#能干啥" aria-hidden="true">#</a> 能干啥</h2><p><s>主持大菊, 运筹帷幄</s></p><p>应用广泛, 如经济、工业、军事等领域, 并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果...</p><div class="tip custom-block"><p class="custom-block-title">画重点</p><p>这里只讨论编程领域的应用</p></div><h2 id="怎么干"><a class="header-anchor" href="#怎么干" aria-hidden="true">#</a> 怎么干</h2><h3 id="基础概念"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p><em>(做出决策 = 计算出结果)</em></p><ul><li>状态: 当前阶段上下文</li><li>边界: 无法继续优化的阶段, 即决策确定 <em>(无边界 = 无解/无数解 = 死循环)</em></li><li>无后效性: 当前阶段做出决策后, 后续决策 不受 之前阶段 的影响, 即状态单向转移, 后续决策都是基于前面有限的阶段</li><li>状态转移方程: 不同阶段间上下文关系</li><li>重叠子结构: 不同阶段之间要解决的若干问题有重复</li><li>备忘录(DP Table): 在寻找最优子结构, 化简状态转移方程的过程中用于记录各阶段状态或决策的额外数据, 应该尽量去掉</li><li>最优子结构: 对阶段的划分和决策的过程最优化, 最优子结构一定也是由最优子结构组成</li></ul><h2 id="举例子"><a class="header-anchor" href="#举例子" aria-hidden="true">#</a> 举例子</h2><p>与分治法类似 (如快速/归并排序算法), 都是将待求解问题分为若干子问题, 从子问题的解得到原问题的解, 大事化小, 小事化了. 不同的是分治法一般是<strong>自顶向下</strong>递归求解, 而动态规划优化后一般是<strong>自底向上</strong>求解</p><p>以求解 斐波那契数列 第 <code>n</code> 位的值为例</p><p>问题分析🤔: 斐波那契数列 前两位为 <code>1</code>， 之后的每一位的值等于它前面两位的和</p><p>💡✨ 暴力求解无脑走一波(自顶向下)</p><h3 id="普通递归算法"><a class="header-anchor" href="#普通递归算法" aria-hidden="true">#</a> 普通递归算法 👎</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>求解过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;) --&gt; B111\n        A111 --&gt; A1112(&quot;f(2)&quot;) --&gt; B111\n      A11 --&gt; A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;) --&gt; B112\n        A112 --&gt; A1122(&quot;f(2)&quot;) --&gt; B112\n        end\n    A1 --&gt; A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;) --&gt; B121\n        A121 --&gt; A1212(&quot;f(2)&quot;) --&gt; B121\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;) --&gt; B122\n        A122 --&gt; A1222(&quot;f(2)&quot;) --&gt; B122\n      end\n  A --&gt; A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;) --&gt; B211\n        A211 --&gt; A2112(&quot;f(2)&quot;) --&gt; B211\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;) --&gt; B212\n        A212 --&gt; A2122(&quot;f(2)&quot;) --&gt; B212\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;) --&gt; B221\n        A221 --&gt; A2212(&quot;f(2)&quot;) --&gt; B221\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;) --&gt; B222\n        A222 --&gt; A2222(&quot;f(2)&quot;) --&gt; B222\n  end\n\n  B1(&quot;f(n - 1)&quot;) --&gt; B(&quot;f(n)&quot;)\n    B11(&quot;f(n - 2)&quot;) --&gt; B1\n      B111(...) --&gt; B11\n      B112(...) --&gt; B11\n    B12(&quot;f(n - 3)&quot;) --&gt; B1\n      subgraph b\n      B121(...) --&gt; B12\n      B122(...) --&gt; B12\n      end\n  B2(&quot;f(n - 2)&quot;) --&gt; B\n    subgraph a\n    B21(&quot;f(n - 3)&quot;) --&gt; B2\n      B211(...) --&gt; B21\n      B212(...) --&gt; B21\n    B22(&quot;f(n - 4)&quot;) --&gt; B2\n      B221(...) --&gt; B22\n      B222(...) --&gt; B22\n    end</pre><p>如图所示, 圈起来的都是重复子问题, 可以通过使用备忘录空间换时间的方式来实现剪枝</p><h3 id="带备忘录递归算法"><a class="header-anchor" href="#带备忘录递归算法" aria-hidden="true">#</a> 带备忘录递归算法 👍</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="动态规划算法"><a class="header-anchor" href="#动态规划算法" aria-hidden="true">#</a> 动态规划算法 😍🤙</h3><p>我们应用动态规划的概念来审视上面的解法</p><ul><li>状态: <code>n</code>的值</li><li>重叠子结构: 上图框起来的部分, 比如 <code>f(n - 2)</code> 计算了两次, <code>f(n - 3)</code> 计算了三次...</li><li>备忘录: 使用一个简单对象(这里也可以是数组)缓存每个阶段计算结果</li><li>最优子结构: 对于 <code>n &gt; 2</code> 存在最优子结构, 如下图:</li></ul><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;)\n        A111 --&gt; A1112(&quot;f(2)&quot;)\n      A11 x-.-x A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;)\n        A112 --&gt; A1122(&quot;f(2)&quot;)\n        end\n    A1 x-.-x A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;)\n        A121 --&gt; A1212(&quot;f(2)&quot;)\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;)\n        A122 --&gt; A1222(&quot;f(2)&quot;)\n      end\n  A x-.-x A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;)\n        A211 --&gt; A2112(&quot;f(2)&quot;)\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;)\n        A212 --&gt; A2122(&quot;f(2)&quot;)\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;)\n        A221 --&gt; A2212(&quot;f(2)&quot;)\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;)\n        A222 --&gt; A2222(&quot;f(2)&quot;)\n  end\nstyle a fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle b fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle c fill:#ddd,stroke:#ccc,stroke-dasharray:5 5</pre>',29),u=t("li",null,[p("边界: "),t("code",null,"n = 1 或 2")],-1),m=t("li",null,[p("无后效性: "),t("code",null,"n > 2"),p(" 的每个阶段的结果"),t("strong",null,"完全取决于"),p("它前面两个阶段的结果")],-1),i=p("状态转移方程: 易得(已最简): "),d={class:"katex"},g={class:"katex-mathml"},k=p("f"),h=p("("),f=p("n"),b=p(")"),_=p("="),y=p("{"),A=p("("),x=p("1"),q=p(","),C=p("if"),w=p("n"),M=p("="),B=p("1"),v=p(","),T=p("2"),P=p(")"),D=p(","),S=p("("),V=p("f"),E=p("("),I=p("n"),G=p("−"),z=p("1"),O=p(")"),R=p("+"),N=p("f"),L=p("("),j=p("n"),F=p("−"),U=p("2"),H=p(")"),J=p(","),K=p("if"),Q=p("n"),W=p(">"),X=p("2"),Y=p(")"),Z=p("\\{f\\{\\{\\left(\\{n}\\right)}}}=\\{\\left\\lbrace\\{\\left(\\{1},\\{\\quad\\text\\{if}\\quad}\\{n}=\\{1},\\{2}\\right)},\\{\\left(\\{f\\{\\{\\left(\\{n}-\\{1}\\right)}}}+\\{f\\{\\{\\left(\\{n}-\\{2}\\right)}}},\\{\\quad\\text\\{if}\\quad}\\{n}>\\{2}\\right)}\\right.}"),$=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">1</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">1</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord">if</span></span><span class="mspace" style="margin-right:1em;"></span></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord">2</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>',1),nn=e('<p>所以这么一波分析之后, 找到最优的求解过程应该如下</p><pre class="mermaid loading">flowchart TB\n  A1(&quot;f(1)&quot;) --&gt; A3(&quot;f(3)&quot;)\n  A2(&quot;f(2)&quot;) --&gt; A3\n  A2 --&gt; A4(&quot;f(4)&quot;)\n  A3 --&gt; A4\n  A3 --&gt; Ad1(...)\n  A4 --&gt; Ad1\n  A4 --&gt; Ad2(...)\n  Ad1 --&gt; Ad2\n  Ad1 --&gt; An2(&quot;f(n - 2)&quot;)\n  Ad2 --&gt; An2\n  Ad2 --&gt; An1(&quot;f(n - 1)&quot;)\n  An2 --&gt; An1\n  An2 --&gt; An(&quot;f(n)&quot;)\n  An1 --&gt; An</pre><p>顺着备忘录的思路根据<strong>状态转移方程</strong>改为<strong>自底向上</strong>求解的形式:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    DPTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>很明显备忘录是可以优化掉的, 易得:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> next\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    next <span class="token operator">=</span> prev <span class="token operator">+</span> curr\n    prev <span class="token operator">=</span> curr\n    curr <span class="token operator">=</span> next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> curr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="对比"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p><em>TODO: 时间/空间复杂度</em></p><pre class="echarts loading" style="height:250px;">{\n    tooltip: {\n        trigger: &#39;axis&#39;,\n        axisPointer: {\n            type: &#39;cross&#39;,\n            crossStyle: {\n                color: &#39;#999&#39;\n            }\n        }\n    },\n    xAxis: [\n        {\n            type: &#39;category&#39;,\n            data: [&#39;普通递归&#39;, &#39;带备忘录递归&#39;, &#39;带备忘录动态规划&#39;, &#39;动态规划&#39;],\n            axisPointer: {\n                type: &#39;shadow&#39;\n            }\n        }\n    ],\n    yAxis: [\n        {\n            type: &#39;value&#39;,\n            name: &#39;时间复杂度&#39;,\n            axisLabel: {\n                formatter: &#39;O({value}}&#39;\n            }\n        },\n        {\n            type: &#39;value&#39;,\n            name: &#39;空间复杂度&#39;,\n            axisLabel: {\n                formatter: &#39;O({value})&#39;\n            }\n        }\n    ],\n    series: [\n        {\n            name: &#39;时间复杂度&#39;,\n            type: &#39;bar&#39;,\n            data: [2.0, 4.9, 7.0, 23.2]\n        },\n        {\n            name: &#39;空间复杂度&#39;,\n            type: &#39;bar&#39;,\n            yAxisIndex: 1,\n            data: [2.6, 5.9, 9.0, 26.4]\n        }\n    ]\n}</pre><h2 id="讲套路"><a class="header-anchor" href="#讲套路" aria-hidden="true">#</a> 讲套路</h2><p>上面的示例只是体现了动态规划的一般过程, 动态规划是一种求解<strong>最值</strong>的方法论, 它的核心是<strong>尽可能压缩可能解空间</strong>, 具体做法是将大问题拆解为若干小问题, 求解小问题推导出大问题的解。</p><p>设计动态规划算法主要思路为:</p><ul><li>明确状态, 搞清楚当前面对的问题</li><li>分析上游状态, 弄明白要解决当前阶段的问题最直接的需求</li><li>跟踪下游状态, 对当前问题的解决是否满足对下游的需求</li></ul><p>上下游情况考虑清楚一个, 往往就能设计出状态转移方程. 从求解一个问题开始, 一般的解决过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;分析问题, 尝试枚举出所有可能解(暴力求解)&quot;) --&gt; B{&quot;分析DP要素(重叠子结构/状态/边界/无后效性), 确定是否可DP&quot;}\n  B ------&gt; |否| D(其他办法)\n  B --&gt; |是| C(DP开始)\n  C --&gt; C1(尝试自顶向下递归, 分析执行过程)\n  C1 --&gt; C2(找出最优子结构, 设计状态转移方程)\n  C2 --&gt; C3(使用备忘录剪枝重叠子问题)\n  C3 --&gt; C4(将算法改造成自底向上求解的方式)\n  C -.-&gt; C2\n  C2 -.-&gt; C4</pre><h2 id="做练习"><a class="header-anchor" href="#做练习" aria-hidden="true">#</a> 做练习</h2><div class="warning custom-block"><p class="custom-block-title">黄金矿工</p><p>有<strong>5座</strong>储量不尽相同的金矿, 每座金矿需要的矿工人数也不尽相同(如下表), 现有矿工<strong>10位</strong>, 每座金矿只能挖光或不挖, 不能只投入一部分人挖走部分金矿。求利益最大化方案(挖到最多金子)</p></div><table><thead><tr><th style="text-align:center;">金矿</th><th style="text-align:center;">金矿A</th><th style="text-align:center;">金矿B</th><th style="text-align:center;">金矿C</th><th style="text-align:center;">金矿D</th><th style="text-align:center;">金矿E</th></tr></thead><tbody><tr><td style="text-align:center;">储量(kg)</td><td style="text-align:center;">400</td><td style="text-align:center;">500</td><td style="text-align:center;">200</td><td style="text-align:center;">300</td><td style="text-align:center;">350</td></tr><tr><td style="text-align:center;">需要的矿工数</td><td style="text-align:center;">5</td><td style="text-align:center;">5</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td></tr></tbody></table><h3 id="问题分析"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3>',19),an=p("穷举: 每座矿只有挖或不挖两种情况, 故挖矿方案共有 "),sn={class:"katex"},tn={class:"katex-mathml"},ln=p("∑"),en=p("n"),pn=p("="),on=p("1"),rn=p("5"),cn=p("C"),un=p("5"),mn=p("n"),dn=p("\\{\\sum_\\{\\{\\{n}=\\{1}}}^\\{\\{5}}}\\{\\{C}_\\{\\{5}}^\\{\\{n}}}"),gn=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>',1),kn=p(" 种, 从中找出投入不超过10位矿工并且获得金矿最多的方案即可, 算法实现的时间复杂度为 "),hn={class:"katex"},fn={class:"katex-mathml"},bn=p("O"),_n=p("("),yn=p("2"),An=p("n"),xn=p(")"),qn=p("\\{O}\\{\\left(\\{2}^\\{\\{n}}\\right)}"),Cn=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord">2</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>',1),wn=p(" (空间复杂度"),Mn={class:"katex"},Bn={class:"katex-mathml"},vn=p("O"),Tn=p("("),Pn=p("n"),Dn=p(")"),Sn=p("\\{O}\\{\\left(\\{n}\\right)}"),Vn=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>',1),En=p(", 金矿全都挖的时候)"),In=e('<p>尝试DP (以下 &quot;x位矿工挖n座矿的最优方案&quot; 简称 &quot;x人n矿&quot;)</p><p>分解问题:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿) -.-&gt; |若总收益大于右边方案| D[最优采矿方案]\n  A --&gt; C(x人1矿 + 10-x人4矿) -.-&gt; |若总收益大于左边方案| D</pre><p>😉发现动态规划要素了没？</p><p>继续分解看看:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿)\n  A --&gt; C(x人1矿 + 10-x人4矿)\n\n  B --&gt; D(10人3矿)\n  B --&gt; E(y人1矿 + 10-y人3矿)\n\n  C --&gt; F(10-x人3矿)\n  C --&gt; G(z人1矿 + 10-x-z人3矿)</pre><p>若设金矿数量为 <code>goldMineCount</code> , 矿工数为 <code>minerCount</code>, 金矿储量依次为 <code>reserves[]</code> , 金矿用工数依次为 <code>requiredMiners[]</code> , 则<code>10人5矿</code>可以表示为: <code>f(10, 5) = max(f(10, 4), reserves[4] + f(10 - requiredMiners[4]), 4)</code></p><p>递推下去这个问题会有边界么? 显然存在, 如下:</p>',8),Gn={class:"katex-display"},zn={class:"katex"},On={class:"katex-mathml"},Rn=p("f"),Nn=p("("),Ln=p("x"),jn=p(","),Fn=p("1"),Un=p(")"),Hn=p("="),Jn=p("("),Kn=p("r"),Qn=p("e"),Wn=p("s"),Xn=p("e"),Yn=p("r"),Zn=p("v"),$n=p("e"),na=p("s"),aa=p("["),sa=p("0"),ta=p("]"),la=p(","),ea=p("i"),pa=p("f"),oa=p("x"),ra=p(">"),ca=p("="),ua=p("r"),ma=p("e"),ia=p("q"),da=p("u"),ga=p("i"),ka=p("r"),ha=p("e"),fa=p("d"),ba=p("M"),_a=p("i"),ya=p("n"),Aa=p("e"),xa=p("r"),qa=p("s"),Ca=p("["),wa=p("0"),Ma=p("]"),Ba=p(")"),va=p(","),Ta=p("("),Pa=p("0"),Da=p(","),Sa=p("i"),Va=p("f"),Ea=p("x"),Ia=p("<"),Ga=p("r"),za=p("e"),Oa=p("q"),Ra=p("u"),Na=p("i"),La=p("r"),ja=p("e"),Fa=p("d"),Ua=p("M"),Ha=p("i"),Ja=p("n"),Ka=p("e"),Qa=p("r"),Wa=p("s"),Xa=p("["),Ya=p("0"),Za=p("]"),$a=p(")"),ns=p(":"),as=p("f(x,1)=\\{ (reserves[0],if x>=requiredMiners[0]), (0,if x<requiredMiners[0]) :} "),ss=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),ts=t("p",null,"所以这个问题是可以用动态规划方法解决的✌️",-1),ls=t("p",null,"由上可得状态转移方程如下:",-1),es={class:"katex-display"},ps={class:"katex"},os={class:"katex-mathml"},rs=p("f"),cs=p("("),us=p("m"),ms=p("i"),is=p("n"),ds=p("e"),gs=p("r"),ks=p("C"),hs=p("o"),fs=p("u"),bs=p("n"),_s=p("t"),ys=p(","),As=p("g"),xs=p("o"),qs=p("l"),Cs=p("d"),ws=p("M"),Ms=p("i"),Bs=p("n"),vs=p("e"),Ts=p("C"),Ps=p("o"),Ds=p("u"),Ss=p("n"),Vs=p("t"),Es=p(")"),Is=p("="),Gs=p("("),zs=p("0"),Os=p(","),Rs=p("i"),Ns=p("f"),Ls=p("g"),js=p("o"),Fs=p("l"),Us=p("d"),Hs=p("M"),Js=p("i"),Ks=p("n"),Qs=p("e"),Ws=p("C"),Xs=p("o"),Ys=p("u"),Zs=p("n"),$s=p("t"),nt=p("<"),at=p("="),st=p("1"),tt=p(","),lt=p("m"),et=p("i"),pt=p("n"),ot=p("e"),rt=p("r"),ct=p("C"),ut=p("o"),mt=p("u"),it=p("n"),dt=p("t"),gt=p("<"),kt=p("r"),ht=p("e"),ft=p("q"),bt=p("u"),_t=p("i"),yt=p("r"),At=p("e"),xt=p("d"),qt=p("M"),Ct=p("i"),wt=p("n"),Mt=p("e"),Bt=p("r"),vt=p("s"),Tt=p("["),Pt=p("0"),Dt=p("]"),St=p(")"),Vt=p(","),Et=p("("),It=p("r"),Gt=p("e"),zt=p("s"),Ot=p("e"),Rt=p("r"),Nt=p("v"),Lt=p("e"),jt=p("s"),Ft=p("["),Ut=p("0"),Ht=p("]"),Jt=p(","),Kt=p("i"),Qt=p("f"),Wt=p("g"),Xt=p("o"),Yt=p("l"),Zt=p("d"),$t=p("M"),nl=p("i"),al=p("n"),sl=p("e"),tl=p("C"),ll=p("o"),el=p("u"),pl=p("n"),ol=p("t"),rl=p("="),cl=p("1"),ul=p(","),ml=p("m"),il=p("i"),dl=p("n"),gl=p("e"),kl=p("r"),hl=p("C"),fl=p("o"),bl=p("u"),_l=p("n"),yl=p("t"),Al=p(">"),xl=p("="),ql=p("r"),Cl=p("e"),wl=p("q"),Ml=p("u"),Bl=p("i"),vl=p("r"),Tl=p("e"),Pl=p("d"),Dl=p("M"),Sl=p("i"),Vl=p("n"),El=p("e"),Il=p("r"),Gl=p("s"),zl=p("["),Ol=p("0"),Rl=p("]"),Nl=p(")"),Ll=p(","),jl=p("("),Fl=p('"'),Ul=p("f"),Hl=p("("),Jl=p("m"),Kl=p("i"),Ql=p("n"),Wl=p("e"),Xl=p("r"),Yl=p("C"),Zl=p("o"),$l=p("u"),ne=p("n"),ae=p("t"),se=p(","),te=p("g"),le=p("o"),ee=p("l"),pe=p("d"),oe=p("M"),re=p("i"),ce=p("n"),ue=p("e"),me=p("C"),ie=p("o"),de=p("u"),ge=p("n"),ke=p("t"),he=p("−"),fe=p("1"),be=p(")"),_e=p('"'),ye=p(","),Ae=p("i"),xe=p("f"),qe=p("g"),Ce=p("o"),we=p("l"),Me=p("d"),Be=p("M"),ve=p("i"),Te=p("n"),Pe=p("e"),De=p("C"),Se=p("o"),Ve=p("u"),Ee=p("n"),Ie=p("t"),Ge=p(">"),ze=p("1"),Oe=p(","),Re=p("m"),Ne=p("i"),Le=p("n"),je=p("e"),Fe=p("r"),Ue=p("C"),He=p("o"),Je=p("u"),Ke=p("n"),Qe=p("t"),We=p("<"),Xe=p("r"),Ye=p("e"),Ze=p("q"),$e=p("u"),np=p("i"),ap=p("r"),sp=p("e"),tp=p("d"),lp=p("M"),ep=p("i"),pp=p("n"),op=p("e"),rp=p("r"),cp=p("s"),up=p("["),mp=p("g"),ip=p("o"),dp=p("l"),gp=p("d"),kp=p("M"),hp=p("i"),fp=p("n"),bp=p("e"),_p=p("C"),yp=p("o"),Ap=p("u"),xp=p("n"),qp=p("t"),Cp=p("−"),wp=p("1"),Mp=p("]"),Bp=p(")"),vp=p(","),Tp=p("("),Pp=p('"'),Dp=p("m"),Sp=p("a"),Vp=p("x"),Ep=p("("),Ip=p("f"),Gp=p("("),zp=p("m"),Op=p("i"),Rp=p("n"),Np=p("e"),Lp=p("r"),jp=p("C"),Fp=p("o"),Up=p("u"),Hp=p("n"),Jp=p("t"),Kp=p(","),Qp=p("g"),Wp=p("o"),Xp=p("l"),Yp=p("d"),Zp=p("M"),$p=p("i"),no=p("n"),ao=p("e"),so=p("C"),to=p("o"),lo=p("u"),eo=p("n"),po=p("t"),oo=p("−"),ro=p("1"),co=p(")"),uo=p(","),mo=p("r"),io=p("e"),go=p("s"),ko=p("e"),ho=p("r"),fo=p("v"),bo=p("e"),_o=p("s"),yo=p("["),Ao=p("g"),xo=p("o"),qo=p("l"),Co=p("d"),wo=p("M"),Mo=p("i"),Bo=p("n"),vo=p("e"),To=p("C"),Po=p("o"),Do=p("u"),So=p("n"),Vo=p("t"),Eo=p("−"),Io=p("1"),Go=p("]"),zo=p("+"),Oo=p("f"),Ro=p("("),No=p("m"),Lo=p("i"),jo=p("n"),Fo=p("e"),Uo=p("r"),Ho=p("C"),Jo=p("o"),Ko=p("u"),Qo=p("n"),Wo=p("t"),Xo=p("−"),Yo=p("r"),Zo=p("e"),$o=p("q"),nr=p("u"),ar=p("i"),sr=p("r"),tr=p("e"),lr=p("d"),er=p("M"),pr=p("i"),or=p("n"),rr=p("e"),cr=p("r"),ur=p("s"),mr=p("["),ir=p("g"),dr=p("o"),gr=p("l"),kr=p("d"),hr=p("M"),fr=p("i"),br=p("n"),_r=p("e"),yr=p("C"),Ar=p("o"),xr=p("u"),qr=p("n"),Cr=p("t"),wr=p("−"),Mr=p("1"),Br=p("]"),vr=p(","),Tr=p("g"),Pr=p("o"),Dr=p("l"),Sr=p("d"),Vr=p("M"),Er=p("i"),Ir=p("n"),Gr=p("e"),zr=p("C"),Or=p("o"),Rr=p("u"),Nr=p("n"),Lr=p("t"),jr=p("−"),Fr=p("1"),Ur=p(")"),Hr=p(")"),Jr=p('"'),Kr=p(","),Qr=p("i"),Wr=p("f"),Xr=p("g"),Yr=p("o"),Zr=p("l"),$r=p("d"),nc=p("M"),ac=p("i"),sc=p("n"),tc=p("e"),lc=p("C"),ec=p("o"),pc=p("u"),oc=p("n"),rc=p("t"),cc=p(">"),uc=p("1"),mc=p(","),ic=p("m"),dc=p("i"),gc=p("n"),kc=p("e"),hc=p("r"),fc=p("C"),bc=p("o"),_c=p("u"),yc=p("n"),Ac=p("t"),xc=p(">"),qc=p("="),Cc=p("r"),wc=p("e"),Mc=p("q"),Bc=p("u"),vc=p("i"),Tc=p("r"),Pc=p("e"),Dc=p("d"),Sc=p("M"),Vc=p("i"),Ec=p("n"),Ic=p("e"),Gc=p("r"),zc=p("s"),Oc=p("["),Rc=p("g"),Nc=p("o"),Lc=p("l"),jc=p("d"),Fc=p("M"),Uc=p("i"),Hc=p("n"),Jc=p("e"),Kc=p("C"),Qc=p("o"),Wc=p("u"),Xc=p("n"),Yc=p("t"),Zc=p("−"),$c=p("1"),nu=p("]"),au=p(")"),su=p(":"),tu=p('f(minerCount,goldMineCount)=\\{ (0,if goldMineCount<=1,minerCount<requiredMiners[0]), (reserves[0], if goldMineCount=1,minerCount>=requiredMiners[0]), ("f(minerCount, goldMineCount - 1)", if goldMineCount>1,minerCount<requiredMiners[goldMineCount-1]), ("max(f(minerCount, goldMineCount - 1), reserves[goldMineCount - 1] + f(minerCount - requiredMiners[goldMineCount - 1], goldMineCount - 1))", if goldMineCount>1,minerCount>=requiredMiners[goldMineCount-1]) :} '),lu=e('<span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">&quot;</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">&quot;</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>',1),eu=e('<p>那么DP走起, <code>f(minerCount, goldMineCount)</code> 备忘录如下:</p><table><thead><tr><th style="text-align:center;"><strong>minerCount / goldMineCount</strong></th><th style="text-align:center;"><strong>1</strong></th><th style="text-align:center;"><strong>2</strong></th><th style="text-align:center;"><strong>3</strong></th><th style="text-align:center;"><strong>4</strong></th><th style="text-align:center;"><strong>5</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>1</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">300<br><em>(D)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;"><strong>5</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td></tr><tr><td style="text-align:center;"><strong>6</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">550<br><em>(C + E)</em></td></tr><tr><td style="text-align:center;"><strong>7</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B) / (C + D)</em></td><td style="text-align:center;">650<br><em>(D + E)</em></td></tr><tr><td style="text-align:center;"><strong>8</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;"><strong>9</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">800<br><em>(B + D)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;"><strong>10</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td></tr><tr><td style="text-align:center;"><strong>11</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1050<br><em>(B + C + E)</em></td></tr><tr><td style="text-align:center;"><strong>12</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1000<br><em>(B + C + D)</em></td><td style="text-align:center;">1150<br><em>(B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>13</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;"><strong>14</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;"><strong>15</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1350<br><em>(B + C + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>16</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1450<br><em>(A + B + C + E)</em></td></tr><tr><td style="text-align:center;"><strong>17</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>18</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>19</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>20</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1750<br><em>(A + B + C + D + E)</em></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">提示</p><p>后文中将省略已出现过的代码</p></div><h3 id="递归形式"><a class="header-anchor" href="#递归形式" aria-hidden="true">#</a> 递归形式</h3><p>只计算最大收益数值:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 金矿信息 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 黄金储量 */</span>\n  gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/** 需要矿工数 */</span>\n  cost<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">return</span> minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span>\n    minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost\n      <span class="token operator">?</span> <span class="token number">0</span>\n      <span class="token operator">:</span> minerCount <span class="token operator">===</span> goldMine<span class="token punctuation">.</span>cost\n        <span class="token operator">?</span> goldMine<span class="token punctuation">.</span>gold\n        <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold <span class="token operator">+</span>\n          <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> left <span class="token operator">&gt;</span> right <span class="token operator">?</span> left <span class="token operator">:</span> right\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 验证\ngetMostGold(\n  [\n    { id: &#39;1&#39;, gold: 400, cost: 5 },\n    { id: &#39;2&#39;, gold: 500, cost: 5 },\n    { id: &#39;3&#39;, gold: 200, cost: 3 },\n    { id: &#39;4&#39;, gold: 300, cost: 4 },\n    { id: &#39;5&#39;, gold: 350, cost: 3 },\n  ],\n  10\n)\n*/</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>得到详细方案:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 得到黄金最多的 采矿方案 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 要挖掘的金矿 */</span>\n  mines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token operator">:</span> GoldMine<span class="token punctuation">,</span> plans<span class="token operator">:</span> Plan<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> plan\n  <span class="token keyword">let</span> i <span class="token operator">=</span> plans<span class="token punctuation">.</span>length\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> gold<span class="token punctuation">,</span> cost <span class="token punctuation">}</span> <span class="token operator">=</span> goldMine\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    plan <span class="token operator">=</span> plans<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n    plan<span class="token punctuation">.</span>gold <span class="token operator">+=</span> gold\n    plan<span class="token punctuation">.</span>cost <span class="token operator">+=</span> cost\n    plan<span class="token punctuation">.</span>mines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">defaultCompare</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">===</span> b\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">sameArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  arrayA<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  arrayB<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  ignoreOrder<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n  sameItem<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>itemInA<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> itemInB<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayA <span class="token operator">===</span> arrayB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arrayA <span class="token operator">||</span> <span class="token operator">!</span>arrayB<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> size <span class="token operator">=</span> arrayA<span class="token punctuation">.</span>length\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!==</span> arrayB<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n\n  sameItem <span class="token operator">||</span> <span class="token punctuation">(</span>sameItem <span class="token operator">=</span> defaultCompare<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> item<span class="token punctuation">,</span> isDiffer<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    item <span class="token operator">=</span> arrayA<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    isDiffer <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">sameItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> arrayB<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreOrder <span class="token operator">&amp;&amp;</span> isDiffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!==</span> i <span class="token operator">&amp;&amp;</span> <span class="token function">sameItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> arrayB<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          isDiffer <span class="token operator">=</span> <span class="token boolean">false</span>\n          <span class="token keyword">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDiffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">samePlan</span><span class="token punctuation">(</span>planA<span class="token operator">:</span> Plan<span class="token punctuation">,</span> planB<span class="token operator">:</span> Plan<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    planA <span class="token operator">===</span> planB <span class="token operator">||</span>\n    <span class="token punctuation">(</span>planA<span class="token punctuation">.</span>gold <span class="token operator">===</span> planB<span class="token punctuation">.</span>gold <span class="token operator">&amp;&amp;</span>\n      planA<span class="token punctuation">.</span>cost <span class="token operator">===</span> planB<span class="token punctuation">.</span>cost <span class="token operator">&amp;&amp;</span>\n      <span class="token function">sameArray</span><span class="token punctuation">(</span>planA<span class="token punctuation">.</span>mines<span class="token punctuation">,</span> planB<span class="token punctuation">.</span>mines<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  leftPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  rightPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> leftValue <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n  <span class="token keyword">let</span> rightValue <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 归并</span>\n    <span class="token keyword">let</span> l <span class="token operator">=</span> leftPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> r <span class="token operator">=</span> rightPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> p <span class="token operator">=</span> l <span class="token operator">+</span> r\n    <span class="token keyword">const</span> mergedPlans <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Array</span><span class="token generic class-name"><span class="token operator">&lt;</span>Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">R</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n\n    <span class="token keyword">let</span> leftPlan\n    <span class="token keyword">let</span> rightPlan\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      leftPlan <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n      rightPlan <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n\n      leftValue <span class="token operator">=</span> leftPlan<span class="token punctuation">.</span>cost\n      rightValue <span class="token operator">=</span> rightPlan<span class="token punctuation">.</span>cost\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        l<span class="token operator">--</span>\n        r<span class="token operator">--</span>\n        mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlan\n        <span class="token function">sameArray</span><span class="token punctuation">(</span>leftPlan<span class="token punctuation">.</span>mines<span class="token punctuation">,</span> rightPlan<span class="token punctuation">.</span>mines<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlan<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">&gt;</span> rightValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        l<span class="token operator">--</span>\n        mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlan\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        r<span class="token operator">--</span>\n        mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlan\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">let</span> compareOnceFlag\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      leftPlan <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        compareOnceFlag <span class="token operator">||</span>\n        <span class="token punctuation">(</span>compareOnceFlag <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">samePlan</span><span class="token punctuation">(</span>leftPlan<span class="token punctuation">,</span> mergedPlans<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlan\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      rightPlan <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        compareOnceFlag <span class="token operator">||</span>\n        <span class="token punctuation">(</span>compareOnceFlag <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">samePlan</span><span class="token punctuation">(</span>rightPlan<span class="token punctuation">,</span> mergedPlans<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlan\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    mergedPlans<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> mergedPlans\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> leftValue <span class="token operator">&gt;</span> rightValue <span class="token operator">?</span> leftPlans <span class="token operator">:</span> rightPlans\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> goldMine\n  <span class="token keyword">let</span> cost\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n    <span class="token keyword">return</span> minerCount <span class="token operator">&lt;</span> cost\n      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> cost<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>minerCount <span class="token operator">&lt;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> right\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>minerCount <span class="token operator">===</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n    <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">getMostGold</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br></div></div><h3 id="递推-迭代-形式"><a class="header-anchor" href="#递推-迭代-形式" aria-hidden="true">#</a> 递推(迭代)形式</h3><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// TODO</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="留作业"><a class="header-anchor" href="#留作业" aria-hidden="true">#</a> 留作业</h2><p>请思考:</p><ol><li>动态规划一定比递归更优么?</li></ol><p><em>例如矿工数远远大于金矿数的情况;空间/频繁读写敏感场景</em></p><ol start="2"><li>黄金矿工各算法的时间/空间复杂度怎么评估?</li></ol><p><em>俺不知道</em></p><h2 id="参考文献"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p><em>TODO</em></p>',18);r.render=function(e,p,o,r,pu,ou){const ru=n("mi"),cu=n("mo"),uu=n("mrow"),mu=n("mn"),iu=n("mspace"),du=n("mtext"),gu=n("annotation"),ku=n("semantics"),hu=n("math"),fu=n("msubsup"),bu=n("msup");return a(),s("div",null,[c,t("ul",null,[u,m,t("li",null,[i,t("span",d,[t("span",g,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[k])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[h])),_:1}),t(ru,null,{default:l((()=>[f])),_:1}),t(cu,{fence:"true"},{default:l((()=>[b])),_:1})])),_:1})])),_:1}),t(cu,null,{default:l((()=>[_])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[y])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[A])),_:1}),t(mu,null,{default:l((()=>[x])),_:1}),t(cu,{separator:"true"},{default:l((()=>[q])),_:1}),t(uu,null,{default:l((()=>[t(iu,{width:"1em"}),t(du,null,{default:l((()=>[C])),_:1}),t(iu,{width:"1em"})])),_:1}),t(ru,null,{default:l((()=>[w])),_:1}),t(cu,null,{default:l((()=>[M])),_:1}),t(mu,null,{default:l((()=>[B])),_:1}),t(cu,{separator:"true"},{default:l((()=>[v])),_:1}),t(mu,null,{default:l((()=>[T])),_:1}),t(cu,{fence:"true"},{default:l((()=>[P])),_:1})])),_:1}),t(cu,{separator:"true"},{default:l((()=>[D])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[S])),_:1}),t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[V])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[E])),_:1}),t(ru,null,{default:l((()=>[I])),_:1}),t(cu,null,{default:l((()=>[G])),_:1}),t(mu,null,{default:l((()=>[z])),_:1}),t(cu,{fence:"true"},{default:l((()=>[O])),_:1})])),_:1})])),_:1}),t(cu,null,{default:l((()=>[R])),_:1}),t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[N])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[L])),_:1}),t(ru,null,{default:l((()=>[j])),_:1}),t(cu,null,{default:l((()=>[F])),_:1}),t(mu,null,{default:l((()=>[U])),_:1}),t(cu,{fence:"true"},{default:l((()=>[H])),_:1})])),_:1})])),_:1}),t(cu,{separator:"true"},{default:l((()=>[J])),_:1}),t(uu,null,{default:l((()=>[t(iu,{width:"1em"}),t(du,null,{default:l((()=>[K])),_:1}),t(iu,{width:"1em"})])),_:1}),t(ru,null,{default:l((()=>[Q])),_:1}),t(cu,null,{default:l((()=>[W])),_:1}),t(mu,null,{default:l((()=>[X])),_:1}),t(cu,{fence:"true"},{default:l((()=>[Y])),_:1})])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[Z])),_:1})])),_:1})])),_:1})]),$])])]),nn,t("p",null,[an,t("span",sn,[t("span",tn,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(fu,null,{default:l((()=>[t(cu,null,{default:l((()=>[ln])),_:1}),t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[en])),_:1}),t(cu,null,{default:l((()=>[pn])),_:1}),t(mu,null,{default:l((()=>[on])),_:1})])),_:1}),t(mu,null,{default:l((()=>[rn])),_:1})])),_:1}),t(fu,null,{default:l((()=>[t(ru,null,{default:l((()=>[cn])),_:1}),t(mu,null,{default:l((()=>[un])),_:1}),t(ru,null,{default:l((()=>[mn])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[dn])),_:1})])),_:1})])),_:1})]),gn]),kn,t("span",hn,[t("span",fn,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[bn])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[_n])),_:1}),t(bu,null,{default:l((()=>[t(mu,null,{default:l((()=>[yn])),_:1}),t(ru,null,{default:l((()=>[An])),_:1})])),_:1}),t(cu,{fence:"true"},{default:l((()=>[xn])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[qn])),_:1})])),_:1})])),_:1})]),Cn]),wn,t("span",Mn,[t("span",Bn,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[vn])),_:1}),t(uu,null,{default:l((()=>[t(cu,{fence:"true"},{default:l((()=>[Tn])),_:1}),t(ru,null,{default:l((()=>[Pn])),_:1}),t(cu,{fence:"true"},{default:l((()=>[Dn])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[Sn])),_:1})])),_:1})])),_:1})]),Vn]),En]),In,t("p",null,[t("span",Gn,[t("span",zn,[t("span",On,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[Rn])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Nn])),_:1}),t(ru,null,{default:l((()=>[Ln])),_:1}),t(cu,{separator:"true"},{default:l((()=>[jn])),_:1}),t(mu,null,{default:l((()=>[Fn])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Un])),_:1}),t(cu,null,{default:l((()=>[Hn])),_:1}),t(uu,null,{default:l((()=>[t(cu,{stretchy:"false"},{default:l((()=>[Jn])),_:1}),t(ru,null,{default:l((()=>[Kn])),_:1}),t(ru,null,{default:l((()=>[Qn])),_:1}),t(ru,null,{default:l((()=>[Wn])),_:1}),t(ru,null,{default:l((()=>[Xn])),_:1}),t(ru,null,{default:l((()=>[Yn])),_:1}),t(ru,null,{default:l((()=>[Zn])),_:1}),t(ru,null,{default:l((()=>[$n])),_:1}),t(ru,null,{default:l((()=>[na])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[aa])),_:1}),t(mu,null,{default:l((()=>[sa])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[ta])),_:1}),t(cu,{separator:"true"},{default:l((()=>[la])),_:1}),t(ru,null,{default:l((()=>[ea])),_:1}),t(ru,null,{default:l((()=>[pa])),_:1}),t(ru,null,{default:l((()=>[oa])),_:1}),t(cu,null,{default:l((()=>[ra])),_:1}),t(cu,null,{default:l((()=>[ca])),_:1}),t(ru,null,{default:l((()=>[ua])),_:1}),t(ru,null,{default:l((()=>[ma])),_:1}),t(ru,null,{default:l((()=>[ia])),_:1}),t(ru,null,{default:l((()=>[da])),_:1}),t(ru,null,{default:l((()=>[ga])),_:1}),t(ru,null,{default:l((()=>[ka])),_:1}),t(ru,null,{default:l((()=>[ha])),_:1}),t(ru,null,{default:l((()=>[fa])),_:1}),t(ru,null,{default:l((()=>[ba])),_:1}),t(ru,null,{default:l((()=>[_a])),_:1}),t(ru,null,{default:l((()=>[ya])),_:1}),t(ru,null,{default:l((()=>[Aa])),_:1}),t(ru,null,{default:l((()=>[xa])),_:1}),t(ru,null,{default:l((()=>[qa])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ca])),_:1}),t(mu,null,{default:l((()=>[wa])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ma])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ba])),_:1}),t(cu,{separator:"true"},{default:l((()=>[va])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ta])),_:1}),t(mu,null,{default:l((()=>[Pa])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Da])),_:1}),t(ru,null,{default:l((()=>[Sa])),_:1}),t(ru,null,{default:l((()=>[Va])),_:1}),t(ru,null,{default:l((()=>[Ea])),_:1}),t(cu,null,{default:l((()=>[Ia])),_:1}),t(ru,null,{default:l((()=>[Ga])),_:1}),t(ru,null,{default:l((()=>[za])),_:1}),t(ru,null,{default:l((()=>[Oa])),_:1}),t(ru,null,{default:l((()=>[Ra])),_:1}),t(ru,null,{default:l((()=>[Na])),_:1}),t(ru,null,{default:l((()=>[La])),_:1}),t(ru,null,{default:l((()=>[ja])),_:1}),t(ru,null,{default:l((()=>[Fa])),_:1}),t(ru,null,{default:l((()=>[Ua])),_:1}),t(ru,null,{default:l((()=>[Ha])),_:1}),t(ru,null,{default:l((()=>[Ja])),_:1}),t(ru,null,{default:l((()=>[Ka])),_:1}),t(ru,null,{default:l((()=>[Qa])),_:1}),t(ru,null,{default:l((()=>[Wa])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Xa])),_:1}),t(mu,null,{default:l((()=>[Ya])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Za])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[$a])),_:1}),t(cu,null,{default:l((()=>[ns])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[as])),_:1})])),_:1})])),_:1})]),ss])])]),ts,ls,t("p",null,[t("span",es,[t("span",ps,[t("span",os,[t(hu,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:l((()=>[t(ku,null,{default:l((()=>[t(uu,null,{default:l((()=>[t(ru,null,{default:l((()=>[rs])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[cs])),_:1}),t(ru,null,{default:l((()=>[us])),_:1}),t(ru,null,{default:l((()=>[ms])),_:1}),t(ru,null,{default:l((()=>[is])),_:1}),t(ru,null,{default:l((()=>[ds])),_:1}),t(ru,null,{default:l((()=>[gs])),_:1}),t(ru,null,{default:l((()=>[ks])),_:1}),t(ru,null,{default:l((()=>[hs])),_:1}),t(ru,null,{default:l((()=>[fs])),_:1}),t(ru,null,{default:l((()=>[bs])),_:1}),t(ru,null,{default:l((()=>[_s])),_:1}),t(cu,{separator:"true"},{default:l((()=>[ys])),_:1}),t(ru,null,{default:l((()=>[As])),_:1}),t(ru,null,{default:l((()=>[xs])),_:1}),t(ru,null,{default:l((()=>[qs])),_:1}),t(ru,null,{default:l((()=>[Cs])),_:1}),t(ru,null,{default:l((()=>[ws])),_:1}),t(ru,null,{default:l((()=>[Ms])),_:1}),t(ru,null,{default:l((()=>[Bs])),_:1}),t(ru,null,{default:l((()=>[vs])),_:1}),t(ru,null,{default:l((()=>[Ts])),_:1}),t(ru,null,{default:l((()=>[Ps])),_:1}),t(ru,null,{default:l((()=>[Ds])),_:1}),t(ru,null,{default:l((()=>[Ss])),_:1}),t(ru,null,{default:l((()=>[Vs])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Es])),_:1}),t(cu,null,{default:l((()=>[Is])),_:1}),t(uu,null,{default:l((()=>[t(cu,{stretchy:"false"},{default:l((()=>[Gs])),_:1}),t(mu,null,{default:l((()=>[zs])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Os])),_:1}),t(ru,null,{default:l((()=>[Rs])),_:1}),t(ru,null,{default:l((()=>[Ns])),_:1}),t(ru,null,{default:l((()=>[Ls])),_:1}),t(ru,null,{default:l((()=>[js])),_:1}),t(ru,null,{default:l((()=>[Fs])),_:1}),t(ru,null,{default:l((()=>[Us])),_:1}),t(ru,null,{default:l((()=>[Hs])),_:1}),t(ru,null,{default:l((()=>[Js])),_:1}),t(ru,null,{default:l((()=>[Ks])),_:1}),t(ru,null,{default:l((()=>[Qs])),_:1}),t(ru,null,{default:l((()=>[Ws])),_:1}),t(ru,null,{default:l((()=>[Xs])),_:1}),t(ru,null,{default:l((()=>[Ys])),_:1}),t(ru,null,{default:l((()=>[Zs])),_:1}),t(ru,null,{default:l((()=>[$s])),_:1}),t(cu,null,{default:l((()=>[nt])),_:1}),t(cu,null,{default:l((()=>[at])),_:1}),t(mu,null,{default:l((()=>[st])),_:1}),t(cu,{separator:"true"},{default:l((()=>[tt])),_:1}),t(ru,null,{default:l((()=>[lt])),_:1}),t(ru,null,{default:l((()=>[et])),_:1}),t(ru,null,{default:l((()=>[pt])),_:1}),t(ru,null,{default:l((()=>[ot])),_:1}),t(ru,null,{default:l((()=>[rt])),_:1}),t(ru,null,{default:l((()=>[ct])),_:1}),t(ru,null,{default:l((()=>[ut])),_:1}),t(ru,null,{default:l((()=>[mt])),_:1}),t(ru,null,{default:l((()=>[it])),_:1}),t(ru,null,{default:l((()=>[dt])),_:1}),t(cu,null,{default:l((()=>[gt])),_:1}),t(ru,null,{default:l((()=>[kt])),_:1}),t(ru,null,{default:l((()=>[ht])),_:1}),t(ru,null,{default:l((()=>[ft])),_:1}),t(ru,null,{default:l((()=>[bt])),_:1}),t(ru,null,{default:l((()=>[_t])),_:1}),t(ru,null,{default:l((()=>[yt])),_:1}),t(ru,null,{default:l((()=>[At])),_:1}),t(ru,null,{default:l((()=>[xt])),_:1}),t(ru,null,{default:l((()=>[qt])),_:1}),t(ru,null,{default:l((()=>[Ct])),_:1}),t(ru,null,{default:l((()=>[wt])),_:1}),t(ru,null,{default:l((()=>[Mt])),_:1}),t(ru,null,{default:l((()=>[Bt])),_:1}),t(ru,null,{default:l((()=>[vt])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Tt])),_:1}),t(mu,null,{default:l((()=>[Pt])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Dt])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[St])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Vt])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Et])),_:1}),t(ru,null,{default:l((()=>[It])),_:1}),t(ru,null,{default:l((()=>[Gt])),_:1}),t(ru,null,{default:l((()=>[zt])),_:1}),t(ru,null,{default:l((()=>[Ot])),_:1}),t(ru,null,{default:l((()=>[Rt])),_:1}),t(ru,null,{default:l((()=>[Nt])),_:1}),t(ru,null,{default:l((()=>[Lt])),_:1}),t(ru,null,{default:l((()=>[jt])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ft])),_:1}),t(mu,null,{default:l((()=>[Ut])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ht])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Jt])),_:1}),t(ru,null,{default:l((()=>[Kt])),_:1}),t(ru,null,{default:l((()=>[Qt])),_:1}),t(ru,null,{default:l((()=>[Wt])),_:1}),t(ru,null,{default:l((()=>[Xt])),_:1}),t(ru,null,{default:l((()=>[Yt])),_:1}),t(ru,null,{default:l((()=>[Zt])),_:1}),t(ru,null,{default:l((()=>[$t])),_:1}),t(ru,null,{default:l((()=>[nl])),_:1}),t(ru,null,{default:l((()=>[al])),_:1}),t(ru,null,{default:l((()=>[sl])),_:1}),t(ru,null,{default:l((()=>[tl])),_:1}),t(ru,null,{default:l((()=>[ll])),_:1}),t(ru,null,{default:l((()=>[el])),_:1}),t(ru,null,{default:l((()=>[pl])),_:1}),t(ru,null,{default:l((()=>[ol])),_:1}),t(cu,null,{default:l((()=>[rl])),_:1}),t(mu,null,{default:l((()=>[cl])),_:1}),t(cu,{separator:"true"},{default:l((()=>[ul])),_:1}),t(ru,null,{default:l((()=>[ml])),_:1}),t(ru,null,{default:l((()=>[il])),_:1}),t(ru,null,{default:l((()=>[dl])),_:1}),t(ru,null,{default:l((()=>[gl])),_:1}),t(ru,null,{default:l((()=>[kl])),_:1}),t(ru,null,{default:l((()=>[hl])),_:1}),t(ru,null,{default:l((()=>[fl])),_:1}),t(ru,null,{default:l((()=>[bl])),_:1}),t(ru,null,{default:l((()=>[_l])),_:1}),t(ru,null,{default:l((()=>[yl])),_:1}),t(cu,null,{default:l((()=>[Al])),_:1}),t(cu,null,{default:l((()=>[xl])),_:1}),t(ru,null,{default:l((()=>[ql])),_:1}),t(ru,null,{default:l((()=>[Cl])),_:1}),t(ru,null,{default:l((()=>[wl])),_:1}),t(ru,null,{default:l((()=>[Ml])),_:1}),t(ru,null,{default:l((()=>[Bl])),_:1}),t(ru,null,{default:l((()=>[vl])),_:1}),t(ru,null,{default:l((()=>[Tl])),_:1}),t(ru,null,{default:l((()=>[Pl])),_:1}),t(ru,null,{default:l((()=>[Dl])),_:1}),t(ru,null,{default:l((()=>[Sl])),_:1}),t(ru,null,{default:l((()=>[Vl])),_:1}),t(ru,null,{default:l((()=>[El])),_:1}),t(ru,null,{default:l((()=>[Il])),_:1}),t(ru,null,{default:l((()=>[Gl])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[zl])),_:1}),t(mu,null,{default:l((()=>[Ol])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Rl])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Nl])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Ll])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[jl])),_:1}),t(ru,{mathvariant:"normal"},{default:l((()=>[Fl])),_:1}),t(ru,null,{default:l((()=>[Ul])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Hl])),_:1}),t(ru,null,{default:l((()=>[Jl])),_:1}),t(ru,null,{default:l((()=>[Kl])),_:1}),t(ru,null,{default:l((()=>[Ql])),_:1}),t(ru,null,{default:l((()=>[Wl])),_:1}),t(ru,null,{default:l((()=>[Xl])),_:1}),t(ru,null,{default:l((()=>[Yl])),_:1}),t(ru,null,{default:l((()=>[Zl])),_:1}),t(ru,null,{default:l((()=>[$l])),_:1}),t(ru,null,{default:l((()=>[ne])),_:1}),t(ru,null,{default:l((()=>[ae])),_:1}),t(cu,{separator:"true"},{default:l((()=>[se])),_:1}),t(ru,null,{default:l((()=>[te])),_:1}),t(ru,null,{default:l((()=>[le])),_:1}),t(ru,null,{default:l((()=>[ee])),_:1}),t(ru,null,{default:l((()=>[pe])),_:1}),t(ru,null,{default:l((()=>[oe])),_:1}),t(ru,null,{default:l((()=>[re])),_:1}),t(ru,null,{default:l((()=>[ce])),_:1}),t(ru,null,{default:l((()=>[ue])),_:1}),t(ru,null,{default:l((()=>[me])),_:1}),t(ru,null,{default:l((()=>[ie])),_:1}),t(ru,null,{default:l((()=>[de])),_:1}),t(ru,null,{default:l((()=>[ge])),_:1}),t(ru,null,{default:l((()=>[ke])),_:1}),t(cu,null,{default:l((()=>[he])),_:1}),t(mu,null,{default:l((()=>[fe])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[be])),_:1}),t(ru,{mathvariant:"normal"},{default:l((()=>[_e])),_:1}),t(cu,{separator:"true"},{default:l((()=>[ye])),_:1}),t(ru,null,{default:l((()=>[Ae])),_:1}),t(ru,null,{default:l((()=>[xe])),_:1}),t(ru,null,{default:l((()=>[qe])),_:1}),t(ru,null,{default:l((()=>[Ce])),_:1}),t(ru,null,{default:l((()=>[we])),_:1}),t(ru,null,{default:l((()=>[Me])),_:1}),t(ru,null,{default:l((()=>[Be])),_:1}),t(ru,null,{default:l((()=>[ve])),_:1}),t(ru,null,{default:l((()=>[Te])),_:1}),t(ru,null,{default:l((()=>[Pe])),_:1}),t(ru,null,{default:l((()=>[De])),_:1}),t(ru,null,{default:l((()=>[Se])),_:1}),t(ru,null,{default:l((()=>[Ve])),_:1}),t(ru,null,{default:l((()=>[Ee])),_:1}),t(ru,null,{default:l((()=>[Ie])),_:1}),t(cu,null,{default:l((()=>[Ge])),_:1}),t(mu,null,{default:l((()=>[ze])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Oe])),_:1}),t(ru,null,{default:l((()=>[Re])),_:1}),t(ru,null,{default:l((()=>[Ne])),_:1}),t(ru,null,{default:l((()=>[Le])),_:1}),t(ru,null,{default:l((()=>[je])),_:1}),t(ru,null,{default:l((()=>[Fe])),_:1}),t(ru,null,{default:l((()=>[Ue])),_:1}),t(ru,null,{default:l((()=>[He])),_:1}),t(ru,null,{default:l((()=>[Je])),_:1}),t(ru,null,{default:l((()=>[Ke])),_:1}),t(ru,null,{default:l((()=>[Qe])),_:1}),t(cu,null,{default:l((()=>[We])),_:1}),t(ru,null,{default:l((()=>[Xe])),_:1}),t(ru,null,{default:l((()=>[Ye])),_:1}),t(ru,null,{default:l((()=>[Ze])),_:1}),t(ru,null,{default:l((()=>[$e])),_:1}),t(ru,null,{default:l((()=>[np])),_:1}),t(ru,null,{default:l((()=>[ap])),_:1}),t(ru,null,{default:l((()=>[sp])),_:1}),t(ru,null,{default:l((()=>[tp])),_:1}),t(ru,null,{default:l((()=>[lp])),_:1}),t(ru,null,{default:l((()=>[ep])),_:1}),t(ru,null,{default:l((()=>[pp])),_:1}),t(ru,null,{default:l((()=>[op])),_:1}),t(ru,null,{default:l((()=>[rp])),_:1}),t(ru,null,{default:l((()=>[cp])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[up])),_:1}),t(ru,null,{default:l((()=>[mp])),_:1}),t(ru,null,{default:l((()=>[ip])),_:1}),t(ru,null,{default:l((()=>[dp])),_:1}),t(ru,null,{default:l((()=>[gp])),_:1}),t(ru,null,{default:l((()=>[kp])),_:1}),t(ru,null,{default:l((()=>[hp])),_:1}),t(ru,null,{default:l((()=>[fp])),_:1}),t(ru,null,{default:l((()=>[bp])),_:1}),t(ru,null,{default:l((()=>[_p])),_:1}),t(ru,null,{default:l((()=>[yp])),_:1}),t(ru,null,{default:l((()=>[Ap])),_:1}),t(ru,null,{default:l((()=>[xp])),_:1}),t(ru,null,{default:l((()=>[qp])),_:1}),t(cu,null,{default:l((()=>[Cp])),_:1}),t(mu,null,{default:l((()=>[wp])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Mp])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Bp])),_:1}),t(cu,{separator:"true"},{default:l((()=>[vp])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Tp])),_:1}),t(ru,{mathvariant:"normal"},{default:l((()=>[Pp])),_:1}),t(ru,null,{default:l((()=>[Dp])),_:1}),t(ru,null,{default:l((()=>[Sp])),_:1}),t(ru,null,{default:l((()=>[Vp])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ep])),_:1}),t(ru,null,{default:l((()=>[Ip])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Gp])),_:1}),t(ru,null,{default:l((()=>[zp])),_:1}),t(ru,null,{default:l((()=>[Op])),_:1}),t(ru,null,{default:l((()=>[Rp])),_:1}),t(ru,null,{default:l((()=>[Np])),_:1}),t(ru,null,{default:l((()=>[Lp])),_:1}),t(ru,null,{default:l((()=>[jp])),_:1}),t(ru,null,{default:l((()=>[Fp])),_:1}),t(ru,null,{default:l((()=>[Up])),_:1}),t(ru,null,{default:l((()=>[Hp])),_:1}),t(ru,null,{default:l((()=>[Jp])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Kp])),_:1}),t(ru,null,{default:l((()=>[Qp])),_:1}),t(ru,null,{default:l((()=>[Wp])),_:1}),t(ru,null,{default:l((()=>[Xp])),_:1}),t(ru,null,{default:l((()=>[Yp])),_:1}),t(ru,null,{default:l((()=>[Zp])),_:1}),t(ru,null,{default:l((()=>[$p])),_:1}),t(ru,null,{default:l((()=>[no])),_:1}),t(ru,null,{default:l((()=>[ao])),_:1}),t(ru,null,{default:l((()=>[so])),_:1}),t(ru,null,{default:l((()=>[to])),_:1}),t(ru,null,{default:l((()=>[lo])),_:1}),t(ru,null,{default:l((()=>[eo])),_:1}),t(ru,null,{default:l((()=>[po])),_:1}),t(cu,null,{default:l((()=>[oo])),_:1}),t(mu,null,{default:l((()=>[ro])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[co])),_:1}),t(cu,{separator:"true"},{default:l((()=>[uo])),_:1}),t(ru,null,{default:l((()=>[mo])),_:1}),t(ru,null,{default:l((()=>[io])),_:1}),t(ru,null,{default:l((()=>[go])),_:1}),t(ru,null,{default:l((()=>[ko])),_:1}),t(ru,null,{default:l((()=>[ho])),_:1}),t(ru,null,{default:l((()=>[fo])),_:1}),t(ru,null,{default:l((()=>[bo])),_:1}),t(ru,null,{default:l((()=>[_o])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[yo])),_:1}),t(ru,null,{default:l((()=>[Ao])),_:1}),t(ru,null,{default:l((()=>[xo])),_:1}),t(ru,null,{default:l((()=>[qo])),_:1}),t(ru,null,{default:l((()=>[Co])),_:1}),t(ru,null,{default:l((()=>[wo])),_:1}),t(ru,null,{default:l((()=>[Mo])),_:1}),t(ru,null,{default:l((()=>[Bo])),_:1}),t(ru,null,{default:l((()=>[vo])),_:1}),t(ru,null,{default:l((()=>[To])),_:1}),t(ru,null,{default:l((()=>[Po])),_:1}),t(ru,null,{default:l((()=>[Do])),_:1}),t(ru,null,{default:l((()=>[So])),_:1}),t(ru,null,{default:l((()=>[Vo])),_:1}),t(cu,null,{default:l((()=>[Eo])),_:1}),t(mu,null,{default:l((()=>[Io])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Go])),_:1}),t(cu,null,{default:l((()=>[zo])),_:1}),t(ru,null,{default:l((()=>[Oo])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ro])),_:1}),t(ru,null,{default:l((()=>[No])),_:1}),t(ru,null,{default:l((()=>[Lo])),_:1}),t(ru,null,{default:l((()=>[jo])),_:1}),t(ru,null,{default:l((()=>[Fo])),_:1}),t(ru,null,{default:l((()=>[Uo])),_:1}),t(ru,null,{default:l((()=>[Ho])),_:1}),t(ru,null,{default:l((()=>[Jo])),_:1}),t(ru,null,{default:l((()=>[Ko])),_:1}),t(ru,null,{default:l((()=>[Qo])),_:1}),t(ru,null,{default:l((()=>[Wo])),_:1}),t(cu,null,{default:l((()=>[Xo])),_:1}),t(ru,null,{default:l((()=>[Yo])),_:1}),t(ru,null,{default:l((()=>[Zo])),_:1}),t(ru,null,{default:l((()=>[$o])),_:1}),t(ru,null,{default:l((()=>[nr])),_:1}),t(ru,null,{default:l((()=>[ar])),_:1}),t(ru,null,{default:l((()=>[sr])),_:1}),t(ru,null,{default:l((()=>[tr])),_:1}),t(ru,null,{default:l((()=>[lr])),_:1}),t(ru,null,{default:l((()=>[er])),_:1}),t(ru,null,{default:l((()=>[pr])),_:1}),t(ru,null,{default:l((()=>[or])),_:1}),t(ru,null,{default:l((()=>[rr])),_:1}),t(ru,null,{default:l((()=>[cr])),_:1}),t(ru,null,{default:l((()=>[ur])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[mr])),_:1}),t(ru,null,{default:l((()=>[ir])),_:1}),t(ru,null,{default:l((()=>[dr])),_:1}),t(ru,null,{default:l((()=>[gr])),_:1}),t(ru,null,{default:l((()=>[kr])),_:1}),t(ru,null,{default:l((()=>[hr])),_:1}),t(ru,null,{default:l((()=>[fr])),_:1}),t(ru,null,{default:l((()=>[br])),_:1}),t(ru,null,{default:l((()=>[_r])),_:1}),t(ru,null,{default:l((()=>[yr])),_:1}),t(ru,null,{default:l((()=>[Ar])),_:1}),t(ru,null,{default:l((()=>[xr])),_:1}),t(ru,null,{default:l((()=>[qr])),_:1}),t(ru,null,{default:l((()=>[Cr])),_:1}),t(cu,null,{default:l((()=>[wr])),_:1}),t(mu,null,{default:l((()=>[Mr])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Br])),_:1}),t(cu,{separator:"true"},{default:l((()=>[vr])),_:1}),t(ru,null,{default:l((()=>[Tr])),_:1}),t(ru,null,{default:l((()=>[Pr])),_:1}),t(ru,null,{default:l((()=>[Dr])),_:1}),t(ru,null,{default:l((()=>[Sr])),_:1}),t(ru,null,{default:l((()=>[Vr])),_:1}),t(ru,null,{default:l((()=>[Er])),_:1}),t(ru,null,{default:l((()=>[Ir])),_:1}),t(ru,null,{default:l((()=>[Gr])),_:1}),t(ru,null,{default:l((()=>[zr])),_:1}),t(ru,null,{default:l((()=>[Or])),_:1}),t(ru,null,{default:l((()=>[Rr])),_:1}),t(ru,null,{default:l((()=>[Nr])),_:1}),t(ru,null,{default:l((()=>[Lr])),_:1}),t(cu,null,{default:l((()=>[jr])),_:1}),t(mu,null,{default:l((()=>[Fr])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Ur])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Hr])),_:1}),t(ru,{mathvariant:"normal"},{default:l((()=>[Jr])),_:1}),t(cu,{separator:"true"},{default:l((()=>[Kr])),_:1}),t(ru,null,{default:l((()=>[Qr])),_:1}),t(ru,null,{default:l((()=>[Wr])),_:1}),t(ru,null,{default:l((()=>[Xr])),_:1}),t(ru,null,{default:l((()=>[Yr])),_:1}),t(ru,null,{default:l((()=>[Zr])),_:1}),t(ru,null,{default:l((()=>[$r])),_:1}),t(ru,null,{default:l((()=>[nc])),_:1}),t(ru,null,{default:l((()=>[ac])),_:1}),t(ru,null,{default:l((()=>[sc])),_:1}),t(ru,null,{default:l((()=>[tc])),_:1}),t(ru,null,{default:l((()=>[lc])),_:1}),t(ru,null,{default:l((()=>[ec])),_:1}),t(ru,null,{default:l((()=>[pc])),_:1}),t(ru,null,{default:l((()=>[oc])),_:1}),t(ru,null,{default:l((()=>[rc])),_:1}),t(cu,null,{default:l((()=>[cc])),_:1}),t(mu,null,{default:l((()=>[uc])),_:1}),t(cu,{separator:"true"},{default:l((()=>[mc])),_:1}),t(ru,null,{default:l((()=>[ic])),_:1}),t(ru,null,{default:l((()=>[dc])),_:1}),t(ru,null,{default:l((()=>[gc])),_:1}),t(ru,null,{default:l((()=>[kc])),_:1}),t(ru,null,{default:l((()=>[hc])),_:1}),t(ru,null,{default:l((()=>[fc])),_:1}),t(ru,null,{default:l((()=>[bc])),_:1}),t(ru,null,{default:l((()=>[_c])),_:1}),t(ru,null,{default:l((()=>[yc])),_:1}),t(ru,null,{default:l((()=>[Ac])),_:1}),t(cu,null,{default:l((()=>[xc])),_:1}),t(cu,null,{default:l((()=>[qc])),_:1}),t(ru,null,{default:l((()=>[Cc])),_:1}),t(ru,null,{default:l((()=>[wc])),_:1}),t(ru,null,{default:l((()=>[Mc])),_:1}),t(ru,null,{default:l((()=>[Bc])),_:1}),t(ru,null,{default:l((()=>[vc])),_:1}),t(ru,null,{default:l((()=>[Tc])),_:1}),t(ru,null,{default:l((()=>[Pc])),_:1}),t(ru,null,{default:l((()=>[Dc])),_:1}),t(ru,null,{default:l((()=>[Sc])),_:1}),t(ru,null,{default:l((()=>[Vc])),_:1}),t(ru,null,{default:l((()=>[Ec])),_:1}),t(ru,null,{default:l((()=>[Ic])),_:1}),t(ru,null,{default:l((()=>[Gc])),_:1}),t(ru,null,{default:l((()=>[zc])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[Oc])),_:1}),t(ru,null,{default:l((()=>[Rc])),_:1}),t(ru,null,{default:l((()=>[Nc])),_:1}),t(ru,null,{default:l((()=>[Lc])),_:1}),t(ru,null,{default:l((()=>[jc])),_:1}),t(ru,null,{default:l((()=>[Fc])),_:1}),t(ru,null,{default:l((()=>[Uc])),_:1}),t(ru,null,{default:l((()=>[Hc])),_:1}),t(ru,null,{default:l((()=>[Jc])),_:1}),t(ru,null,{default:l((()=>[Kc])),_:1}),t(ru,null,{default:l((()=>[Qc])),_:1}),t(ru,null,{default:l((()=>[Wc])),_:1}),t(ru,null,{default:l((()=>[Xc])),_:1}),t(ru,null,{default:l((()=>[Yc])),_:1}),t(cu,null,{default:l((()=>[Zc])),_:1}),t(mu,null,{default:l((()=>[$c])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[nu])),_:1}),t(cu,{stretchy:"false"},{default:l((()=>[au])),_:1}),t(cu,null,{default:l((()=>[su])),_:1})])),_:1})])),_:1}),t(gu,{encoding:"application/x-tex"},{default:l((()=>[tu])),_:1})])),_:1})])),_:1})]),lu])])]),eu])};export default r;export{o as __pageData};
