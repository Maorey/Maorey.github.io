import{o as t,e,G as a}from"./framework.c00dda38.js";const r='{"title":"动态规划","description":"","frontmatter":{"index":3},"headers":[{"level":2,"title":"这是啥","slug":"这是啥"},{"level":2,"title":"能干啥","slug":"能干啥"},{"level":2,"title":"怎么干","slug":"怎么干"},{"level":3,"title":"基本思想","slug":"基本思想"}],"relativePath":"blog/dynamicProgramming.md","lastUpdated":1607193315511.7546}';var n={};const o=a('<h1 id="动态规划"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h1><h2 id="这是啥"><a class="header-anchor" href="#这是啥" aria-hidden="true">#</a> 这是啥</h2><p>参考百度百科:</p><p><strong>动态规划</strong>(Dynamic Programming, DP)是:</p><ul><li><strong>数学</strong>的二级学科<strong>运筹学</strong>下的三级学科</li><li>求解<strong>多阶段决策过程最优化</strong>的过程, 是一种数学方法, 并没有统一的处理方法 (但有套路)</li><li>每个阶段的决策依赖当前状态, 而又会引起状态转移, 故称&quot;动态&quot;</li><li>兄弟姐妹有 <em>线型规划</em> 、<em>非线型规划</em>、<em>组合最优化</em>、<em>图论</em>等</li></ul><h2 id="能干啥"><a class="header-anchor" href="#能干啥" aria-hidden="true">#</a> 能干啥</h2><p><s>运筹帷幄</s></p><p>应用广泛, 如经济、工业、军事等领域, 并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果</p><p>这里只讨论编程领域的应用</p><h2 id="怎么干"><a class="header-anchor" href="#怎么干" aria-hidden="true">#</a> 怎么干</h2><h3 id="基本思想"><a class="header-anchor" href="#基本思想" aria-hidden="true">#</a> 基本思想</h3><p>与分治法类似 (如快速/归并排序算法), 将待求解问题分为若干子问题, 从子问题的解得到原问题的解, 这是自顶向下递归求解, 图示如下:</p><div class="echarts loading" style="width:500px;height:400px;">{ width: 500, height: 400, xAxis: { type: &#39;category&#39;, data: [&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;] }, yAxis: { type: &#39;value&#39; }, series: [ { data: [820, 932, 901, 934, 1290, 1330, 1320], type: &#39;line&#39; } ] }<div class="line-numbers-wrapper"></div></div><pre class="flowchart loading">st=&gt;start: Start:&gt;http://www.google.com[blank]\ne=&gt;end:&gt;http://www.google.com\nop1=&gt;operation: My Operation\nsub1=&gt;subroutine: My Subroutine\ncond=&gt;condition: Yes\nor No?:&gt;http://www.google.com\nio=&gt;inputoutput: catch something...\npara=&gt;parallel: parallel tasks\n\nst-&gt;op1-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;para\npara(path1, bottom)-&gt;sub1(right)-&gt;op1\npara(path2, top)-&gt;op1</pre><pre class="mermaid loading">graph TD\nA[方形] --&gt; B(圆角)\n    B --&gt; C{条件a}\n    C --&gt; |a=1| D[结果1]\n    C --&gt; |a=2| E[结果2]\n    F[竖向流程图]</pre>',15);n.render=function(a,r,n,i,l,s){return t(),e("div",null,[o])};export default n;export{r as __pageData};
