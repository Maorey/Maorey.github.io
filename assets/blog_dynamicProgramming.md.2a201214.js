import{o as s,c as n,b as a,a as l,d as t}from"./app.3eba8289.js";const e='{"title":"动态规划","description":"","frontmatter":{"title":"动态规划","index":1},"headers":[{"level":2,"title":"这是啥","slug":"这是啥"},{"level":2,"title":"能干啥","slug":"能干啥"},{"level":2,"title":"怎么干","slug":"怎么干"},{"level":3,"title":"基础概念","slug":"基础概念"},{"level":2,"title":"举例子","slug":"举例子"},{"level":3,"title":"普通递归算法 👎","slug":"普通递归算法"},{"level":3,"title":"带备忘录递归算法 👍","slug":"带备忘录递归算法"},{"level":3,"title":"动态规划算法 😍🤙","slug":"动态规划算法"},{"level":3,"title":"对比","slug":"对比"},{"level":2,"title":"讲套路","slug":"讲套路"},{"level":2,"title":"做练习","slug":"做练习"},{"level":3,"title":"问题分析","slug":"问题分析"},{"level":3,"title":"带备忘录递归算法 👍","slug":"带备忘录递归算法-2"},{"level":3,"title":"动态规划算法 😍🤙","slug":"动态规划算法-2"},{"level":2,"title":"留作业","slug":"留作业"},{"level":2,"title":"参考文献","slug":"参考文献"}],"relativePath":"blog/dynamicProgramming.md","lastUpdated":1614453405372}',p={},o=a('<h2 id="这是啥"><a class="header-anchor" href="#这是啥" aria-hidden="true">#</a> 这是啥</h2><p>参考百度百科 😉 :</p><p><strong>动态规划</strong>(Dynamic Programming, DP)是:</p><ul><li><strong>数学</strong>的二级学科<strong>运筹学</strong>下的三级学科</li><li>求解<strong>多阶段决策过程最优化</strong>的过程, 是一种数学方法论, 没有公式可套 (但有套路)</li><li>每个阶段的决策依赖当前状态, 而又会引起状态转移, 故称&quot;动态&quot;</li><li>兄弟姐妹有 <em>线型规划</em> 、<em>非线型规划</em>、<em>组合最优化</em>、<em>图论</em>等</li></ul><h2 id="能干啥"><a class="header-anchor" href="#能干啥" aria-hidden="true">#</a> 能干啥</h2><p><s>主持大菊, 运筹帷幄</s></p><p>应用广泛, 如经济、工业、军事等领域, 并在背包问题、生产经营问题、资金管理问题、资源分配问题、最短路径问题和复杂系统可靠性问题等中取得了显著的效果...</p><div class="tip custom-block"><p class="custom-block-title">画重点</p><p>这里只讨论编程领域的应用</p></div><h2 id="怎么干"><a class="header-anchor" href="#怎么干" aria-hidden="true">#</a> 怎么干</h2><h3 id="基础概念"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h3><p><em>(做出决策 = 计算出结果)</em></p><ul><li>状态: 当前阶段上下文</li><li>边界: 无法继续优化的阶段, 即决策确定 <em>(无边界 = 无解/无数解 = 死循环)</em></li><li>无后效性: 当前阶段做出决策后, 后续决策 不受 之前阶段 的影响, 即状态单向转移, 后续决策都是基于前面有限的阶段</li><li>状态转移方程: 不同阶段间上下文关系</li><li>重叠子结构: 不同阶段之间要解决的若干问题有重复</li><li>备忘录(DP Table): 在寻找最优子结构, 化简状态转移方程的过程中用于记录各阶段状态或决策的额外数据, 应该尽量去掉</li><li>最优子结构: 对阶段的划分和决策的过程最优化, 最优子结构一定也是由最优子结构组成</li></ul><h2 id="举例子"><a class="header-anchor" href="#举例子" aria-hidden="true">#</a> 举例子</h2><p>与分治法类似 (如快速/归并排序算法), 都是将待求解问题分为若干子问题, 从子问题的解得到原问题的解, 大事化小, 小事化了. 不同的是分治法一般是<strong>自顶向下</strong>递归求解, 而动态规划优化后一般是<strong>自底向上</strong>求解</p><p>以求解 斐波那契数列 第 <code>n</code> 位的值为例</p><p>问题分析🤔: 斐波那契数列 前两位为 <code>1</code>， 之后的每一位的值等于它前面两位的和</p><p>💡✨ 暴力求解无脑走一波(自顶向下)</p><h3 id="普通递归算法"><a class="header-anchor" href="#普通递归算法" aria-hidden="true">#</a> 普通递归算法 👎</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>求解过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;) --&gt; B111\n        A111 --&gt; A1112(&quot;f(2)&quot;) --&gt; B111\n      A11 --&gt; A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;) --&gt; B112\n        A112 --&gt; A1122(&quot;f(2)&quot;) --&gt; B112\n        end\n    A1 --&gt; A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;) --&gt; B121\n        A121 --&gt; A1212(&quot;f(2)&quot;) --&gt; B121\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;) --&gt; B122\n        A122 --&gt; A1222(&quot;f(2)&quot;) --&gt; B122\n      end\n  A --&gt; A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;) --&gt; B211\n        A211 --&gt; A2112(&quot;f(2)&quot;) --&gt; B211\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;) --&gt; B212\n        A212 --&gt; A2122(&quot;f(2)&quot;) --&gt; B212\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;) --&gt; B221\n        A221 --&gt; A2212(&quot;f(2)&quot;) --&gt; B221\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;) --&gt; B222\n        A222 --&gt; A2222(&quot;f(2)&quot;) --&gt; B222\n  end\n\n  B1(&quot;f(n - 1)&quot;) --&gt; B(&quot;f(n)&quot;)\n    B11(&quot;f(n - 2)&quot;) --&gt; B1\n      B111(...) --&gt; B11\n      B112(...) --&gt; B11\n    B12(&quot;f(n - 3)&quot;) --&gt; B1\n      subgraph b\n      B121(...) --&gt; B12\n      B122(...) --&gt; B12\n      end\n  B2(&quot;f(n - 2)&quot;) --&gt; B\n    subgraph a\n    B21(&quot;f(n - 3)&quot;) --&gt; B2\n      B211(...) --&gt; B21\n      B212(...) --&gt; B21\n    B22(&quot;f(n - 4)&quot;) --&gt; B2\n      B221(...) --&gt; B22\n      B222(...) --&gt; B22\n    end</pre><p>如图所示, 圈起来的都是重复子问题, 可以通过使用备忘录空间换时间的方式来实现剪枝</p><h3 id="带备忘录递归算法"><a class="header-anchor" href="#带备忘录递归算法" aria-hidden="true">#</a> 带备忘录递归算法 👍</h3><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="动态规划算法"><a class="header-anchor" href="#动态规划算法" aria-hidden="true">#</a> 动态规划算法 😍🤙</h3><p>我们应用动态规划的概念来审视上面的解法</p><ul><li>状态: <code>n</code>的值</li><li>重叠子结构: 上图框起来的部分, 比如 <code>f(n - 2)</code> 计算了两次, <code>f(n - 3)</code> 计算了三次...</li><li>备忘录: 使用一个简单对象(这里也可以是数组)缓存每个阶段计算结果</li><li>最优子结构: 对于 <code>n &gt; 2</code> 存在最优子结构, 如下图:</li></ul><pre class="mermaid loading">flowchart TB\n  A(&quot;f(n)&quot;) --&gt; A1(&quot;f(n - 1)&quot;)\n    A1 --&gt; A11(&quot;f(n - 2)&quot;)\n      A11 --&gt; A111(...)\n        A111 --&gt; A1111(&quot;f(1)&quot;)\n        A111 --&gt; A1112(&quot;f(2)&quot;)\n      A11 x-.-x A112(...)\n        subgraph c\n        A112 --&gt; A1121(&quot;f(1)&quot;)\n        A112 --&gt; A1122(&quot;f(2)&quot;)\n        end\n    A1 x-.-x A12(&quot;f(n - 3)&quot;)\n      subgraph b\n      A12 --&gt; A121(...)\n        A121 --&gt; A1211(&quot;f(1)&quot;)\n        A121 --&gt; A1212(&quot;f(2)&quot;)\n      A12 --&gt; A122(...)\n        A122 --&gt; A1221(&quot;f(1)&quot;)\n        A122 --&gt; A1222(&quot;f(2)&quot;)\n      end\n  A x-.-x A2(&quot;f(n - 2)&quot;)\n  subgraph a\n    A2 --&gt; A21(&quot;f(n - 3)&quot;)\n      A21 --&gt; A211(...)\n        A211 --&gt; A2111(&quot;f(1)&quot;)\n        A211 --&gt; A2112(&quot;f(2)&quot;)\n      A21 --&gt; A212(...)\n        A212 --&gt; A2121(&quot;f(1)&quot;)\n        A212 --&gt; A2122(&quot;f(2)&quot;)\n    A2 --&gt; A22(&quot;f(n - 4)&quot;)\n      A22 --&gt; A221(...)\n        A221 --&gt; A2211(&quot;f(1)&quot;)\n        A221 --&gt; A2212(&quot;f(2)&quot;)\n      A22 --&gt; A222(...)\n        A222 --&gt; A2221(&quot;f(1)&quot;)\n        A222 --&gt; A2222(&quot;f(2)&quot;)\n  end\nstyle a fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle b fill:#ddd,stroke:#ccc,stroke-dasharray:5 5\nstyle c fill:#ddd,stroke:#ccc,stroke-dasharray:5 5</pre>',28),r=l("ul",null,[l("li",null,[t("边界: "),l("code",null,"n = 1 或 2")]),l("li",null,[t("无后效性: "),l("code",null,"n > 2"),t(" 的每个阶段的结果"),l("strong",null,"完全取决于"),t("它前面两个阶段的结果")]),l("li",null,[t("状态转移方程: 易得(已最简): "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"n"),l("mo",{stretchy:"false"},")"),l("mo",null,"="),l("mrow",null,[l("mo",{fence:"true"},"{"),l("mtable",{rowspacing:"0.3599999999999999em",columnalign:"left left",columnspacing:"1em"},[l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mn",null,"1")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"n"),l("mo",null,"="),l("mn",null,"1"),l("mo",{separator:"true"},","),l("mi",null,"n"),l("mo",null,"="),l("mn",null,"2")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"n"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},")"),l("mo",null,"+"),l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"n"),l("mo",null,"−"),l("mn",null,"2"),l("mo",{stretchy:"false"},")")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"n"),l("mo",null,">"),l("mn",null,"2")])])])])])])]),l("annotation",{encoding:"application/x-tex"},"f(n) = \\begin{cases} 1 & n = 1, n = 2 \\\\ f(n - 1) + f(n - 2) & n > 2 \\end{cases}")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"3.0000299999999998em","vertical-align":"-1.25003em"}}),l("span",{class:"minner"},[l("span",{class:"mopen delimcenter",style:{top:"0em"}},[l("span",{class:"delimsizing size4"},"{")]),l("span",{class:"mord"},[l("span",{class:"mtable"},[l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.69em"}},[l("span",{style:{top:"-3.69em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"1")])]),l("span",{style:{top:"-2.25em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"2"),l("span",{class:"mclose"},")")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.19em"}},[l("span")])])])]),l("span",{class:"arraycolsep",style:{width:"1em"}}),l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.69em"}},[l("span",{style:{top:"-3.69em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"2")])]),l("span",{style:{top:"-2.25em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"2")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.19em"}},[l("span")])])])])])]),l("span",{class:"mclose nulldelimiter"})])])])])])],-1),m=a('<p>所以这么一波分析之后, 找到最优的求解过程应该如下</p><pre class="mermaid loading">flowchart TB\n  A1(&quot;f(1)&quot;) --&gt; A3(&quot;f(3)&quot;)\n  A2(&quot;f(2)&quot;) --&gt; A3\n  A2 --&gt; A4(&quot;f(4)&quot;)\n  A3 --&gt; A4\n  A3 --&gt; Ad1(...)\n  A4 --&gt; Ad1\n  A4 --&gt; Ad2(...)\n  Ad1 --&gt; Ad2\n  Ad1 --&gt; An2(&quot;f(n - 2)&quot;)\n  Ad2 --&gt; An2\n  Ad2 --&gt; An1(&quot;f(n - 1)&quot;)\n  An2 --&gt; An1\n  An2 --&gt; An(&quot;f(n)&quot;)\n  An1 --&gt; An</pre><p>顺着备忘录的思路根据<strong>状态转移方程</strong>改为<strong>自底向上</strong>求解的形式:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    DPTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> DPTable<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>n<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>很明显备忘录是可以优化掉的, 易得:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">let</span> next\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    next <span class="token operator">=</span> prev <span class="token operator">+</span> curr\n    prev <span class="token operator">=</span> curr\n    curr <span class="token operator">=</span> next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> curr\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="对比"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><pre class="echarts loading" style="height:250px;">(function() {\nfunction O(v){return v==4 ? &#39;O(2&lt;sup&gt;n&lt;/sup&gt;)&#39; : v==2 ? &#39;O(nlogn)&#39; : v==1 ? &#39;O(n)&#39; : v==0 ? &#39;O(0)&#39; :&#39;&#39;}\nfunction A(v){return v==4 ? &#39;O(2^n)&#39; : O(v)}\nreturn {\n  legend: {},\n  tooltip: {\n    trigger: &#39;axis&#39;,\n    confine: true,\n    formatter: function(p,t,c) {\n      var d=p[0],e=p[1],f=&#39;&lt;b style=&quot;margin-left:10px&quot;&gt;&#39;,g=&#39;&lt;/b&gt;&#39;,\n        h=&#39;&lt;i style=&quot;display:inline-block;width:12px;height:12px;margin-right:5px;vertical-align:middle;border-radius:100%;background:&#39;,i=&#39;&quot;&gt;&lt;/i&gt;&#39;\n      return c(t, &#39;&lt;h4&gt;&#39;+ d.name +&#39;&lt;/h4&gt;&lt;div style=&quot;text-align:left&quot;&gt;&#39;+\n        h+ d.color +i+ d.seriesName +f+ O(d.value) +g+ &#39;&lt;br/&gt;&#39;+\n        h+ e.color +i+ e.seriesName +f+ O(e.value) +g+ &#39;&lt;/div&gt;&#39;)\n    }\n  },\n  xAxis: [{\n    type: &#39;category&#39;,\n    data: [&#39;普通递归&#39;, &#39;带备忘录递归&#39;, &#39;带备忘录动态规划&#39;, &#39;动态规划&#39;],\n    axisPointer: { type: &#39;shadow&#39; }\n  }],\n  yAxis: [\n    { type: &#39;value&#39;, name: &#39;时间复杂度&#39;, axisLabel: { formatter: A } },\n    { type: &#39;value&#39;, name: &#39;空间复杂度&#39;, axisLabel: { formatter: A } }\n  ],\n  series: [\n    { name: &#39;时间复杂度&#39;, type: &#39;bar&#39;, data: [4, 2, 1, 1] },\n    { name: &#39;空间复杂度&#39;, type: &#39;bar&#39;, yAxisIndex: 1, data: [4, 2, 2, 1] }\n  ]\n}\n})()</pre><h2 id="讲套路"><a class="header-anchor" href="#讲套路" aria-hidden="true">#</a> 讲套路</h2><p>上面的示例只是体现了动态规划的一般过程, 动态规划是一种求解<strong>最值</strong>的方法论, 它的核心是<strong>尽可能压缩可能解空间</strong>, 具体做法是将大问题拆解为若干小问题, 求解小问题推导出大问题的解。</p><p>设计动态规划算法主要思路为:</p><ul><li>明确状态, 搞清楚当前面对的问题</li><li>分析上游状态, 弄明白要解决当前阶段的问题最直接的需求</li><li>跟踪下游状态, 对当前问题的解决是否满足对下游的需求</li></ul><p>上下游情况考虑清楚一个, 往往就能设计出状态转移方程. 从求解一个问题开始, 一般的解决过程如下:</p><pre class="mermaid loading">flowchart TB\n  A(&quot;分析问题, 尝试枚举出所有可能解(暴力求解)&quot;) --&gt; B{&quot;分析DP要素(重叠子结构/状态/边界/无后效性), 确定是否可DP&quot;}\n  B ------&gt; |否| D(其他办法)\n  B --&gt; |是| C(DP开始)\n  C --&gt; C1(尝试自顶向下递归, 分析执行过程)\n  C1 --&gt; C2(找出最优子结构, 设计状态转移方程)\n  C2 --&gt; C3(使用备忘录剪枝重叠子问题)\n  C3 --&gt; C4(将算法改造成自底向上递推求解的形式)\n  C -.-&gt; C2\n  C2 -.-&gt; C4</pre><h2 id="做练习"><a class="header-anchor" href="#做练习" aria-hidden="true">#</a> 做练习</h2><div class="warning custom-block"><p class="custom-block-title">黄金矿工</p><p>有<strong>5座</strong>储量不尽相同的金矿, 每座金矿需要的矿工人数也不尽相同(如下表), 现有矿工<strong>10位</strong>, 每座金矿只能挖光或不挖, 不能只投入一部分人挖走部分金矿。求利益最大化方案(挖到最多金子)</p></div><table><thead><tr><th style="text-align:center;">金矿</th><th style="text-align:center;">金矿A</th><th style="text-align:center;">金矿B</th><th style="text-align:center;">金矿C</th><th style="text-align:center;">金矿D</th><th style="text-align:center;">金矿E</th></tr></thead><tbody><tr><td style="text-align:center;">储量(kg)</td><td style="text-align:center;">400</td><td style="text-align:center;">500</td><td style="text-align:center;">200</td><td style="text-align:center;">300</td><td style="text-align:center;">350</td></tr><tr><td style="text-align:center;">需要的矿工数</td><td style="text-align:center;">5</td><td style="text-align:center;">5</td><td style="text-align:center;">3</td><td style="text-align:center;">4</td><td style="text-align:center;">3</td></tr></tbody></table><h3 id="问题分析"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h3>',18),c=l("p",null,[t("穷举: 每座矿只有挖或不挖两种情况, 故挖矿方案共有 "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("msubsup",null,[l("mo",null,"∑"),l("mrow",null,[l("mi",null,"n"),l("mo",null,"="),l("mn",null,"1")]),l("mn",null,"5")]),l("msubsup",null,[l("mi",null,"C"),l("mn",null,"5"),l("mi",null,"n")])]),l("annotation",{encoding:"application/x-tex"},"{\\sum_{{{n}={1}}}^{{5}}}{{C}_{{5}}^{{n}}}")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1.253718em","vertical-align":"-0.29971000000000003em"}}),l("span",{class:"mord"},[l("span",{class:"mop"},[l("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"∑"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.954008em"}},[l("span",{style:{top:"-2.40029em","margin-left":"0em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mathnormal mtight"},"n")]),l("span",{class:"mrel mtight"},"="),l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},"1")])])])])]),l("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},"5")])])])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.29971000000000003em"}},[l("span")])])])])])]),l("span",{class:"mord"},[l("span",{class:"mord"},[l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C")]),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.664392em"}},[l("span",{style:{top:"-2.4518920000000004em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},"5")])])])]),l("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mathnormal mtight"},"n")])])])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.24810799999999997em"}},[l("span")])])])])])])])])]),t(" 种, 从中找出投入不超过10位矿工并且获得金矿最多的方案即可, 算法实现的时间复杂度为 "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"O"),l("mrow",null,[l("mo",{fence:"true"},"("),l("msup",null,[l("mn",null,"2"),l("mi",null,"n")]),l("mo",{fence:"true"},")")])]),l("annotation",{encoding:"application/x-tex"},"{O}{\\left({2}^{{n}}\\right)}")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O")]),l("span",{class:"mord"},[l("span",{class:"minner"},[l("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),l("span",{class:"mord"},[l("span",{class:"mord"},[l("span",{class:"mord"},"2")]),l("span",{class:"msupsub"},[l("span",{class:"vlist-t"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.664392em"}},[l("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])]),l("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])])]),t(" (空间复杂度"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mi",null,"O"),l("mrow",null,[l("mo",{fence:"true"},"("),l("mi",null,"n"),l("mo",{fence:"true"},")")])]),l("annotation",{encoding:"application/x-tex"},"{O}{\\left({n}\\right)}")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O")]),l("span",{class:"mord"},[l("span",{class:"minner"},[l("span",{class:"mopen delimcenter",style:{top:"0em"}},"("),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"n")]),l("span",{class:"mclose delimcenter",style:{top:"0em"}},")")])])])])]),t(", 金矿全都挖的时候)")],-1),i=a('<p>尝试DP (以下 &quot;x位矿工挖n座矿的最优方案&quot; 简称 &quot;x人n矿&quot;)</p><p>分解问题:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿) -.-&gt; |若总收益大于右边方案| D[最优采矿方案]\n  A --&gt; C(x人1矿 + 10-x人4矿) -.-&gt; |若总收益大于左边方案| D</pre><p>😉发现动态规划要素了没？</p><p>继续分解看看:</p><pre class="mermaid loading">flowchart TB\n  A(10人5矿) --&gt; B(10人4矿)\n  A --&gt; C(x人1矿 + 10-x人4矿)\n\n  B --&gt; D(10人3矿)\n  B --&gt; E(y人1矿 + 10-y人3矿)\n\n  C --&gt; F(10-x人3矿)\n  C --&gt; G(z人1矿 + 10-x-z人3矿)</pre><p>若设金矿数量为 <code>goldMineCount</code> , 矿工数为 <code>minerCount</code>, 金矿储量依次为 <code>reserves[]</code> , 金矿用工数依次为 <code>requiredMiners[]</code> , 则<code>10人5矿</code>可以表示为:</p>',7),u=l("p",null,[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mn",null,"10"),l("mo",{separator:"true"},","),l("mn",null,"5"),l("mo",{stretchy:"false"},")"),l("mo",null,"="),l("mi",null,"m"),l("mi",null,"a"),l("mi",null,"x"),l("mo",{stretchy:"false"},"("),l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mn",null,"10"),l("mo",{separator:"true"},","),l("mn",null,"4"),l("mo",{stretchy:"false"},")"),l("mo",{separator:"true"},","),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"s"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"v"),l("mi",null,"e"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"4"),l("mo",{stretchy:"false"},"]"),l("mo",null,"+"),l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mn",null,"10"),l("mo",null,"−"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"4"),l("mo",{stretchy:"false"},"]"),l("mo",{separator:"true"},","),l("mn",null,"4"),l("mo",{stretchy:"false"},")"),l("mo",{stretchy:"false"},")")]),l("annotation",{encoding:"application/x-tex"},"f(10, 5) = max(f(10, 4), reserves[4] + f(10 - requiredMiners[4], 4)) ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"0"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord"},"5"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"a"),l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"0"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord"},"4"),l("span",{class:"mclose"},")"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"4"),l("span",{class:"mclose"},"]"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"0"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"4"),l("span",{class:"mclose"},"]"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord"},"4"),l("span",{class:"mclose"},")"),l("span",{class:"mclose"},")")])])])])],-1),d=l("p",null,"递推下去这个问题会有边界么? 显然存在, 如下:",-1),g=l("p",null,[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"x"),l("mo",{separator:"true"},","),l("mn",null,"1"),l("mo",{stretchy:"false"},")"),l("mo",null,"="),l("mrow",null,[l("mo",{fence:"true"},"{"),l("mtable",{rowspacing:"0.3599999999999999em",columnalign:"left left",columnspacing:"1em"},[l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"s"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"v"),l("mi",null,"e"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"x"),l("mo",null,">"),l("mo",null,"="),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mn",null,"0")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"x"),l("mo",null,"<"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])])])])])]),l("annotation",{encoding:"application/x-tex"},"f(x, 1) = \\begin{cases} reserves[0] & x >= requiredMiners[0] \\\\ 0 & x < requiredMiners[0] \\end{cases} ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"3.0000299999999998em","vertical-align":"-1.25003em"}}),l("span",{class:"minner"},[l("span",{class:"mopen delimcenter",style:{top:"0em"}},[l("span",{class:"delimsizing size4"},"{")]),l("span",{class:"mord"},[l("span",{class:"mtable"},[l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.69em"}},[l("span",{style:{top:"-3.69em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-2.25em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"0")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.19em"}},[l("span")])])])]),l("span",{class:"arraycolsep",style:{width:"1em"}}),l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.69em"}},[l("span",{style:{top:"-3.69em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-2.25em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"<"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.19em"}},[l("span")])])])])])]),l("span",{class:"mclose nulldelimiter"})])])])])])],-1),h=l("p",null,"所以这个问题是可以用动态规划方法解决的✌️",-1),k=l("p",null,"由上可得状态转移方程如下:",-1),y=l("p",null,[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",{separator:"true"},","),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",{stretchy:"false"},")"),l("mo",null,"="),l("mrow",null,[l("mo",{fence:"true"},"{"),l("mtable",{rowspacing:"0.3599999999999999em",columnalign:"left left",columnspacing:"1em"},[l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mn",null,"0")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"<"),l("mo",null,"="),l("mn",null,"1"),l("mi",{mathvariant:"normal"},"&")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"<"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"s"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"v"),l("mi",null,"e"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"="),l("mn",null,"1"),l("mi",{mathvariant:"normal"},"&")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,">"),l("mo",null,"="),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mn",null,"0"),l("mo",{stretchy:"false"},"]")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",{separator:"true"},","),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},")")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,">"),l("mn",null,"1"),l("mi",{mathvariant:"normal"},"&")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow")])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"<"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},"]")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"m"),l("mi",null,"a"),l("mi",null,"x"),l("mo",{stretchy:"false"},"(")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,">"),l("mn",null,"1"),l("mi",{mathvariant:"normal"},"&")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"f"),l("mo",{stretchy:"false"},"("),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",{separator:"true"},","),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},")"),l("mo",{separator:"true"},",")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,">"),l("mo",null,"="),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},"]")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"1em"}),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"s"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"v"),l("mi",null,"e"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},"]"),l("mo",null,"+")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"2em"}),l("mi",null,"f"),l("mo",{stretchy:"false"},"(")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"2em"}),l("mspace",{width:"1em"}),l("mi",null,"m"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"q"),l("mi",null,"u"),l("mi",null,"i"),l("mi",null,"r"),l("mi",null,"e"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"r"),l("mi",null,"s"),l("mo",{stretchy:"false"},"["),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},"]"),l("mo",{separator:"true"},",")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"2em"}),l("mspace",{width:"1em"}),l("mi",null,"g"),l("mi",null,"o"),l("mi",null,"l"),l("mi",null,"d"),l("mi",null,"M"),l("mi",null,"i"),l("mi",null,"n"),l("mi",null,"e"),l("mi",null,"C"),l("mi",null,"o"),l("mi",null,"u"),l("mi",null,"n"),l("mi",null,"t"),l("mo",null,"−"),l("mn",null,"1")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mrow",null,[l("mspace",{width:"2em"}),l("mo",{stretchy:"false"},")")])])])]),l("mtr",null,[l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"false"},[l("mo",{stretchy:"false",lspace:"0em",rspace:"0em"},")")])])])])])]),l("annotation",{encoding:"application/x-tex"},"f(minerCount, goldMineCount) = \\begin{cases} 0 & goldMineCount <= 1 \\& \\\\ & \\quad minerCount < requiredMiners[0] \\\\ reserves[0] & goldMineCount = 1 \\& \\\\ & \\quad minerCount >= requiredMiners[0] \\\\ f(minerCount, goldMineCount - 1) & goldMineCount > 1 \\& \\\\ & \\quad minerCount < requiredMiners[goldMineCount - 1] \\\\ max( & goldMineCount > 1 \\& \\\\ \\quad f(minerCount, goldMineCount - 1), & \\quad minerCount >= requiredMiners[goldMineCount - 1] \\\\ \\quad reserves[goldMineCount - 1] + \\\\ \\qquad f( \\\\ \\qquad\\quad minerCount - requiredMiners[goldMineCount - 1], \\\\ \\qquad\\quad goldMineCount - 1 \\\\ \\qquad ) \\\\ ) \\end{cases} ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"20.160000000000004em","vertical-align":"-9.830000000000004em"}}),l("span",{class:"minner"},[l("span",{class:"mopen"},[l("span",{class:"delimsizing mult"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"10.150019999999998em"}},[l("span",{style:{top:"5.600009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎩")])]),l("span",{style:{top:"5.60501em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"5.31001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"5.01501em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"4.72001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"4.42501em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"4.13001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"3.835010000000001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"3.540010000000001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"3.245010000000001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"2.950010000000001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"2.655010000000001em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"2.3600100000000013em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"2.0650100000000013em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"1.7700100000000014em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"1.4750100000000015em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"1.1800100000000016em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"0.8850100000000016em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"0.5900100000000017em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"0.29501000000000177em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"0.000010000000001841869em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-0.2949899999999981em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-0.589989999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-0.884989999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-1.179989999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-1.4749899999999982em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-1.7699899999999984em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-2.0649899999999985em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-2.2049899999999987em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-3.1500099999999986em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎨")])]),l("span",{style:{top:"-4.295009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-4.590009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-4.885009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-5.180009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-5.475009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-5.770009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-6.065009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-6.360009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-6.655009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-6.950009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-7.245009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-7.540009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-7.835009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-8.130009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-8.425009999999999em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-8.720009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-9.015009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-9.310009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-9.605009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-9.900009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-10.195009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-10.490009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-10.785009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-11.080009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-11.375009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-11.670009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-11.965009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-12.105009999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎪")])]),l("span",{style:{top:"-12.400019999999998em"}},[l("span",{class:"pstrut",style:{height:"3.15em"}}),l("span",{class:"delimsizinginner delim-size4"},[l("span",null,"⎧")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"9.65002em"}},[l("span")])])])])]),l("span",{class:"mord"},[l("span",{class:"mtable"},[l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"10.330000000000002em"}},[l("span",{style:{top:"-12.330000000000004em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"0")])]),l("span",{style:{top:"-10.890000000000002em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"})]),l("span",{style:{top:"-9.450000000000001em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-8.010000000000002em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"})]),l("span",{style:{top:"-6.570000000000001em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")")])]),l("span",{style:{top:"-5.129999999999999em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"})]),l("span",{style:{top:"-3.6899999999999977em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"a"),l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mopen"},"(")])]),l("span",{style:{top:"-2.2499999999999964em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mpunct"},","),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")"),l("span",{class:"mpunct"},",")])]),l("span",{style:{top:"-0.8099999999999953em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},"]"),l("span",{class:"mord"},"+")])]),l("span",{style:{top:"0.6300000000000056em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"2em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),l("span",{class:"mopen"},"(")])]),l("span",{style:{top:"2.070000000000007em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"2em"}}),l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},"]"),l("span",{class:"mpunct"},",")])]),l("span",{style:{top:"3.5100000000000082em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"2em"}}),l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1")])]),l("span",{style:{top:"4.9500000000000055em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"2em"}}),l("span",{class:"mclose"},")")])]),l("span",{style:{top:"6.390000000000003em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mclose"},")")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"9.830000000000004em"}},[l("span")])])])]),l("span",{class:"arraycolsep",style:{width:"1em"}}),l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"10.330000000000002em"}},[l("span",{style:{top:"-12.330000000000004em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"<"),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"&")])]),l("span",{style:{top:"-10.890000000000002em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"<"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-9.450000000000001em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"&")])]),l("span",{style:{top:"-8.010000000000002em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord"},"0"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-6.570000000000001em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"&")])]),l("span",{style:{top:"-5.129999999999999em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},"<"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},"]")])]),l("span",{style:{top:"-3.6899999999999977em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mord"},"&")])]),l("span",{style:{top:"-2.2499999999999964em"}},[l("span",{class:"pstrut",style:{height:"3.008em"}}),l("span",{class:"mord"},[l("span",{class:"mspace",style:{"margin-right":"1em"}}),l("span",{class:"mord mathnormal"},"m"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">"),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"q"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),l("span",{class:"mord mathnormal"},"s"),l("span",{class:"mopen"},"["),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),l("span",{class:"mord mathnormal"},"d"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),l("span",{class:"mord mathnormal"},"i"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"e"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),l("span",{class:"mord mathnormal"},"o"),l("span",{class:"mord mathnormal"},"u"),l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mord mathnormal"},"t"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},"]")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.1900000000000035em"}},[l("span")])])])])])]),l("span",{class:"mclose nulldelimiter"})])])])])])],-1),b=a('<p>那么DP走起, <code>f(minerCount, goldMineCount)</code> 备忘录如下:</p><table><thead><tr><th style="text-align:center;"><strong>minerCount / goldMineCount</strong></th><th style="text-align:center;"><strong>1</strong></th><th style="text-align:center;"><strong>2</strong></th><th style="text-align:center;"><strong>3</strong></th><th style="text-align:center;"><strong>4</strong></th><th style="text-align:center;"><strong>5</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>1</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"><strong>2</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;"><strong>3</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;"><strong>4</strong></td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">200<br><em>(C)</em></td><td style="text-align:center;">300<br><em>(D)</em></td><td style="text-align:center;">350<br><em>(E)</em></td></tr><tr><td style="text-align:center;"><strong>5</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td></tr><tr><td style="text-align:center;"><strong>6</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">550<br><em>(C + E)</em></td></tr><tr><td style="text-align:center;"><strong>7</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">500<br><em>(B) / (C + D)</em></td><td style="text-align:center;">650<br><em>(D + E)</em></td></tr><tr><td style="text-align:center;"><strong>8</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;"><strong>9</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">500<br><em>(B)</em></td><td style="text-align:center;">700<br><em>(B + C)</em></td><td style="text-align:center;">800<br><em>(B + D)</em></td><td style="text-align:center;">850<br><em>(B + E)</em></td></tr><tr><td style="text-align:center;"><strong>10</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td></tr><tr><td style="text-align:center;"><strong>11</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1050<br><em>(B + C + E)</em></td></tr><tr><td style="text-align:center;"><strong>12</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1000<br><em>(B + C + D)</em></td><td style="text-align:center;">1150<br><em>(B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>13</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;"><strong>14</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1250<br><em>(A + B + E)</em></td></tr><tr><td style="text-align:center;"><strong>15</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1350<br><em>(B + C + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>16</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1200<br><em>(A + B + D)</em></td><td style="text-align:center;">1450<br><em>(A + B + C + E)</em></td></tr><tr><td style="text-align:center;"><strong>17</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>18</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>19</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1550<br><em>(A + B + D + E)</em></td></tr><tr><td style="text-align:center;"><strong>20</strong></td><td style="text-align:center;">400<br><em>(A)</em></td><td style="text-align:center;">900<br><em>(A + B)</em></td><td style="text-align:center;">1100<br><em>(A + B + C)</em></td><td style="text-align:center;">1400<br><em>(A + B + C + D)</em></td><td style="text-align:center;">1750<br><em>(A + B + C + D + E)</em></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">提示</p><p>后文中将省略已出现过的代码</p></div><h3 id="带备忘录递归算法-2"><a class="header-anchor" href="#带备忘录递归算法-2" aria-hidden="true">#</a> 带备忘录递归算法 👍</h3><p>只计算最大收益数值(<code>getMostGold</code>):</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 金矿信息 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 黄金储量 */</span>\n  gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/** 需要矿工数 */</span>\n  cost<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">solve</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> minerCount <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> goldMineCount\n  <span class="token keyword">const</span> result <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> right <span class="token operator">=</span>\n    minerCount <span class="token operator">&lt;</span> goldMine<span class="token punctuation">.</span>cost\n      <span class="token operator">?</span> <span class="token number">0</span>\n      <span class="token operator">:</span> minerCount <span class="token operator">===</span> goldMine<span class="token punctuation">.</span>cost\n        <span class="token operator">?</span> goldMine<span class="token punctuation">.</span>gold\n        <span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold <span class="token operator">+</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> goldMine<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">&gt;</span> right <span class="token operator">?</span> left <span class="token operator">:</span> right<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 验证\ngetMostGold(\n  [\n    { id: &#39;1&#39;, gold: 400, cost: 5 },\n    { id: &#39;2&#39;, gold: 500, cost: 5 },\n    { id: &#39;3&#39;, gold: 200, cost: 3 },\n    { id: &#39;4&#39;, gold: 300, cost: 4 },\n    { id: &#39;5&#39;, gold: 350, cost: 3 },\n  ],\n  10\n)\n*/</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>得到详细方案(<code>getMostGold</code>):</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">/** 得到黄金最多的 采矿方案 */</span>\n<span class="token keyword">interface</span> <span class="token class-name">Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">GoldMine</span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 要挖掘的金矿 */</span>\n  mines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">addTo</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMine<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  plans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> gold<span class="token punctuation">,</span> cost <span class="token punctuation">}</span> <span class="token operator">=</span> goldMine\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> plans<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> plan<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    plan <span class="token operator">=</span> plans<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n\n    plan<span class="token punctuation">.</span>gold <span class="token operator">+=</span> gold\n    plan<span class="token punctuation">.</span>cost <span class="token operator">+=</span> cost\n    plan<span class="token punctuation">.</span>mines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> plans\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  leftPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  rightPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> leftGold <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n  <span class="token keyword">let</span> rightGold <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>gold\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftGold <span class="token operator">===</span> rightGold<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 归并</span>\n    <span class="token keyword">let</span> l <span class="token operator">=</span> leftPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> r <span class="token operator">=</span> rightPlans<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> p <span class="token operator">=</span> l <span class="token operator">+</span> r\n    <span class="token keyword">const</span> mergedPlans <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Array</span><span class="token generic class-name"><span class="token operator">&lt;</span>Plan<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">R</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span>\n        leftPlans<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cost <span class="token operator">&gt;</span> rightPlans<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cost\n          <span class="token operator">?</span> leftPlans<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span>\n          <span class="token operator">:</span> rightPlans<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> leftPlans<span class="token punctuation">[</span><span class="token operator">--</span>l<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      mergedPlans<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlans<span class="token punctuation">[</span><span class="token operator">--</span>r<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> mergedPlans\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> leftGold <span class="token operator">&gt;</span> rightGold <span class="token operator">?</span> leftPlans <span class="token operator">:</span> rightPlans\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">solve</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> minerCount <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> goldMineCount\n  <span class="token keyword">const</span> result <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> goldMine\n  <span class="token keyword">let</span> cost\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>goldMineCount <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span>\n      minerCount <span class="token operator">&lt;</span> cost\n        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> cost<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span><span class="token operator">--</span>goldMineCount<span class="token punctuation">]</span>\n  cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>minerCount <span class="token operator">&lt;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> right\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>minerCount <span class="token operator">===</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token operator">:</span> goldMine<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    right <span class="token operator">=</span> <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">,</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount <span class="token operator">-</span> cost<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  DPTable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">solve</span><span class="token punctuation">(</span>goldMines<span class="token punctuation">,</span> minerCount<span class="token punctuation">,</span> goldMineCount<span class="token punctuation">)</span>\n  DPTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span> <span class="token comment">// 睁一只眼闭一只眼</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br></div></div><h3 id="动态规划算法-2"><a class="header-anchor" href="#动态规划算法-2" aria-hidden="true">#</a> 动态规划算法 😍🤙</h3><p>只计算最大收益数值(<code>getMostGold</code>):</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>goldMineCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> goldMine<span class="token operator">:</span> <span class="token constant">T</span>\n  <span class="token keyword">let</span> gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> cost<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>goldMineCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span>goldMineCount<span class="token punctuation">]</span>\n    gold <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>gold\n    cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> minerCount<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> cost<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      DPTable<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>DPTable<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> gold<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>minerCount<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>得到详细方案(<code>getMostGold</code>):</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">copyPlan</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>plan<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> gold<span class="token operator">:</span> plan<span class="token punctuation">.</span>gold<span class="token punctuation">,</span> cost<span class="token operator">:</span> plan<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>plan<span class="token punctuation">.</span>mines<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getMostGold</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> GoldMine <span class="token operator">=</span> GoldMine<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  goldMines<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  minerCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  goldMineCount <span class="token operator">=</span> goldMines<span class="token punctuation">.</span>length\n<span class="token punctuation">)</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> DPTable<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>goldMineCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> goldMine<span class="token operator">:</span> <span class="token constant">T</span>\n  <span class="token keyword">let</span> gold<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> cost<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> leftPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> rightPlans<span class="token operator">:</span> Plan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>goldMineCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    goldMine <span class="token operator">=</span> goldMines<span class="token punctuation">[</span>goldMineCount<span class="token punctuation">]</span>\n    gold <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>gold\n    cost <span class="token operator">=</span> goldMine<span class="token punctuation">.</span>cost\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> minerCount<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> cost<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      leftPlans <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>j <span class="token operator">-</span> cost<span class="token punctuation">]</span>\n      leftPlans <span class="token operator">=</span> leftPlans\n        <span class="token operator">?</span> <span class="token function">addTo</span><span class="token punctuation">(</span>goldMine<span class="token punctuation">,</span> leftPlans<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>copyPlan<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> gold<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> mines<span class="token operator">:</span> <span class="token punctuation">[</span>goldMine<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>\n      rightPlans <span class="token operator">=</span> DPTable<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n      DPTable<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> rightPlans <span class="token operator">?</span> <span class="token function">merge</span><span class="token punctuation">(</span>leftPlans<span class="token punctuation">,</span> rightPlans<span class="token punctuation">)</span> <span class="token operator">:</span> leftPlans\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> DPTable<span class="token punctuation">[</span>minerCount<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="留作业"><a class="header-anchor" href="#留作业" aria-hidden="true">#</a> 留作业</h2><p>请思考:</p><ol><li>动态规划一定比递归更优么?</li></ol><p><em>例如矿工数远远大于金矿数的情况;空间/频繁读写敏感场景</em></p><ol start="2"><li>黄金矿工各算法的时间/空间复杂度怎么评估?</li></ol><p><em>俺不知道</em></p><h2 id="参考文献"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/31628866" target="_blank" rel="noopener noreferrer">漫画：什么是动态规划？</a></p>',21);p.render=function(a,l,t,e,p,f){return s(),n("div",null,[o,r,m,c,i,u,d,g,h,k,y,b])};export default p;export{e as __pageData};
