import{o as n,c as s,f as a,b as p}from"./app.65a05e52.js";const t='{"title":"一种基于前端工程化的整站综合换肤方案","description":"","frontmatter":{"title":"一种基于前端工程化的整站综合换肤方案","index":1},"headers":[{"level":2,"title":"背景","slug":"背景"},{"level":2,"title":"换肤方案","slug":"换肤方案"},{"level":3,"title":"构建时","slug":"构建时"},{"level":3,"title":"运行时","slug":"运行时"},{"level":2,"title":"目标","slug":"目标"},{"level":2,"title":"实现思路","slug":"实现思路"},{"level":2,"title":"具体实现","slug":"具体实现"},{"level":3,"title":"规范","slug":"规范"},{"level":3,"title":"css 预处理语言 及 皮肤文件","slug":"css-预处理语言-及-皮肤文件"},{"level":3,"title":"js引用 及 css module","slug":"js引用-及-css-module"},{"level":3,"title":"皮肤开发","slug":"皮肤开发"},{"level":3,"title":"其他","slug":"其他"}],"relativePath":"blog/plan/skin.md","lastUpdated":1630340423182}',e={},o=p('<p><s><em>2021-06-15</em></s> <s><em>2021-08-27</em></s> <em>2021-09-03</em></p><h2 id="背景"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>有时候需要网站能换肤, 嗯, 就酱 <em>// 换肤迁移到这里(webpack no)太难了</em></p><h2 id="换肤方案"><a class="header-anchor" href="#换肤方案" aria-hidden="true">#</a> 换肤方案</h2><p>换肤有两种应用场景, 一种是构建时生成单个指定皮肤, 常见于“换皮项目”; 一种是运行时切换皮肤, 满足用户个性化需求</p><p>这里仅作简单介绍, 欢迎讨论、补充</p><h3 id="构建时"><a class="header-anchor" href="#构建时" aria-hidden="true">#</a> 构建时</h3><p>即构建时生成指定皮肤, 主要面临的问题其实是项目管理方面的问题: 如何快速迭代满足甲方需求; 如何复用、同步各定制版本的功能; 如何避免版本/功能混乱、高耦合, 一个bug影响各个定制版本 等等</p><p>就换肤本身来说, 除了上述的问题外, 还存在因难以开发维护、难以自动化测试, 导致UI不稳定、风格不一致等问题</p><p>这里不展开讨论</p><h3 id="运行时"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><p>即网站本身提供了多个版本, 甚至允许自定义皮肤, 用户可以按照自己的喜好切换皮肤</p><p>这其中又分需要刷新网页的和不需要刷新的, 前者常见于网站为不同特征用户提供不同的功能和交互体验的场景, 比如: 中文版英文版 老年版普通版青少年版 普通版极简版 设计师商家用户 等等; 后者比较常见, 比如: 浅色深色模式 各种主题等</p><p>具体实现方案大概有以下几种 <a id="fnref">\x3c!-- 表格不能换行写而且里面的描回不来, 就离谱┓( ´∀` )┏ --\x3e</a></p><table><thead><tr><th>方案</th><th>实现方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>配置文件</td><td>应用内根据配置项<ins title="可以与下面的方案结合">实现对应内容</ins></td><td>1. 样式和布局等都可配置<br>2. 允许用户自定义<br>3. 配置数据有移植潜力</td><td>1. 配置与应用强耦合, 配置项变更和管理成本较高</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/var()" target="_blank" rel="noopener noreferrer">CSS变量</a><sup><a href="#fn1">[1]</a></sup></td><td>通过修改CSS变量值实现换肤</td><td>1. 实现简单快速<br>2. 样式变量代码集中</td><td>1. 难以修改布局、动画等, 无法修改<ins title="canvas">js控制的样式</ins><br>2. 不兼容IE</td></tr><tr><td>样式覆盖</td><td><ins title="一般在根元素上增加class, 对应的样式都在这个class选择器下">利用CSS样式优先级覆盖默认样式</ins></td><td>1. 实现简单快速<br>2. 样式代码集中</td><td>1. 修改布局不够优雅, <ins title="略有影响性能">代码冗余</ins>, 无法修改<ins title="canvas">js控制的样式</ins><br>2. 需要良好的规范及代码组织, 否则<ins title="比如滥用!important内联样式等">维护成本高</ins><br>3. 难以<ins title="需要设计规范、保存用户的css">允许用户自定义</ins></td></tr><tr><td><a href="https://developer.mozilla.org/docs/Web/CSS/Alternative_style_sheets" target="_blank" rel="noopener noreferrer">可替换样式表</a><sup><a href="#fn2">[2]</a></sup></td><td>通过可替换样式表来切换对应的样式文件</td><td>1. 样式<ins title="css可以完全不一样, 包括背景图、动画等等">自由度高</ins><br>2. 没有冗余代码, 整体<ins title="由浏览器来完整整个样式的切换">性能高</ins></td><td>1. 需要样式规范, 且无法修改<ins title="canvas">js控制的样式</ins><br>2. 难以<ins title="保存用户的css">允许用户自定义</ins><br>3. 增加打包时间和<ins title="但对浏览器的性能影响忽略不计, 因为可以先不加载或预加载, 切换的时候才会应用">体积</ins></td></tr><tr><td><a href="https://segmentfault.com/a/1190000000355277" target="_blank" rel="noopener noreferrer">Vanilla JS</a></td><td>Vanilla JS 😏</td><td>1. 自由度最高<br>2. 可配置且支持自定义<br>3. 支持canvas</td><td>1. 开发维护成本高<br>2. 性能开销高</td></tr></tbody></table><h2 id="目标"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><p>本文讨论的方案是一种比较综合性的方案, 利用前端工程化的思路来尽可能规范化生产、降低心智负担 和 提效降本. <strong>适合的才是最好的</strong>, 这个方案也有其应用场景和局限</p><p>理想状况:</p><ol><li>整站换肤</li><li>易开发易维护降成本</li></ol><ul><li>集中管理整站风格</li><li>可运行时切换的皮肤</li><li>css module / css object (<code>import STYLE from &#39;*.scss&#39;</code>) 支持</li><li>细粒度特殊处理支持: 允许指定注入的变量 &amp; 允许随皮肤切换样式和其他</li><li>易于开发调试</li><li>支持异步chunk</li></ul><ol start="3"><li>良好的扩展性 (用户定制)</li><li>无缝(刷新)切换/懒加载/预加载/按需加载皮肤</li></ol><h2 id="实现思路"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h2><ol><li>alternate stylesheet + other</li><li><ins title="使用css预处理语言编程能力">scss/less...</ins> vars + webpack插件</li></ol><ul><li>loader 注入全局变量 &amp; 开放 css object 能力</li><li>提供接口, 显式声明要注入变量、要调试的皮肤(cli)</li><li>runtime 代码广播换肤事件(可自定义), 维护当前皮肤状态(全局变量, 可自定义)以待获取 (比如异步chunk)</li><li>收集构建信息, 用于 html 生成和默认切换 (也可存到后端)</li><li>支持热更新, <ins title="style标签, 支持成本大, 要么丢热更新, 要么改style标签内容, 这都可以做成另一种换肤方案了">但暂不支持开发环境切换皮肤</ins></li><li>暂不支持 css-in-js (styled-component 等)</li></ul><ol start="3"><li>配置 + css vars 或 编译保存皮肤</li><li><code>&lt;link rel=&quot;preload/prefetch&quot;</code> / runtime</li></ol><p>看看示例: <a href="/vue-tpl/other" target="_blank">示例2</a> | <a href="/vue-tpl" target="_blank">示例1</a> | <a href="/vue-tpl/report" target="_blank">打包分析</a> | <a href="https://github.com/Maorey/vue-tpl" target="_blank" rel="noopener noreferrer">repo</a></p><h2 id="具体实现"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><p><em>懒得画图</em></p><p>如<a href="#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">上一节</a>所述, 选择了 <code>alternate stylesheet</code> + css预处理语言 作为方案的核心, 那么皮肤文件(<code>.css</code>)可以分为两类: <ins title="任何皮肤都生效的"><strong>基础样式</strong></ins> 和 <ins title="只在当前皮肤生效的"><strong>皮肤样式</strong></ins>; 文件加载方式又可分为: <ins title="静态写入html的"><strong>同步</strong></ins> 和 <ins title="动态按需写入html的"><strong>异步</strong></ins></p><h3 id="规范"><a class="header-anchor" href="#规范" aria-hidden="true">#</a> 规范</h3><p>所以首先要强调前端开发规范和设计规范, 因为没有办法自动去做多套皮肤的适配. 对于开发方面的规范主要有以下要求:</p><ol><li>遵循样式集中管理规范, 即: 有一套<ins title="色系、字体、图标、尺寸间距等">设计变量</ins>, 所有样式均需遵循</li></ol><ul><li>css样式</li><li>内联样式</li><li>canvas样式</li></ul><p>是的, 只有一条要求, 在现有项目基本满足以上规范的情况下, 应用此方案会比较顺利</p><h3 id="css-预处理语言-及-皮肤文件"><a class="header-anchor" href="#css-预处理语言-及-皮肤文件" aria-hidden="true">#</a> css 预处理语言 及 皮肤文件</h3><p>生成多套皮肤是利用了css预处理语言编译到css文件的能力, 而 css 预处理语言基本都支持<strong>变量</strong>和一定的编程能力, 设计规范的落地主要通过 <strong>变量</strong> 和 相应前端组件 来实现</p><p>故, 一套 <strong>css 预处理语言 变量<ins title="以scss为例, 还支持扩展、混入、方法等">等</ins>声明</strong> 对应 一套皮肤文件, 要实现这一点需要做这些事情:</p><ol><li>皮肤注入: webpack loader, 为每个css预处理语言源码注入指定皮肤, 并允许复数皮肤</li><li>皮肤打包: webpack plugin, 识别皮肤module, 生成文件, 处理同步异步加载runtime</li><li>皮肤加载及应用: 根据构建信息加载/切换皮肤</li></ol><p>下面是更多细节</p><h3 id="js引用-及-css-module"><a class="header-anchor" href="#js引用-及-css-module" aria-hidden="true">#</a> js引用 及 css module</h3><p>js引用指在js中获取到设计变量的值, 这种场景常见于<code>canvas</code>及一些只能使用js动态计算样式的特殊情况, 支持方式很简单, 将设计变量导出即可使用:</p><div class="language-scss line-numbers-mode"><pre><code><span class="token comment">// vars.scss</span>\n<span class="token selector">:export </span><span class="token punctuation">{</span>\n  <span class="token property">theme</span><span class="token punctuation">:</span> <span class="token variable">$colorTheme</span><span class="token punctuation">;</span>\n  <span class="token property">theme1</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token variable">$colorWhite</span><span class="token punctuation">,</span> <span class="token variable">$colorTheme</span><span class="token punctuation">,</span> 10%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">trimUnit</span><span class="token punctuation">(</span><span class="token variable">$heightHeader</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60px =&gt; 60 (也可以实现 1rem =&gt; 14px)</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token constant">VARS</span> <span class="token keyword">from</span> <span class="token string">&#39;@index/scss/export/vars.scss&#39;</span>\n\n<span class="token comment">// 仅作示意, init已被劫持, 下面会介绍</span>\n<span class="token comment">// 更好的方式是准备好几套echarts皮肤, 需要使用设计变量的情况很少</span>\necharts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">VARS</span><span class="token punctuation">.</span>theme<span class="token punctuation">,</span> <span class="token constant">VARS</span><span class="token punctuation">.</span>theme1<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    grid<span class="token operator">:</span> <span class="token punctuation">{</span> top<span class="token operator">:</span> <span class="token operator">+</span><span class="token constant">VARS</span><span class="token punctuation">.</span>top <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><a href="https://github.com/css-modules/css-modules" target="_blank" rel="noopener noreferrer">css modules</a> 将class编译为唯一的标识, 在多数情况下, 不同皮肤的 css modules 对象是相同的, 但是考虑到<ins title="js引用, 样式替换等">等其他情况</ins>, 需要<code>loader</code> 提供允许自定义皮肤切换行为的能力, 即: 当皮肤改变时, css object值(键不太可能变)更新逻辑</p><p>比如在vue里, 可以直接使用 <code>Vue.observable()</code> 将css object转化为vue响应式对象, 在大多数场景下会自动随皮肤切换, 这其中可以对上述不同皮肤相同css object的情况作优化</p><p>对于其它框架, 可能需要使用响应式框架或状态管理等方式来实现</p><h3 id="皮肤开发"><a class="header-anchor" href="#皮肤开发" aria-hidden="true">#</a> 皮肤开发</h3><p>可以通过cli参数及环境变量允许开发者配置相关路径, 要调试的皮肤等, 另外允许以下方式:</p><div class="language-html line-numbers-mode"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">/// 基础样式(所有皮肤下都生效) ///</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;./scss/a.scss?skin=&#39;</span>\n  <span class="token comment">// 指定scss变量文件相对路径(别名|皮肤文件(相对皮肤文件夹))</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;./scss/b.scss?skin=|foo.scss&#39;</span>\n\n  <span class="token comment">/// 皮肤样式(自动打包到各种皮肤) ///</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;./scss/c.scss&#39;</span>\n  <span class="token keyword">import</span> <span class="token constant">D</span> <span class="token keyword">from</span> <span class="token string">&#39;./scss/d.module.scss&#39;</span>\n\n  <span class="token comment">/// 指定皮肤样式 ///</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;./scss/e.scss?skin=dark&#39;</span>\n  <span class="token keyword">import</span> <span class="token string">&#39;./scss/f.scss?skin=light&#39;</span>\n\n  <span class="token comment">// CSS Module</span>\n  <span class="token keyword">import</span> getSkin <span class="token keyword">from</span> <span class="token string">&#39;@/skin&#39;</span>\n  <span class="token keyword">import</span> dark <span class="token keyword">from</span> <span class="token string">&#39;./scss/g.module.scss?skin=dark|foo.scss&#39;</span>\n  <span class="token keyword">import</span> light <span class="token keyword">from</span> <span class="token string">&#39;./scss/g.module.scss?skin=light|bar.scss&#39;</span>\n\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Vue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-property-decorator&#39;</span>\n\n  <span class="token keyword">const</span> <span class="token constant">G</span> <span class="token operator">=</span> <span class="token function">getSkin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dark<span class="token punctuation">,</span> light <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  @Component\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Vue <span class="token punctuation">{</span>\n    <span class="token comment">// = computed</span>\n    <span class="token keyword">protected</span> <span class="token keyword">get</span> <span class="token constant">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token constant">D</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">get</span> <span class="token constant">G</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token constant">G</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 基础样式 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">module</span> <span class="token attr-name">skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>|<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">module</span> <span class="token attr-name">skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>|foo.scss<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.bar</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> $red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 皮肤样式 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">module</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.foo</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> $red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 指定皮肤样式【不支持CSS Module】 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dark<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.foo</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> $red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">skin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>light<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n<span class="token selector">.foo</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> $red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- 不支持scoped --&gt;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>需要特别说明的是, 在js中引用, 可以使用一些hack但awesome的方式来处理, 以<code>echarts</code>为例:</p><details><summary>hack echarts</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">let</span> idMap<span class="token operator">:</span> IObject<span class="token operator">&lt;</span>IArguments<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">/// hack 方法 ///</span>\n<span class="token keyword">let</span> originSetOption<span class="token operator">:</span> <span class="token builtin">Function</span>\n<span class="token keyword">const</span> originInit <span class="token operator">=</span> echarts<span class="token punctuation">.</span>init\necharts<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dom<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> theme<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> IObject<span class="token punctuation">,</span> opts<span class="token operator">?</span><span class="token operator">:</span> IObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">originInit</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dom<span class="token punctuation">,</span> theme <span class="token operator">||</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span>instance <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$ <span class="token operator">=</span> opts\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>originSetOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> echartsProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>\n      originSetOption <span class="token operator">=</span> echartsProto<span class="token punctuation">.</span>setOption\n      echartsProto<span class="token punctuation">.</span><span class="token function-variable function">setOption</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> args<span class="token operator">:</span> IArguments <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments\n        idMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> args\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFn</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">]</span>\n          args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token function">originSetOption</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> instance\n<span class="token punctuation">}</span>\n\n<span class="token comment">/// 监听皮肤改变 ///</span>\n<span class="token function">on</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SKIN_FIELD</span><span class="token punctuation">,</span> skin <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> newIdMap<span class="token operator">:</span> IObject<span class="token operator">&lt;</span>IArguments<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> instance\n  <span class="token keyword">let</span> args\n  <span class="token keyword">let</span> opts\n  <span class="token keyword">let</span> id\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>id <span class="token keyword">in</span> idMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token punctuation">(</span>echarts <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstanceById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      args <span class="token operator">=</span> idMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span>\n      newIdMap<span class="token punctuation">[</span><span class="token punctuation">(</span>instance <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> args\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFn</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        opts <span class="token operator">=</span> <span class="token punctuation">(</span>instance <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$\n        instance<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        instance <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> skin<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>\n        args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">]</span>\n        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">originSetOption</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  idMap <span class="token operator">=</span> newIdMap\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">/// 响应窗口大小改变 ///</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> id\n    <span class="token keyword">let</span> instance\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>id <span class="token keyword">in</span> idMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token punctuation">(</span>echarts <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInstanceById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div></details><p>即: 劫持 <code>init</code> 函数, 收集相关实例初始化信息, 当皮肤改变时, 对所有使用函数作为option的(使用了响应式对象)图表进行更新</p><p>实际上, 按照前面对css object的处理, 在vue组件里&quot;正确&quot;使用echarts是不需要劫持的, 但是改动会略大</p><h3 id="其他"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>皮肤打包插件会将chunk(<code>splitChunk</code>之后)中的css模块按皮肤拆成多个文件(<code>{skin}@{filename}.css</code>), 并提供runtime<ins title="当前皮肤通过全局变量获取, 可通过环境变量配置相关字段等">加载皮肤</ins></p><p>可通过另外的插件自动向html正确地注入对应的 js/css(含皮肤) 文件链接, 和 preload/prefetch/defer/async/module 等配置</p><p>相对固定(可环境变量配置)工程目录结构以自动读取皮肤、设置入口等</p><p>将runtime chunk直接内联到html中, 以便服务端渲染</p><p>代码仓库拆分需要js和样式分离(分开打包, js中不import样式)并保留css预编译源码</p><p>微前端化皮肤管理</p><p>...</p>',61),c=p('<hr> 1. 允许自定义css属性, 并在其作用域内的任何css中使用, 且修该自定义属性的值后, 使用该属性的样式会更新 <a href="#fnref" id="fn1">↩︎</a><div class="language-css line-numbers-mode"><pre><code><span class="token comment">/* :root: 全局变量 */</span>\n<span class="token selector">:root</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 自定义属性必须以 -- 开头 */</span>\n  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 变量无效(未定义/作用域...)时显示red */</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-bg-color<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>它是 <a href="https://www.w3.org/TR/html401/present/styles.html#h-14.3" target="_blank" rel="noopener noreferrer">HTML 4.01 规范</a> 中的内容, 允许切换网页使用的样式表, 切换样式方式如下 <a href="#fnref" id="fn2">↩︎</a></li></ol><div class="language-html line-numbers-mode"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reset.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Default<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fancy.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alternate stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Fancy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basic.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>alternate stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Basic<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">/** 设置当前皮肤\n * @param skin 要设置的皮肤名\n */</span>\n<span class="token keyword">function</span> <span class="token function">setSkin</span><span class="token punctuation">(</span><span class="token parameter">skin<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/// 切换样式 ///</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> document<span class="token punctuation">.</span>querySelectorAll<span class="token operator">&lt;</span>HTMLLinkElement<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;link[title]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    el<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 必须先disabled下</span>\n    el<span class="token punctuation">.</span>disabled <span class="token operator">=</span> el<span class="token punctuation">.</span>title <span class="token operator">!==</span> skin\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',6);e.render=function(p,t,e,l,u,r){return n(),s("div",null,[o,a(" 没得办法, 只能人工脚注了┓( ´∀` )┏ "),c])};export{t as __pageData,e as default};
