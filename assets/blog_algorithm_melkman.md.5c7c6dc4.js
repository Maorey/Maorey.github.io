import{o as s,c as n,a,r as p,d as t,b as e}from"./app.b941b070.js";import{S as l}from"./canvas.module.1cb43611.js";var o={setup(){}};const c={width:"320",height:"320"};o.render=function(a,p,t,e,l,o){return s(),n("canvas",c)};const r=(s,n,a="red",p=4)=>{let t=n&&n.length;if(t){s.fillStyle=a;const e=p>>1;let l;for(;t--;)l=n[t],s.fillRect(l.x-e,l.y-e,p,p)}},i=(s,n,a="green",p)=>{let t=n.length,e=n[--t];for(s.beginPath(),s.moveTo(e.x,e.y);t;)e=n[--t],s.lineTo(e.x,e.y);p&&s.closePath(),s.strokeStyle=a,s.stroke()},u=(s,n,a)=>{s.clearRect(0,0,320,320),r(s,n);let p=a&&a.length;if(p){let n=a[p-1];if(Array.isArray(n))for(a.done||(r(s,n,"green",6),i(s,n,"red"),p--);p;)i(s,a[--p]);else a.done||(r(s,[n],"green",6),--p&&i(s,[n,a[p-1]],"red"),a=a.slice(0,p)),i(s,a,"green",a.done)}};var k={props:{algorithm:Function,speed:Number},setup(s){const n=[];let a,p=!1;return{STYLE:l,async run(){if(p=!1,a&&n.length)for await(const t of function*(s,n,a){const p=s(n);let t;do{t=p.next(),yield new Promise((s=>{const n=t.value;n.done=t.done,setTimeout((()=>{s(n)}),a)}))}while(!t.done)}(s.algorithm,n,s.speed)){if(p)return;u(a,n,t)}},clear(){p=!0,n.splice(0),a&&u(a)},onClick(s){p=!0;const t=s.target;a=t.getContext("2d"),n.push({x:s.pageX-t.offsetLeft,y:s.pageY-t.offsetTop}),u(a,n)}}}};const m=a("br",null,null,-1),d=a("br",null,null,-1);k.render=function(p,t,e,l,o,c){return s(),n("div",{class:l.STYLE.wrap},[m,a("i",{onClick:t[1]||(t[1]=(...s)=>l.run&&l.run(...s))},"生成最小凸包"),a("i",{onClick:t[2]||(t[2]=(...s)=>l.clear&&l.clear(...s))},"重置"),a("canvas",{width:"320",height:"320",onClick:t[3]||(t[3]=(...s)=>l.onClick&&l.onClick(...s))}),d],2)};function*b(s,n,a,p,t){const{x:e,y:l}=n,o=a.x-e,c=a.y-l,r=[];let i,u=0;const{x:k,y:m}=a,d=p.x-k,h=p.y-m,g=[];let y,v,w,f=0,x=s.length;for(;x;)v=s[--x],w=o*(v.y-l)-(v.x-e)*c,w>0?(yield t.concat(a,v),r.push(v),w>u&&(u=w,i=v)):(w=d*(v.y-m)-(v.x-k)*h,w>0&&(yield t.concat(p,v),g.push(v),w>f&&(f=w,y=v)));return i&&(yield*b(r,n,i,a,t)),t.push(a),y&&(yield*b(g,a,y,p,t)),t}var h={components:{Show:o,Play:k},methods:{exhaust:function*(s){const n=s.length;if(n<4)return s;const a=[];let p=n;for(;p;){const t=s[--p],{x:e,y:l}=t;let o=p;for(;o;){const c=s[--o],r=c.x-e,i=c.y-l;let u=null,k=n;for(;k;){if(--k===p||k===o)continue;const n=s[k];yield a.concat([[t,c,n]]);const m=r*(n.y-l)>(n.x-e)*i;if(null===u)u=m;else if(m!==u){u=null;break}}null!==u&&(a.push([t,c]),yield a)}}return a},divide:function*(s){const n=s.length;if(n<4)return s;let a,p,t,e=n;for(;e;)t=s[--e],(!a||a.x>t.x)&&(a=t),(!p||p.x<t.x)&&(p=t);const{x:l,y:o}=a,c=p.x-l,r=p.y-o;let i,u,k=0,m=0;const d=[],h=[];let g;for(e=n;e;)t=s[--e],yield[a,p,t],g=c*(t.y-o)-(t.x-l)*r,g>0?(d.push(t),g>k&&(k=g,i=t)):g<0&&(h.push(t),g<m&&(m=g,u=t));if(a===p)return[i,u];if(i===u)return[a,p];const y=[a];return i&&(yield*b(d,a,i,p,y)),y.push(p),u&&(yield*b(h,p,u,a,y)),y}}};const g='{"title":"最小凸包","description":"","frontmatter":{"title":"最小凸包","index":3},"headers":[{"level":2,"title":"问题描述","slug":"问题描述"},{"level":2,"title":"演示","slug":"演示"},{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"方法介绍","slug":"方法介绍"},{"level":3,"title":"穷举法 (O(n))","slug":"穷举法-o-n3"},{"level":3,"title":"分治法 (快包 O(n㏒n))","slug":"分治法-快包-o-n㏒n"},{"level":3,"title":"Jarvis 步进法 (O(nH))","slug":"jarvis-步进法-o-nh"},{"level":3,"title":"Graham 扫描法 (O(n㏒n)) [^GrahamScan]","slug":"graham-扫描法-o-n㏒n"},{"level":3,"title":"Melkman 算法 (O(n))","slug":"melkman-算法-o-n"},{"level":2,"title":"升维","slug":"升维"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"blog/algorithm/melkman.md","lastUpdated":1623174809153}',y=a("p",null,"2021-06-11",-1),v=a("h2",{id:"问题描述"},[a("a",{class:"header-anchor",href:"#问题描述","aria-hidden":"true"},"#"),t(" 问题描述")],-1),w=a("p",null,"平面上任意位置有3个及以上的点, 求这些点的最小外接凸多边形",-1),f=a("h2",{id:"演示"},[a("a",{class:"header-anchor",href:"#演示","aria-hidden":"true"},"#"),t(" 演示")],-1),x=e('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p><a href="./pinp.html#凸多边形">参考链接</a></p><h2 id="方法介绍"><a class="header-anchor" href="#方法介绍" aria-hidden="true">#</a> 方法介绍</h2><h3 id="穷举法-o-n3"><a class="header-anchor" href="#穷举法-o-n3" aria-hidden="true">#</a> 穷举法 (O(n<sup>3</sup>))</h3><p>不放过任何可能的点, 所以首先要知道凸包顶点一定满足的条件: 其他点都在<strong>相邻顶点所在直线的同一侧</strong></p><p>计算的步骤为:</p>',6),_=a("ol",null,[a("li",null,[t("从点集里取出一点"),a("strong",null,"A"),t(", 与剩下的点"),a("strong",null,"B"),t("依次连接, 得到一条直线"),a("strong",null,"L"),t("([A, B]) (共 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mo",null,"∑"),a("mstyle",{scriptlevel:"1"},[a("mtable",{rowspacing:"0.1000em",columnalign:"center",columnspacing:"1em"},[a("mtr",null,[a("mtd",null,[a("mstyle",{scriptlevel:"1",displaystyle:"false"},[a("mrow",null,[a("mn",null,"1"),a("mo",null,"<"),a("mi",null,"i"),a("mo",null,"<"),a("mi",null,"n"),a("mo",null,"−"),a("mn",null,"1")])])])])])])])]),a("annotation",{encoding:"application/x-tex"},"\\sum_{\\substack{1 < i < n - 1}}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.168542em","vertical-align":"-0.418542em"}}),a("span",{class:"mop"},[a("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"∑"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.16912199999999994em"}},[a("span",{style:{top:"-2.40029em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mtable"},[a("span",{class:"col-align-c"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.66976em"}},[a("span",{style:{top:"-2.71024em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"1"),a("span",{class:"mrel mtight"},"<"),a("span",{class:"mord mathnormal mtight"},"i"),a("span",{class:"mrel mtight"},"<"),a("span",{class:"mord mathnormal mtight"},"n"),a("span",{class:"mbin mtight"},"−"),a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.16976em"}},[a("span")])])])])])])])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.418542em"}},[a("span")])])])])])])])]),t(" 条)")]),a("li",null,[t("判断其他点是否都在这条直线"),a("strong",null,"L"),t("的同一侧 (共 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"n"),a("mo",null,"−"),a("mn",null,"2")]),a("annotation",{encoding:"application/x-tex"},"n - 2")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),a("span",{class:"mord"},"2")])])]),t(" 个), 是则将"),a("strong",null,"L"),t("加入边数组")]),a("li",null,[t("[按需] 将边数组转换为点数组 (将点按顺时针/逆时针排序同时去重, "),a("code",null,"O(n)"),t("因为数组里的边总是相邻的)")])],-1),P=a("h4",{id:"演示-1"},[a("a",{class:"header-anchor",href:"#演示-1","aria-hidden":"true"},"#"),t(" 演示")],-1),T=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token comment">/** 穷举法求最小凸包 */</span>\n<span class="token keyword">const</span> exhaust<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">size</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> p0 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> p0\n    <span class="token keyword">let</span> j <span class="token operator">=</span> i\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 线段 [p0, p1]</span>\n      <span class="token keyword">const</span> p1 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span>\n\n      <span class="token keyword">const</span> dx <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n      <span class="token keyword">const</span> dy <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n      <span class="token keyword">let</span> lastTurn<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n\n      <span class="token keyword">let</span> k <span class="token operator">=</span> size\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">===</span> i <span class="token operator">||</span> k <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">continue</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 检查其他点是否在线段所在直线的同一侧</span>\n        <span class="token keyword">const</span> p2 <span class="token operator">=</span> points<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n\n        <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">const</span> turn <span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> turn\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>turn <span class="token operator">!==</span> lastTurn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> <span class="token keyword">null</span>\n          <span class="token keyword">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">yield</span> result\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> exhaust\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div></details><h3 id="分治法-快包-o-n㏒n"><a class="header-anchor" href="#分治法-快包-o-n㏒n" aria-hidden="true">#</a> 分治法 (快包 O(n㏒n))</h3><p>也叫快速凸包构造算法(快包), 核心思想为划分点集为更小的部分, 然后分而治之</p><p>对于一个点集, 最容易确定是凸包顶点的, 是上下左右<strong>4个极值点(集)</strong>(有相等时取两端参与划分), 剩下的点集暂时无法确定</p><p>那么基于这4个极值点(集), 可以想到把点集划分为<strong>5个区域</strong>, 很明显在中间的4-8边形内不可能存在凸包顶点, 剩余的<strong>4个区域</strong>(左上角、右上角、左下角、右下角) 可能存在凸包顶点</p><p>这4个区域可以视作新的点集, 但是新的点集的极值点就不一定是凸包顶点了, 这个时候<strong>到划分线距离最远</strong>的点<strong>A</strong>一定是凸包上的点, 将点<strong>A</strong>作为分割点继续划分, 排除掉内部不可能的点继续划分直到无法划分</p><p><img alt="划分" data-src="melkman/divide.png" loading="lazy" class="lazy"></p><p>整理下计算的步骤:</p>',8),M=a("ol",null,[a("li",null,[t("找到x极值点"),a("strong",null,"p0"),t("和"),a("strong",null,"p1"),t(", 线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"0")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"1")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t("将点集划分为两个部分, 称作"),a("strong",null,"上包"),t("和"),a("strong",null,"下包")]),a("li",null,[t("在"),a("strong",null,"上包"),t("中找到离"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"0")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"1")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t("最远的点"),a("strong",null,"p2"),t(", 使用线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"2")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"0")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_2p_0}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"2")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t(" 和 线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"1")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"2")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_1p_2}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"2")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t(" 继续对上包进行划分, 对得到的 "),a("strong",null,"上包左上"),t(" 和 "),a("strong",null,"上包右上"),t(" 继续执行第"),a("strong",null,"2"),t("步, 直到无法继续划分(上包为空)")]),a("li",null,[t("对"),a("strong",null,"下包"),t("也做与"),a("strong",null,"第2步"),t("相似的操作")])],-1),z=a("h4",{id:"演示-2"},[a("a",{class:"header-anchor",href:"#演示-2","aria-hidden":"true"},"#"),t(" 演示")],-1),A=e('<details><summary>推导及代码实现</summary><p>与<a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">前置知识</a>中介绍过的通过叉积的正负判断点在线段的顺时针/逆时针方向的方法一致, 叉积表示的是两向量围成的<strong>平行四边形面积</strong>(除2得三角形面积), 距离最远的点一定可以围出<strong>最大的面积</strong>, 据此可以划分上下包及找到距离划分线最远的点</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>\n  points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  start<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  middle<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  end<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 需要画出来 故</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Generator<span class="token operator">&lt;</span>Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 按顺时针算使叉积为正</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> startX<span class="token punctuation">,</span> y<span class="token operator">:</span> startY <span class="token punctuation">}</span> <span class="token operator">=</span> start\n  <span class="token keyword">const</span> startMiddleDx <span class="token operator">=</span> middle<span class="token punctuation">.</span>x <span class="token operator">-</span> startX\n  <span class="token keyword">const</span> startMiddleDy <span class="token operator">=</span> middle<span class="token punctuation">.</span>y <span class="token operator">-</span> startY\n  <span class="token keyword">const</span> startMiddlePoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// middleStart顺时针方向 点集</span>\n  <span class="token keyword">let</span> startMiddleMax <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// middleStart顺时针方向 最大距离 +</span>\n  <span class="token keyword">let</span> startMiddle<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// middleStart顺时针方向 距离最远点</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> middleX<span class="token punctuation">,</span> y<span class="token operator">:</span> middleY <span class="token punctuation">}</span> <span class="token operator">=</span> middle\n  <span class="token keyword">const</span> middleEndDx <span class="token operator">=</span> end<span class="token punctuation">.</span>x <span class="token operator">-</span> middleX\n  <span class="token keyword">const</span> middleEndDy <span class="token operator">=</span> end<span class="token punctuation">.</span>y <span class="token operator">-</span> middleY\n  <span class="token keyword">const</span> middleEndPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// endMiddle顺时针方向 点集</span>\n  <span class="token keyword">let</span> middleEndMax <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// endMiddle顺时针方向 最大距离 +</span>\n  <span class="token keyword">let</span> middleEnd<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// endMiddle顺时针方向 距离最远点</span>\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> area<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    area <span class="token operator">=</span> startMiddleDx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> startY<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> startX<span class="token punctuation">)</span> <span class="token operator">*</span> startMiddleDy\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n      startMiddlePoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> startMiddleMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        startMiddleMax <span class="token operator">=</span> area\n        startMiddle <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      area <span class="token operator">=</span> middleEndDx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> middleY<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> middleX<span class="token punctuation">)</span> <span class="token operator">*</span> middleEndDy\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n        middleEndPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> middleEndMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          middleEndMax <span class="token operator">=</span> area\n          middleEnd <span class="token operator">=</span> point\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>startMiddle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>startMiddlePoints<span class="token punctuation">,</span> start<span class="token punctuation">,</span> startMiddle<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>middleEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>middleEndPoints<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> middleEnd<span class="token punctuation">,</span> end<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 分治法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">const</span> divide<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> left<span class="token operator">!</span><span class="token operator">:</span> Point\n  <span class="token keyword">let</span> right<span class="token operator">!</span><span class="token operator">:</span> Point\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> left<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      left <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>right <span class="token operator">||</span> right<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      right <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> left\n  <span class="token keyword">const</span> dx <span class="token operator">=</span> right<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n  <span class="token keyword">const</span> dy <span class="token operator">=</span> right<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 上包最大距离 +</span>\n  <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 下包最大距离 -</span>\n\n  <span class="token keyword">let</span> top<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// 上包距离最远点</span>\n  <span class="token keyword">let</span> bottom<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// 下包距离最远点</span>\n\n  <span class="token keyword">const</span> up<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 上包点集</span>\n  <span class="token keyword">const</span> down<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 下包点集</span>\n\n  <span class="token keyword">let</span> area<span class="token operator">:</span> <span class="token builtin">number</span>\n  i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">yield</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> point<span class="token punctuation">]</span>\n    area <span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      up<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        max <span class="token operator">=</span> area\n        top <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      down<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        min <span class="token operator">=</span> area\n        bottom <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">===</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">// 顺时针</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> divide\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br></div></div></details><h3 id="jarvis-步进法-o-nh"><a class="header-anchor" href="#jarvis-步进法-o-nh" aria-hidden="true">#</a> Jarvis 步进法 (O(nH))</h3><p>把点集想象成木板上钉的若干钉子, 要构造出最小凸包, 我们可以借助一根绳子, 先找到一颗最外面的钉子, 然后顺时针或逆时针绕着木板行走, 每次绳子将和一颗或多颗钉子同时接触, 走一圈下来即可围出最小凸包</p><p>计算的步骤为:</p><ol><li>左上、右上、左下、右下四个角处的点一定是凸包上的点, 因此选任意一个用来作为起点</li><li>依次从剩下的点里取出一个点, 按照顺时针或逆时针方向, 夹角最小的一个或多个点即为凸包顶点</li></ol><p>边界情况:</p><ol><li>第二个凸包顶点: 夹角与所选起点对应平行于坐标轴的射线计算, 比如选取左上角为起点, 顺时针方向前进, 则射线为起点→x轴正方向</li><li>何时闭合凸包(完成条件): 可以将起点添加的点集末尾, 若下一个计算出的点是起点则闭合</li></ol><h4 id="演示-3"><a class="header-anchor" href="#演示-3" aria-hidden="true">#</a> 演示</h4>',8),E=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="graham-扫描法-o-n㏒n"><a class="header-anchor" href="#graham-扫描法-o-n㏒n" aria-hidden="true">#</a> Graham 扫描法 (O(n㏒n)) <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><p>首先选取一个一定是凸包顶点的点作为起点, 将坐标系原点移到起点, 将剩下的点按照幅角排序, 这样就可以依次去判断和连接了</p><p>计算的步骤为(左下角起顺时针方向):</p><ol><li>找到所有x最小的点, 按照y升序全部加入凸包数组, 取末尾的点为起点<strong>O</strong></li><li>依次计算剩余的点与起点<strong>O</strong>的幅角(y轴正向), 从小到大排序, 幅角相等按距离排序(近的在前), 第一个点和最后一个点一定是凸包顶点, 先把第一个点添加进凸包数组末尾</li><li>从排序数组中取出第一个点<strong>A</strong><ol><li>若点<strong>A</strong>为最后一个点, 加入凸包数组并结束</li><li>从凸包数组取末尾两点得到一条直线<strong>L</strong>, 若点<strong>A</strong>在直线<strong>L</strong>右边, 则将点<strong>A</strong>加入凸包数组, 继续执行第<strong>3</strong>步; 否则移除凸包数组末尾点, 继续执行第<strong>3.2</strong>步</li></ol></li></ol><h4 id="演示-4"><a class="header-anchor" href="#演示-4" aria-hidden="true">#</a> 演示</h4>',6),S=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="melkman-算法-o-n"><a class="header-anchor" href="#melkman-算法-o-n" aria-hidden="true">#</a> Melkman 算法 (O(n))</h3><p>从<a href="#graham-%E6%89%AB%E6%8F%8F%E6%B3%95-o-n%E3%8F%92n">Graham 扫描法</a>改进而来, 是一个在线算法. 算法首先需要得到一个三角形凸包, 之后每加入一个点就对凸包进行调整. 在点按照幅角排序后, 时间复杂读可达到<code>O(n)</code>, 否则 <code>O(n㏒n)</code></p><p>计算的步骤为:</p><ol><li>先依次取出点, 直到能构造出三角形 (可能存在三点共线的情况)</li><li>读取下一点<strong>A</strong>, 记录点<strong>A</strong>与凸包的所有边的转向情况 <ol><li>都在顺时针/逆时针方向则点<strong>A</strong>在凸包内部, 不做任何处理</li><li>找到方向突变(在凸包外部)的两条边的交点索引<strong>i</strong>, 使用与 Graham 扫描法相似的方法(步骤<strong>3</strong>)连接该点</li></ol></li></ol><h4 id="演示-5"><a class="header-anchor" href="#演示-5" aria-hidden="true">#</a> 演示</h4>',6),C=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h2 id="升维"><a class="header-anchor" href="#升维" aria-hidden="true">#</a> 升维</h2><p>3D中的情况如何?</p><p><a href="https://zhuanlan.zhihu.com/p/166105080" target="_blank" rel="noopener noreferrer">凸包问题——快速凸包算法</a></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://cyw3.github.io/YalesonChan/2016/ConvexHull.html" target="_blank" rel="noopener noreferrer">凸包算法剖析</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://muthu.co/understanding-graham-scan-algorithm-for-finding-the-convex-hull-of-a-set-of-points/" target="_blank" rel="noopener noreferrer">Understanding Graham scan algorithm for finding the Convex hull of a set of Points</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',8);h.render=function(t,e,l,o,c,r){const i=p("Show"),u=p("Play");return s(),n("div",null,[y,v,w,f,a(i),x,_,P,a(u,{algorithm:r.exhaust,speed:80},null,8,["algorithm"]),T,M,z,a(u,{algorithm:r.divide,speed:125},null,8,["algorithm"]),A,a(u,{algorithm:r.divide},null,8,["algorithm"]),E,a(u,{algorithm:r.divide},null,8,["algorithm"]),S,a(u,{algorithm:r.divide},null,8,["algorithm"]),C])};export default h;export{g as __pageData};
