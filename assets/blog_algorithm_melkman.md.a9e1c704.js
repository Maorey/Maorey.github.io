import{o as n,c as s,a,r as p,d as t,b as e}from"./app.ff4669d0.js";import{S as o}from"./canvas.module.1cb43611.js";var l={setup(){}};const c={width:"320",height:"320"};l.render=function(a,p,t,e,o,l){return n(),s("canvas",c)};const r=(n,s,a="red",p=4)=>{let t=s&&s.length;if(t){n.fillStyle=a;const e=p>>1;let o;for(;t--;)o=s[t],n.fillRect(o.x-e,o.y-e,p,p)}},u=(n,s,a="green",p)=>{let t=s.length,e=s[--t];for(n.beginPath(),n.moveTo(e.x,e.y);t;)e=s[--t],n.lineTo(e.x,e.y);p&&n.closePath(),n.strokeStyle=a,n.stroke()},i=(n,s,a)=>{n.clearRect(0,0,320,320),r(n,s);let p=a&&a.length;if(p){let s=a[p-1];if(Array.isArray(s))for(a.done||(r(n,s,"green",6),u(n,s,"red"),p--);p;)u(n,a[--p]);else a.done||(r(n,[s],"green",6),--p&&u(n,[s,a[p-1]],"red"),a=a.slice(0,p)),u(n,a,"green",a.done)}};var k={props:{algorithm:Function,speed:Number},setup(n){const s=[];let a,p=!1;return{STYLE:o,async run(){if(p=!1,a&&s.length)for await(const t of function*(n,s,a){const p=n(s);let t;do{t=p.next(),yield new Promise((n=>{const s=t.value;s.done=t.done,setTimeout((()=>{n(s)}),a)}))}while(!t.done)}(n.algorithm,s,n.speed)){if(p)return;i(a,s,t)}},clear(){p=!0,s.splice(0),a&&i(a)},onClick(n){p=!0;const t=n.target;a=t.getContext("2d"),s.push({x:n.pageX-t.offsetLeft,y:n.pageY-t.offsetTop}),i(a,s)}}}};const m=a("br",null,null,-1),b=a("br",null,null,-1);k.render=function(p,t,e,o,l,c){return n(),s("div",{class:o.STYLE.wrap},[m,a("i",{onClick:t[1]||(t[1]=(...n)=>o.run&&o.run(...n))},"生成最小凸包"),a("i",{onClick:t[2]||(t[2]=(...n)=>o.clear&&o.clear(...n))},"重置"),a("canvas",{width:"320",height:"320",onClick:t[3]||(t[3]=(...n)=>o.onClick&&o.onClick(...n))}),b],2)};var h,g;(g=h||(h={}))[g.leftTop=0]="leftTop",g[g.rightTop=1]="rightTop",g[g.leftBottom=2]="leftBottom",g[g.rightBottom=3]="rightBottom";const d=(n,s)=>n.x===s.x?"y":n.x>s.x,y=(n,s)=>n.x===s.x?"y":n.x<s.x,f=(n,s)=>n.y===s.y?"x":n.y>s.y,w=(n,s)=>n.y===s.y?"x":n.y<s.y,v=(n,s)=>[s[0],n[0]],x=(n,s)=>[n[0],s[s.length-1]],P=(n,s)=>[n[n.length-1],s[0]],C=(n,s)=>[s[s.length-1],n[n.length-1]],T=(n,s)=>n.x<s[0].x&&n.y<s[1].y,_=(n,s)=>n.x>s[1].x&&n.y<s[0].y,E=(n,s)=>n.x<s[1].x&&n.y>s[0].y,R=(n,s)=>n.x>s[0].x&&n.y>s[1].y,B=(n,s,a)=>{if(!s.length)return s.push(n),!0;const p=s[0],t=a(p,n);if(!t)return;if(!0===t)return s.splice(0,2,n),!0;const e=n[t],o=p[t],l=s[1];return e>o&&(!l||e>l[t])?(s[1]=n,!0):e<o?(s[0]=n,l||(s[1]=p),!0):void 0},V=(n,[{x:s,y:a},p])=>(p.x-s)*(n.y-a)>(n.x-s)*(p.y-a),A=n=>{const s=[];return s.f=n.f||(n=>{switch(n){case 0:return{c:n,x:d,y:f,i:T,v:v};case 1:return{c:n,x:y,y:f,i:_,v:x};case 2:return{c:n,x:d,y:w,i:E,v:P};case 3:return{c:n,x:y,y:w,i:R,v:C}}})(n),s},z=n=>{const s=[],a=[],{x:p,y:t}=n.f;let e,o=n.length;for(;o;)e=n[--o],B(e,s,p),B(e,a,t);const l=A(n),c=l.f.i,r=l.f.v(s,a);for(o=n.length;o;)e=n[--o],c(e,r)&&V(e,r)&&l.push(e);return[s,a,l]},L=(n,s,a,p)=>{const t=[...n];t[t.length-1]===a[0]&&t.pop(),t.push(...a);let e=s.length;for(t[t.length-1]===s[e-1]&&e--;e;)t.push(s[--e]);for(e=p.length,t[t.length-1]===p[e-1]&&e--;e;)t.push(p[--e]);return t.push(t[0]),t};var S={components:{Show:l,Play:k},methods:{exhaust:function*(n){const s=n.length;if(s<4)return n;const a=[];let p=s;for(;p;){const t=n[--p],{x:e,y:o}=t;let l=p;for(;l;){const c=n[--l],r=c.x-e,u=c.y-o;let i=null,k=s;for(;k;){if(--k===p||k===l)continue;const s=n[k];yield a.concat([[t,c,s]]);const m=r*(s.y-o)>(s.x-e)*u;if(null===i)i=m;else if(m!==i){i=null;break}}null!==i&&(a.push([t,c]),yield a)}}return a},divide:function*(n){const s=(n=>{let s=n.length;if(s<3)return;const a=[],p=[],t=[],e=[];let o;for(;s;)o=n[--s],B(o,a,d),B(o,p,y),B(o,t,f),B(o,e,w);const l=A(0),c=v(a,t),r=A(1),u=x(p,t),i=A(2),k=v(a,e),m=A(3),b=C(p,e);for(s=n.length;s;)o=n[--s],T(o,c)?V(o,c)&&l.push(o):_(o,u)?V(o,u)&&r.push(o):E(o,k)?V(o,k)&&i.push(o):R(o,b)&&V(o,b)&&m.push(o);return[[a,p,t,e],[l,r,i,m]]})(n);if(!s)return n;const[[a,p,t,e],o]=s;let l,c,r;for(;o.length;){switch(yield L(a,p,t,e),l=o.shift(),[c,r,l]=z(l),l.f.c){case 0:a.push(...c),t.unshift(...r);break;case 1:p.push(...c),t.push(...r);break;case 2:a.unshift(...c),e.unshift(...r);break;case 3:p.unshift(...c),e.push(...r)}l.length&&o.push(l)}return L(a,p,t,e)}}};const M='{"title":"最小凸包","description":"","frontmatter":{"title":"最小凸包","index":3},"headers":[{"level":2,"title":"问题描述","slug":"问题描述"},{"level":2,"title":"演示","slug":"演示"},{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"方法介绍","slug":"方法介绍"},{"level":3,"title":"穷举法 (O(n))","slug":"穷举法-o-n3"},{"level":3,"title":"分治法 (快包 O(n㏒n))","slug":"分治法-快包-o-n㏒n"},{"level":3,"title":"Jarvis 步进法 (O(nH))","slug":"jarvis-步进法-o-nh"},{"level":3,"title":"Graham 扫描法 (O(n㏒n)) [^GrahamScan]","slug":"graham-扫描法-o-n㏒n"},{"level":3,"title":"Melkman 算法 (O(n))","slug":"melkman-算法-o-n"},{"level":2,"title":"升维","slug":"升维"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"blog/algorithm/melkman.md","lastUpdated":1623000893875}',I=a("p",null,"2021-06-04",-1),O=a("h2",{id:"问题描述"},[a("a",{class:"header-anchor",href:"#问题描述","aria-hidden":"true"},"#"),t(" 问题描述")],-1),F=a("p",null,"平面上任意位置有3个及以上的点, 求这些点的最小外接凸多边形",-1),G=a("h2",{id:"演示"},[a("a",{class:"header-anchor",href:"#演示","aria-hidden":"true"},"#"),t(" 演示")],-1),j=e('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p><a href="./pinp.html#凸多边形">参考链接</a></p><h2 id="方法介绍"><a class="header-anchor" href="#方法介绍" aria-hidden="true">#</a> 方法介绍</h2><h3 id="穷举法-o-n3"><a class="header-anchor" href="#穷举法-o-n3" aria-hidden="true">#</a> 穷举法 (O(n<sup>3</sup>))</h3><p>不放过任何可能的点, 所以首先要知道凸包顶点一定满足的条件: 其他点都在<strong>相邻顶点所在直线的同一侧</strong></p><p>计算的步骤为:</p>',6),D=a("ol",null,[a("li",null,[t("从点集里取出一点"),a("strong",null,"A"),t(", 与剩下的点"),a("strong",null,"B"),t("依次连接, 得到一条直线"),a("strong",null,"L"),t(" (共 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mo",null,"∑"),a("mstyle",{scriptlevel:"1"},[a("mtable",{rowspacing:"0.1000em",columnalign:"center",columnspacing:"1em"},[a("mtr",null,[a("mtd",null,[a("mstyle",{scriptlevel:"1",displaystyle:"false"},[a("mrow",null,[a("mn",null,"1"),a("mo",null,"<"),a("mi",null,"i"),a("mo",null,"<"),a("mi",null,"n"),a("mo",null,"−"),a("mn",null,"1")])])])])])])])]),a("annotation",{encoding:"application/x-tex"},"\\sum_{\\substack{1 < i < n - 1}}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1.168542em","vertical-align":"-0.418542em"}}),a("span",{class:"mop"},[a("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"∑"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.16912199999999994em"}},[a("span",{style:{top:"-2.40029em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mtable"},[a("span",{class:"col-align-c"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.66976em"}},[a("span",{style:{top:"-2.71024em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"1"),a("span",{class:"mrel mtight"},"<"),a("span",{class:"mord mathnormal mtight"},"i"),a("span",{class:"mrel mtight"},"<"),a("span",{class:"mord mathnormal mtight"},"n"),a("span",{class:"mbin mtight"},"−"),a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.16976em"}},[a("span")])])])])])])])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.418542em"}},[a("span")])])])])])])])]),t(" 条)")]),a("li",null,[t("判断其他点是否都在这条直线"),a("strong",null,"L"),t("的同一侧 (共 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"n"),a("mo",null,"−"),a("mn",null,"2")]),a("annotation",{encoding:"application/x-tex"},"n - 2")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),a("span",{class:"mord mathnormal"},"n"),a("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),a("span",{class:"mord"},"2")])])]),t(" 个), 是则将"),a("strong",null,"L"),t("([A, B])加入边数组")]),a("li",null,"[按需] 将边数组转换为点数组 (将点按顺时针/逆时针排序同时去重)")],-1),N=a("h4",{id:"演示-1"},[a("a",{class:"header-anchor",href:"#演示-1","aria-hidden":"true"},"#"),t(" 演示")],-1),Y=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token comment">/** 穷举法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">const</span> exhaust<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">size</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> p0 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> p0\n    <span class="token keyword">let</span> j <span class="token operator">=</span> i\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 线段 [p0, p1]</span>\n      <span class="token keyword">const</span> p1 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span>\n\n      <span class="token keyword">const</span> dx <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n      <span class="token keyword">const</span> dy <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n      <span class="token keyword">let</span> lastTurn<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n\n      <span class="token keyword">let</span> k <span class="token operator">=</span> size\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">===</span> i <span class="token operator">||</span> k <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">continue</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 检查其他点是否在线段所在直线的同一侧</span>\n        <span class="token keyword">const</span> p2 <span class="token operator">=</span> points<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n\n        <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">const</span> turn <span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> turn\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>turn <span class="token operator">!==</span> lastTurn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> <span class="token keyword">null</span>\n          <span class="token keyword">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">yield</span> result\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> exhaust\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div></details><h3 id="分治法-快包-o-n㏒n"><a class="header-anchor" href="#分治法-快包-o-n㏒n" aria-hidden="true">#</a> 分治法 (快包 O(n㏒n))</h3><p>也叫快速凸包构造算法(快包), 核心思想为划分点集为更小的部分, 然后分而治之</p><p>对于一个点集, 最容易确定是凸包顶点的, 是上下左右<strong>4个极值点(集)</strong>(有相等时取两端参与划分), 剩下的点集暂时无法确定</p><p>那么基于这4个极值点(集), 可以想到把点集划分为<strong>5个区域</strong>, 很明显在中间的4-8边形内不可能存在凸包顶点, 剩余的<strong>4个区域</strong>(左上角、右上角、左下角、右下角) 可能存在凸包顶点</p><p>这4个区域可以视作新的点集, 但是新的点集的极值点就不一定是凸包顶点了, 这个时候<strong>到划分线距离最远</strong>的点<strong>A</strong>一定是凸包上的点, 将点<strong>A</strong>作为分割点继续划分, 排除掉内部不可能的点继续划分直到无法划分</p><p><img alt="划分" data-src="melkman/divide.png" loading="lazy" class="lazy"></p><p>整理下计算的步骤:</p>',8),X=a("ol",null,[a("li",null,[t("找到x极值点"),a("strong",null,"p0"),t("和"),a("strong",null,"p1"),t(", 线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"0")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"1")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t("将点集划分为两个部分, 称作"),a("strong",null,"上包"),t("和"),a("strong",null,"下包")]),a("li",null,[t("在"),a("strong",null,"上包"),t("中找到离"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"0")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"1")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t("最远的点"),a("strong",null,"p2"),t(", 使用线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"2")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"0")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_2p_0}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"2")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"0")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t(" 和 线段"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mover",{accent:"true"},[a("mrow",null,[a("msub",null,[a("mi",null,"p"),a("mn",null,"1")]),a("msub",null,[a("mi",null,"p"),a("mn",null,"2")])]),a("mo",{stretchy:"true"},"‾")])]),a("annotation",{encoding:"application/x-tex"},"\\overline{p_1p_2}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),a("span",{class:"mord overline"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.63056em"}},[a("span",{style:{top:"-3em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"1")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])]),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"p"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[a("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"2")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.55056em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.19444em"}},[a("span")])])])])])])]),t(" 继续对上包进行划分, 对得到的 "),a("strong",null,"上包左上"),t(" 和 "),a("strong",null,"上包右上"),t(" 继续执行第"),a("strong",null,"2"),t("步, 直到无法继续划分(上包为空)")]),a("li",null,[t("对"),a("strong",null,"下包"),t("也做与"),a("strong",null,"第2步"),t("相似的操作")])],-1),H=a("h4",{id:"演示-2"},[a("a",{class:"header-anchor",href:"#演示-2","aria-hidden":"true"},"#"),t(" 演示")],-1),J=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token comment">/** 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token comment">/** 四角\n * 上下极值点y坐标相等时, 按x坐标升序\n * 左右极值点x坐标相等时, 按y坐标升序\n */</span>\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Corner <span class="token punctuation">{</span>\n  leftTop<span class="token punctuation">,</span>\n  rightTop<span class="token punctuation">,</span>\n  leftBottom<span class="token punctuation">,</span>\n  rightBottom<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 比较极值点\n * @param extreme 当前极值点\n * @param point\n *\n * @returns false: 非极值点 true: 新极值点; x/y(排序字段): 与当前极值点相等\n */</span>\n<span class="token keyword">type</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>extreme<span class="token operator">:</span> Point<span class="token punctuation">,</span> point<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">keyof</span> Point\n<span class="token keyword">const</span> compareLeft<span class="token operator">:</span> <span class="token function-variable function">Compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>x <span class="token operator">===</span> p<span class="token punctuation">.</span>x <span class="token operator">?</span> <span class="token string">&#39;y&#39;</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span>\n<span class="token keyword">const</span> compareRight<span class="token operator">:</span> <span class="token function-variable function">Compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>x <span class="token operator">===</span> p<span class="token punctuation">.</span>x <span class="token operator">?</span> <span class="token string">&#39;y&#39;</span> <span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">x</span> <span class="token generic class-name"><span class="token operator">&lt;</span> p<span class="token punctuation">.</span>x<span class="token punctuation">)</span>\n<span class="token keyword">const</span> compareTop<span class="token operator">:</span> <span class="token function-variable function">Compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span></span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>y <span class="token operator">===</span> p<span class="token punctuation">.</span>y <span class="token operator">?</span> <span class="token string">&#39;x&#39;</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n<span class="token keyword">const</span> compareBottom<span class="token operator">:</span> <span class="token function-variable function">Compare</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>y <span class="token operator">===</span> p<span class="token punctuation">.</span>y <span class="token operator">?</span> <span class="token string">&#39;x&#39;</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n\n<span class="token comment">/** 划分四个角的向量 */</span>\n<span class="token keyword">type</span> <span class="token class-name">GetVector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>xExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> yExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>Point<span class="token punctuation">,</span> Point<span class="token punctuation">]</span>\n<span class="token keyword">const</span> getLeftTopVector<span class="token operator">:</span> <span class="token function-variable function">GetVector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>leftExtremes<span class="token punctuation">,</span> topExtremes<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  topExtremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  leftExtremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">const</span> getRightTopVector<span class="token operator">:</span> <span class="token function-variable function">GetVector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rightExtremes<span class="token punctuation">,</span> topExtremes<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  rightExtremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  topExtremes<span class="token punctuation">[</span>topExtremes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">const</span> getLeftBottomVector<span class="token operator">:</span> <span class="token function-variable function">GetVector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>leftExtremes<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  leftExtremes<span class="token punctuation">[</span>leftExtremes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  bottomExtremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">const</span> getRightBottomVector<span class="token operator">:</span> <span class="token function-variable function">GetVector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>rightExtremes<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  bottomExtremes<span class="token punctuation">[</span>bottomExtremes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  rightExtremes<span class="token punctuation">[</span>rightExtremes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">/** 是否在四个角 */</span>\n<span class="token keyword">type</span> <span class="token class-name">InRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token operator">:</span> Point<span class="token punctuation">,</span> vector<span class="token operator">:</span> <span class="token punctuation">[</span>Point<span class="token punctuation">,</span> Point<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n<span class="token keyword">const</span> inLeftTopRange<span class="token operator">:</span> <span class="token function-variable function">InRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> point<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y\n<span class="token keyword">const</span> inRightTopRange<span class="token operator">:</span> <span class="token function-variable function">InRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> point<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y\n<span class="token keyword">const</span> inLeftBottomRange<span class="token operator">:</span> <span class="token function-variable function">InRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  point<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y\n<span class="token keyword">const</span> inRightBottomRange<span class="token operator">:</span> <span class="token function-variable function">InRange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  point<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> vector<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> vector<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y\n\n<span class="token comment">// const insert = (point: Point, points: Point[], sortField: keyof Point) =&gt; {</span>\n<span class="token comment">//   // 二分查找 [low, high)</span>\n<span class="token comment">//   const value = point[sortField]</span>\n<span class="token comment">//   let low = 0</span>\n<span class="token comment">//   let high = points.length</span>\n<span class="token comment">//   let i: number</span>\n<span class="token comment">//   while (low &lt; high) {</span>\n<span class="token comment">//     i = (low + high) &gt;&gt; 1 // 除2并向下取整</span>\n<span class="token comment">//     if (points[i][sortField] &gt; value) {</span>\n<span class="token comment">//       high = i - 1</span>\n<span class="token comment">//     } else {</span>\n<span class="token comment">//       low = i + 1</span>\n<span class="token comment">//     }</span>\n<span class="token comment">//   }</span>\n\n<span class="token comment">//   // 插入</span>\n<span class="token comment">//   // points.splice(low, 0, point)</span>\n<span class="token comment">//   i = points.length</span>\n<span class="token comment">//   while (i &gt; low) {</span>\n<span class="token comment">//     points[i] = points[--i]</span>\n<span class="token comment">//   }</span>\n<span class="token comment">//   points[low] = point</span>\n<span class="token comment">// }</span>\n\n<span class="token comment">/** 更新极值点集\n * @param point\n * @param extremes 【最多保留两个】\n * @param compare\n *\n * @returns 是否更新了极值点\n */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">updateExtremes</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token operator">:</span> Point<span class="token punctuation">,</span> extremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> compare<span class="token operator">:</span> Compare<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>extremes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    extremes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> extreme0 <span class="token operator">=</span> extremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>extreme0<span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    extremes<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> value <span class="token operator">=</span> point<span class="token punctuation">[</span>result<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> min <span class="token operator">=</span> extreme0<span class="token punctuation">[</span>result<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> extreme1 <span class="token operator">=</span> extremes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> min <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>extreme1 <span class="token operator">||</span> value <span class="token operator">&gt;</span> extreme1<span class="token punctuation">[</span>result<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    extremes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> point\n\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">value</span> <span class="token generic class-name"><span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    extremes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> point\n    extreme1 <span class="token operator">||</span> <span class="token punctuation">(</span>extremes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> extreme0<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 点是否在划分四个角向量的顺时针方向 不考虑dx/dy为0 */</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isClockwise</span> <span class="token operator">=</span> <span class="token punctuation">(</span>point<span class="token operator">:</span> Point<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>Point<span class="token punctuation">,</span> Point<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span></span>\n  <span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Functions</span> <span class="token punctuation">{</span>\n  c<span class="token operator">:</span> Corner\n  x<span class="token operator">:</span> Compare\n  y<span class="token operator">:</span> Compare\n  i<span class="token operator">:</span> InRange\n  v<span class="token operator">:</span> GetVector\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">CornerPoints</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span>Point<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  f<span class="token operator">:</span> Functions\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 获取指定角落的处理函数\n * @param corner\n * @returns [compareX, compareY, inRange, getVector]\n */</span>\n<span class="token keyword">const</span> getFunctions <span class="token operator">=</span> <span class="token punctuation">(</span>corner<span class="token operator">:</span> Corner<span class="token punctuation">)</span><span class="token operator">:</span> Functions <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>corner<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>leftTop<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        c<span class="token operator">:</span> corner<span class="token punctuation">,</span>\n        x<span class="token operator">:</span> compareLeft<span class="token punctuation">,</span>\n        y<span class="token operator">:</span> compareTop<span class="token punctuation">,</span>\n        i<span class="token operator">:</span> inLeftTopRange<span class="token punctuation">,</span>\n        v<span class="token operator">:</span> getLeftTopVector<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>rightTop<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        c<span class="token operator">:</span> corner<span class="token punctuation">,</span>\n        x<span class="token operator">:</span> compareRight<span class="token punctuation">,</span>\n        y<span class="token operator">:</span> compareTop<span class="token punctuation">,</span>\n        i<span class="token operator">:</span> inRightTopRange<span class="token punctuation">,</span>\n        v<span class="token operator">:</span> getRightTopVector<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>leftBottom<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        c<span class="token operator">:</span> corner<span class="token punctuation">,</span>\n        x<span class="token operator">:</span> compareLeft<span class="token punctuation">,</span>\n        y<span class="token operator">:</span> compareBottom<span class="token punctuation">,</span>\n        i<span class="token operator">:</span> inLeftBottomRange<span class="token punctuation">,</span>\n        v<span class="token operator">:</span> getLeftBottomVector<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>rightBottom<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        c<span class="token operator">:</span> corner<span class="token punctuation">,</span>\n        x<span class="token operator">:</span> compareRight<span class="token punctuation">,</span>\n        y<span class="token operator">:</span> compareBottom<span class="token punctuation">,</span>\n        i<span class="token operator">:</span> inRightBottomRange<span class="token punctuation">,</span>\n        v<span class="token operator">:</span> getRightBottomVector<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> getCornerPoints <span class="token operator">=</span> <span class="token punctuation">(</span>cornerOrCornerPoints<span class="token operator">:</span> Corner <span class="token operator">|</span> CornerPoints<span class="token punctuation">)</span><span class="token operator">:</span> CornerPoints <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cornerPoints<span class="token operator">:</span> CornerPoints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span>\n  cornerPoints<span class="token punctuation">.</span>f <span class="token operator">=</span>\n    <span class="token punctuation">(</span>cornerOrCornerPoints <span class="token keyword">as</span> CornerPoints<span class="token punctuation">)</span><span class="token punctuation">.</span>f <span class="token operator">||</span> <span class="token function">getFunctions</span><span class="token punctuation">(</span>cornerOrCornerPoints <span class="token keyword">as</span> Corner<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> cornerPoints\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 对指定的四个角落之一进行划分\n * @param cornerPoints\n *\n * @returns [x极值点集, y极值点集, 相同角落待确定点集]\n */</span>\n<span class="token keyword">const</span> partitionCorner <span class="token operator">=</span> <span class="token punctuation">(</span>cornerPoints<span class="token operator">:</span> CornerPoints<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CornerPoints<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> xExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> yExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> compareX<span class="token punctuation">,</span> y<span class="token operator">:</span> compareY <span class="token punctuation">}</span> <span class="token operator">=</span> cornerPoints<span class="token punctuation">.</span>f\n  <span class="token keyword">let</span> i <span class="token operator">=</span> cornerPoints<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> cornerPoints<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> xExtremes<span class="token punctuation">,</span> compareX<span class="token punctuation">)</span>\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> yExtremes<span class="token punctuation">,</span> compareY<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> restCornerPoints <span class="token operator">=</span> <span class="token function">getCornerPoints</span><span class="token punctuation">(</span>cornerPoints<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> inRange <span class="token operator">=</span> restCornerPoints<span class="token punctuation">.</span>f<span class="token punctuation">.</span>i\n  <span class="token keyword">const</span> vector <span class="token operator">=</span> restCornerPoints<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>xExtremes<span class="token punctuation">,</span> yExtremes<span class="token punctuation">)</span>\n  i <span class="token operator">=</span> cornerPoints<span class="token punctuation">.</span>length\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> cornerPoints<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token function">inRange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isClockwise</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> vector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> restCornerPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>xExtremes<span class="token punctuation">,</span> yExtremes<span class="token punctuation">,</span> restCornerPoints<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 将点集划分为5个区域\n * @param points\n * @returns\n */</span>\n<span class="token keyword">const</span> partition <span class="token operator">=</span> <span class="token punctuation">(</span>\n  points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CornerPoints<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> leftExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> rightExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> topExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> bottomExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> leftExtremes<span class="token punctuation">,</span> compareLeft<span class="token punctuation">)</span>\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> rightExtremes<span class="token punctuation">,</span> compareRight<span class="token punctuation">)</span>\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> topExtremes<span class="token punctuation">,</span> compareTop<span class="token punctuation">)</span>\n    <span class="token function">updateExtremes</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">,</span> compareBottom<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> leftTopCornerPoints <span class="token operator">=</span> <span class="token function">getCornerPoints</span><span class="token punctuation">(</span>Corner<span class="token punctuation">.</span>leftTop<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> leftTopVector <span class="token operator">=</span> <span class="token function">getLeftTopVector</span><span class="token punctuation">(</span>leftExtremes<span class="token punctuation">,</span> topExtremes<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> rightTopCornerPoints <span class="token operator">=</span> <span class="token function">getCornerPoints</span><span class="token punctuation">(</span>Corner<span class="token punctuation">.</span>rightTop<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> rightTopVector <span class="token operator">=</span> <span class="token function">getRightTopVector</span><span class="token punctuation">(</span>rightExtremes<span class="token punctuation">,</span> topExtremes<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> leftBottomCornerPoints <span class="token operator">=</span> <span class="token function">getCornerPoints</span><span class="token punctuation">(</span>Corner<span class="token punctuation">.</span>leftBottom<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> leftBottomVector <span class="token operator">=</span> <span class="token function">getLeftTopVector</span><span class="token punctuation">(</span>leftExtremes<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> rightBottomCornerPoints <span class="token operator">=</span> <span class="token function">getCornerPoints</span><span class="token punctuation">(</span>Corner<span class="token punctuation">.</span>rightBottom<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> rightBottomVector <span class="token operator">=</span> <span class="token function">getRightBottomVector</span><span class="token punctuation">(</span>rightExtremes<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">)</span>\n\n  i <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token function">inLeftTopRange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> leftTopVector<span class="token punctuation">)</span>\n      <span class="token operator">?</span> <span class="token function">isClockwise</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> leftTopVector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> leftTopCornerPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token function">inRightTopRange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> rightTopVector<span class="token punctuation">)</span>\n      <span class="token operator">?</span> <span class="token function">isClockwise</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> rightTopVector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rightTopCornerPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token function">inLeftBottomRange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> leftBottomVector<span class="token punctuation">)</span>\n      <span class="token operator">?</span> <span class="token function">isClockwise</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> leftBottomVector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> leftBottomCornerPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token operator">:</span> <span class="token function">inRightBottomRange</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> rightBottomVector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        <span class="token function">isClockwise</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> rightBottomVector<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n        rightBottomCornerPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>leftExtremes<span class="token punctuation">,</span> rightExtremes<span class="token punctuation">,</span> topExtremes<span class="token punctuation">,</span> bottomExtremes<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>leftTopCornerPoints<span class="token punctuation">,</span> rightTopCornerPoints<span class="token punctuation">,</span> leftBottomCornerPoints<span class="token punctuation">,</span> rightBottomCornerPoints<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">generateConvex</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  leftPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  rightPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  topPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  bottomPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>leftPoints<span class="token punctuation">]</span>\n\n  result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> topPoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>topPoints<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> rightPoints<span class="token punctuation">.</span>length\n  result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> rightPoints<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">--</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightPoints<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  i <span class="token operator">=</span> bottomPoints<span class="token punctuation">.</span>length\n  result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> bottomPoints<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">--</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bottomPoints<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> divide<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> partitionResult <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>partitionResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>leftPoints<span class="token punctuation">,</span> rightPoints<span class="token punctuation">,</span> topPoints<span class="token punctuation">,</span> bottomPoints<span class="token punctuation">]</span><span class="token punctuation">,</span> cornerPointsList<span class="token punctuation">]</span> <span class="token operator">=</span> partitionResult\n\n  <span class="token keyword">let</span> cornerPoints<span class="token operator">:</span> CornerPoints\n  <span class="token keyword">let</span> xExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> yExtremes<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>cornerPointsList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token function">generateConvex</span><span class="token punctuation">(</span>leftPoints<span class="token punctuation">,</span> rightPoints<span class="token punctuation">,</span> topPoints<span class="token punctuation">,</span> bottomPoints<span class="token punctuation">)</span>\n\n    cornerPoints <span class="token operator">=</span> cornerPointsList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>\n    <span class="token punctuation">;</span><span class="token punctuation">[</span>xExtremes<span class="token punctuation">,</span> yExtremes<span class="token punctuation">,</span> cornerPoints<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">partitionCorner</span><span class="token punctuation">(</span>cornerPoints<span class="token punctuation">)</span>\n\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cornerPoints<span class="token punctuation">.</span>f<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>leftTop<span class="token operator">:</span>\n        leftPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>xExtremes<span class="token punctuation">)</span>\n        topPoints<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>yExtremes<span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n      <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>rightTop<span class="token operator">:</span>\n        rightPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>xExtremes<span class="token punctuation">)</span>\n        topPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>yExtremes<span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n      <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>leftBottom<span class="token operator">:</span>\n        leftPoints<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>xExtremes<span class="token punctuation">)</span>\n        bottomPoints<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>yExtremes<span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n      <span class="token keyword">case</span> Corner<span class="token punctuation">.</span>rightBottom<span class="token operator">:</span>\n        rightPoints<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>xExtremes<span class="token punctuation">)</span>\n        bottomPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>yExtremes<span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n\n    cornerPoints<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> cornerPointsList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cornerPoints<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">generateConvex</span><span class="token punctuation">(</span>leftPoints<span class="token punctuation">,</span> rightPoints<span class="token punctuation">,</span> topPoints<span class="token punctuation">,</span> bottomPoints<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> divide\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br><span class="line-number">340</span><br><span class="line-number">341</span><br><span class="line-number">342</span><br><span class="line-number">343</span><br><span class="line-number">344</span><br><span class="line-number">345</span><br><span class="line-number">346</span><br><span class="line-number">347</span><br><span class="line-number">348</span><br><span class="line-number">349</span><br></div></div></details><h3 id="jarvis-步进法-o-nh"><a class="header-anchor" href="#jarvis-步进法-o-nh" aria-hidden="true">#</a> Jarvis 步进法 (O(nH))</h3><p>把点集想象成木板上钉的若干钉子, 要构造出最小凸包, 我们可以借助一根绳子, 先找到一颗最外面的钉子, 然后顺时针或逆时针绕着木板行走, 每次绳子将和一颗或多颗钉子同时接触, 走一圈下来即可围出最小凸包</p><p>计算的步骤为:</p><ol><li>左上、右上、左下、右下四个角处的点一定是凸包上的点, 因此选任意一个用来作为起点</li><li>依次从剩下的点里取出一个点, 按照顺时针或逆时针方向, 夹角最小的一个或多个点即为凸包顶点</li></ol><p>边界情况:</p><ol><li>第二个凸包顶点: 夹角与所选起点对应平行于坐标轴的射线计算, 比如选取左上角为起点, 顺时针方向前进, 则射线为起点→x轴正方向</li><li>何时闭合凸包(完成条件): 可以将起点添加的点集末尾, 若下一个计算出的点是起点则闭合</li></ol><h4 id="演示-3"><a class="header-anchor" href="#演示-3" aria-hidden="true">#</a> 演示</h4>',8),U=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="graham-扫描法-o-n㏒n"><a class="header-anchor" href="#graham-扫描法-o-n㏒n" aria-hidden="true">#</a> Graham 扫描法 (O(n㏒n)) <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><p>首先选取一个一定是凸包顶点的点作为起点, 将坐标系原点移到起点, 将剩下的点按照幅角排序, 这样就可以依次去判断和连接了</p><p>计算的步骤为(左下角起顺时针方向):</p><ol><li>找到所有x最小的点, 按照y升序全部加入凸包数组, 取末尾的点为起点<strong>O</strong></li><li>依次计算剩余的点与起点<strong>O</strong>的幅角(y轴正向), 从小到大排序, 幅角相等按距离排序(近的在前), 第一个点和最后一个点一定是凸包顶点, 先把第一个点添加进凸包数组末尾</li><li>从排序数组中取出第一个点<strong>A</strong><ol><li>若点<strong>A</strong>为最后一个点, 加入凸包数组并结束</li><li>从凸包数组取末尾两点得到一条直线<strong>L</strong>, 若点<strong>A</strong>在直线<strong>L</strong>右边, 则将点<strong>A</strong>加入凸包数组, 继续执行第<strong>3</strong>步; 否则移除凸包数组末尾点, 继续执行第<strong>3.2</strong>步</li></ol></li></ol><h4 id="演示-4"><a class="header-anchor" href="#演示-4" aria-hidden="true">#</a> 演示</h4>',6),q=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="melkman-算法-o-n"><a class="header-anchor" href="#melkman-算法-o-n" aria-hidden="true">#</a> Melkman 算法 (O(n))</h3><p>从<a href="#graham-%E6%89%AB%E6%8F%8F%E6%B3%95-o-n%E3%8F%92n">Graham 扫描法</a>改进而来, 是一个在线算法. 算法首先需要得到一个三角形凸包, 之后每加入一个点就对凸包进行调整</p><p>计算的步骤为:</p><ol><li>先依次取出点, 直到能构造出三角形 (可能存在三点共线的情况)</li><li>读取下一点<strong>A</strong>, 记录点<strong>A</strong>与凸包的所有边的转向情况 <ol><li>都在顺时针/逆时针方向则点<strong>A</strong>在凸包内部, 不做任何处理</li><li>找到方向突变(在凸包外部)的两条边的交点索引<strong>i</strong>, 使用与 Graham 扫描法相似的方法(步骤<strong>3</strong>)连接该点</li></ol></li></ol><h4 id="演示-5"><a class="header-anchor" href="#演示-5" aria-hidden="true">#</a> 演示</h4>',6),K=e('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h2 id="升维"><a class="header-anchor" href="#升维" aria-hidden="true">#</a> 升维</h2><p>3D中的情况如何?</p><p><a href="https://zhuanlan.zhihu.com/p/166105080" target="_blank" rel="noopener noreferrer">凸包问题——快速凸包算法</a></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://cyw3.github.io/YalesonChan/2016/ConvexHull.html" target="_blank" rel="noopener noreferrer">凸包算法剖析</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://muthu.co/understanding-graham-scan-algorithm-for-finding-the-convex-hull-of-a-set-of-points/" target="_blank" rel="noopener noreferrer">Understanding Graham scan algorithm for finding the Convex hull of a set of Points</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',8);S.render=function(t,e,o,l,c,r){const u=p("Show"),i=p("Play");return n(),s("div",null,[I,O,F,G,a(u),j,D,N,a(i,{algorithm:r.exhaust,speed:80},null,8,["algorithm"]),Y,X,H,a(i,{algorithm:r.divide,speed:250},null,8,["algorithm"]),J,a(i,{algorithm:r.divide},null,8,["algorithm"]),U,a(i,{algorithm:r.divide},null,8,["algorithm"]),q,a(i,{algorithm:r.divide},null,8,["algorithm"]),K])};export default S;export{M as __pageData};
