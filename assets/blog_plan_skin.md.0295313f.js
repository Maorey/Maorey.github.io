import{o as s,c as e,f as n,b as a}from"./app.9e23c0b3.js";const t='{"title":"一种基于前端工程化的整站综合换肤方案","description":"","frontmatter":{"title":"一种基于前端工程化的整站综合换肤方案","index":1},"headers":[{"level":2,"title":"背景","slug":"背景"},{"level":2,"title":"换肤方案","slug":"换肤方案"},{"level":3,"title":"构建时","slug":"构建时"},{"level":3,"title":"运行时","slug":"运行时"},{"level":2,"title":"目标","slug":"目标"},{"level":2,"title":"实现思路","slug":"实现思路"},{"level":2,"title":"具体实现","slug":"具体实现"}],"relativePath":"blog/plan/skin.md","lastUpdated":1629831169557}',l={},r=a('<p><s><em>2021-06-15</em></s> <em>2021-08-27</em></p><h2 id="背景"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>有时候需要网站能换肤, 嗯, 就酱</p><h2 id="换肤方案"><a class="header-anchor" href="#换肤方案" aria-hidden="true">#</a> 换肤方案</h2><p>换肤有两种应用场景, 一种是构建时生成单个指定皮肤, 常见于“换皮项目”; 一种是运行时切换皮肤, 满足用户个性化需求</p><p>这里仅作简单介绍, 欢迎讨论、补充</p><h3 id="构建时"><a class="header-anchor" href="#构建时" aria-hidden="true">#</a> 构建时</h3><p>即构建时生成指定皮肤, 主要面临的问题其实是项目管理方面的问题: 如何快速迭代满足甲方需求; 如何复用、同步各定制版本的功能; 如何避免版本/功能混乱、高耦合, 一个bug影响各个定制版本 等等</p><p>就换肤本身来说, 除了上述的问题外, 还存在因难以开发维护、难以自动化测试, 导致UI不稳定、风格不一致等问题</p><p>这里不展开讨论</p><h3 id="运行时"><a class="header-anchor" href="#运行时" aria-hidden="true">#</a> 运行时</h3><p>即网站本身提供了多个版本, 甚至允许自定义皮肤, 用户可以按照自己的喜好切换皮肤.</p><p>这其中又分需要刷新网页的和不需要刷新的, 前者常见于网站为不同特征用户提供不同的功能和交互体验的场景, 比如: 老年版普通版青少年版 普通版极简版 设计师商家用户 等等; 后者比较常见, 比如: 浅色深色模式 各种主题等</p><p>具体实现方案大概有以下几种 <a id="fnref">\x3c!-- 表格里的描回不来┓( ´∀` )┏ --\x3e</a></p><table><thead><tr><th>方案</th><th>实现方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>配置文件</td><td>应用内根据配置项<ins title="可以与下面的方案结合">实现对应内容</ins></td><td>1. 样式和布局等都可配置<br>2. 允许用户自定义<br>3. 配置数据有移植潜力</td><td>1. 配置与应用强耦合, 配置项变更和管理成本较高</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/var()" target="_blank" rel="noopener noreferrer">CSS变量</a><sup><a href="#fn1">[1]</a></sup></td><td>通过修改CSS变量值实现换肤</td><td>1. 实现简单快速<br>2. 样式变量代码集中</td><td>1. 难以修改布局、动画等, 无法修改<ins title="canvas">js控制的样式</ins><br>2. 不兼容IE</td></tr><tr><td>样式覆盖</td><td><ins title="一般在根元素上增加class, 对应的样式都在这个class选择器下">利用CSS样式优先级覆盖默认样式</ins></td><td>1. 实现简单快速<br>2. 样式代码集中</td><td>1. 修改布局不够优雅, <ins title="略有影响性能">代码冗余</ins>, 无法修改<ins title="canvas">js控制的样式</ins><br>2. 需要良好的规范及代码组织, 否则<ins title="比如滥用!important内联样式等">维护成本高</ins><br>3. 难以<ins title="需要设计规范、保存用户的css">允许用户自定义</ins></td></tr><tr><td><a href="https://developer.mozilla.org/docs/Web/CSS/Alternative_style_sheets" target="_blank" rel="noopener noreferrer">可替换样式表</a><sup><a href="#fn2">[2]</a></sup></td><td>通过可替换样式表来切换对应的样式文件</td><td>1. 样式<ins title="css可以完全不一样, 包括背景图、动画等等">自由度高</ins><br>2. 没有冗余代码, 整体<ins title="由浏览器来完整整个样式的切换">性能高</ins></td><td>1. 需要样式规范, 且无法修改<ins title="canvas">js控制的样式</ins><br>2. 难以<ins title="保存用户的css">允许用户自定义</ins><br>3. 增加打包时间和<ins title="但对浏览器的性能影响忽略不计, 因为可以先不加载或预加载, 切换的时候才会应用">体积</ins></td></tr><tr><td><a href="https://segmentfault.com/a/1190000000355277" target="_blank" rel="noopener noreferrer">Vanilla JS</a></td><td>Vanilla JS 😏</td><td>1. 自由度最高<br>2. 可配置且支持自定义<br>3. 支持canvas</td><td>1. 开发维护成本高<br>2. 性能开销高</td></tr></tbody></table><h2 id="目标"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h2><p>TODO: 来个表格</p><ol><li>整站换肤</li><li>易开发易维护降成本</li></ol><ul><li>默认自动注入皮肤变量同时生成多套可运行时切换的皮肤</li><li>支持异步chunk</li><li>css module / css object (<code>import STYLE from &#39;*.scss&#39;</code>) 支持</li><li>细粒度特殊处理支持: 允许指定注入的变量 &amp; 允许随皮肤切换样式和其他</li><li>易于开发调试</li></ul><ol start="3"><li>良好的扩展性 (用户定制)</li><li>无缝(刷新)切换/懒加载/预加载/按需加载皮肤</li></ol><h2 id="实现思路"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h2><p>TODO: 来个表格</p><ol><li>alternate stylesheet</li><li>scss/less... vars + webpack插件</li></ol><ul><li>loader 配置全局变量</li><li>runtime代码广播换肤事件(可自定义), 维护当前皮肤状态(全局变量, 可自定义)以待获取 (比如异步chunk)</li><li>搜集构建信息, 根据当前皮肤提供接口更新css object(如使用vue reactivity劫持下 可做到比如维护一套变量控制包括echarts在内的皮肤及切换)</li><li>提供接口, 构建时处理</li><li>支持热更新, 但暂不支持开发环境切换皮肤(style标签, 支持成本大, 要么丢热更新, 要么改style标签内容, 这都可以做成另一种换肤方案了), 支持使用指定皮肤(命令行参数)启动开发环境</li><li>暂不支持 css-in-js (styled-component 等)</li></ul><ol start="3"><li>可支持 css var、在线打包、上传css</li><li><code>&lt;link rel=&quot;preload/prefetch&quot;</code></li></ol><h2 id="具体实现"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><p>TODO: api/规范 + 工程化</p>',27),i=a('<hr> 1. 允许自定义css属性, 并在其作用域内的任何css中使用, 且修该自定义属性的值后, 使用该属性的样式会更新 <a href="#fnref" id="fn1">↩︎</a><div class="language-css line-numbers-mode"><pre><code><span class="token comment">/* :root: 全局变量 */</span>\n<span class="token selector">:root</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 自定义属性必须以 -- 开头 */</span>\n  <span class="token property">--main-bg-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">body</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 变量无效(未定义/作用域...)时显示red */</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-bg-color<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>它是 <a href="https://www.w3.org/TR/html401/present/styles.html#h-14.3" target="_blank" rel="noopener noreferrer">HTML 4.01 规范</a> 中的内容, 允许切换网页使用的样式表, 切换样式方式如下 <a href="#fnref" id="fn2">↩︎</a></li></ol><div class="language-html line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div>',6);l.render=function(a,t,l,p,o,c){return s(),e("div",null,[r,n(" 没得办法, 只能人工脚注了┓( ´∀` )┏ "),i])};export{t as __pageData,l as default};
