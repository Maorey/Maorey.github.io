import{S as n}from"./canvas.module.835ad0e7.js";import{o as s,c as a,d as p,n as t,r as e,a as o,b as l,e as c}from"./app.65a05e52.js";function*r(n,s,a,p,t){const{x:e,y:o}=s,l=a.x-e,c=a.y-o,u=[];let i,k=0;const{x:m,y:b}=a,d=p.x-m,y=p.y-b,h=[];let g,w,x,f=0,v=n.length;for(;v;)w=n[--v],x=l*(w.y-o)-(w.x-e)*c,x>0?(yield t.concat(a,w),u.push(w),x>k&&(k=x,i=w)):(x=d*(w.y-b)-(w.x-m)*y,x>0&&(yield t.concat(p,w),h.push(w),x>f&&(f=x,g=w)));return i&&(yield*r(u,s,i,a,t)),t.push(a),g&&(yield*r(h,a,g,p,t)),t}const u=function*(n){const s=n.length;if(s<4)return n;let a,p,t,e=s;for(;e;)t=n[--e],(!a||a.x>t.x)&&(a=t),(!p||p.x<t.x)&&(p=t);const{x:o,y:l}=a,c=p.x-o,u=p.y-l;let i,k,m=0,b=0;const d=[],y=[];let h;for(e=s;e;)t=n[--e],yield[a,p,t],h=c*(t.y-l)-(t.x-o)*u,h>0?(d.push(t),h>m&&(m=h,i=t)):h<0&&(y.push(t),h<b&&(b=h,k=t));if(a===p)return[i,k];if(i===k)return[a,p];const g=[a];return i&&(yield*r(d,a,i,p,g)),g.push(p),k&&(yield*r(y,p,k,a,g)),g},i=(n,s,a)=>{n.clearRect(0,0,320,320),s&&((n,s)=>{let a=s.length;if(a){let p;for(n.fillStyle="red";a--;)p=s[a],n.fillRect(p.x-2,p.y-2,4,4)}})(n,s),a&&((n,s)=>{let a=s.length;if(a){let p=s[--a];for(n.beginPath(),n.moveTo(p.x,p.y);a;)p=s[--a],n.lineTo(p.x,p.y);n.closePath(),n.strokeStyle="green",n.stroke()}})(n,a)};var k={setup(){const s=[];let a;return{STYLE:n,random(n){let p=+n.target.previousSibling.value||+(Math.random()+"").slice(8,9+(2*Math.random()|0))+1;for(s.splice(p);p;)s[--p]={x:320*Math.random()|0,y:320*Math.random()|0};a||(a=n.target.nextSibling.getContext("2d")),i(a,s)},run(){if(a&&s){const n=u(s);let p;for(;!(p=n.next()).done;);i(a,s,p.value)}},clear(){s.splice(0),a&&i(a)},onClick(n){const p=n.target;a=p.getContext("2d"),s.push({x:n.pageX-p.offsetLeft,y:n.pageY-p.offsetTop}),i(a,s)}}}};const m=p("input",{type:"number",min:"1",step:"3"},null,-1);k.render=function(n,e,o,l,c,r){return s(),a("div",{class:t(l.STYLE.wrap)},[p("i",{onClick:e[0]||(e[0]=(...n)=>l.run&&l.run(...n))},"生成最小凸包"),p("i",{onClick:e[1]||(e[1]=(...n)=>l.clear&&l.clear(...n))},"重置"),m,p("i",{onClick:e[2]||(e[2]=(...n)=>l.random&&l.random(...n))},"生成随机点"),p("canvas",{width:"320",height:"320",onClick:e[3]||(e[3]=(...n)=>l.onClick&&l.onClick(...n))})],2)};const b=(n,s,a="red",p=4)=>{let t=s.length;if(t){n.fillStyle=a;const e=p>>1;let o;for(;t--;)o=s[t],n.fillRect(o.x-e,o.y-e,p,p)}},d=(n,s,a="green",p)=>{let t=s.length,e=s[--t];for(n.beginPath(),n.moveTo(e.x,e.y);t;)e=s[--t],n.lineTo(e.x,e.y);p&&n.closePath(),n.strokeStyle=a,n.stroke()},y=(n,s,a)=>{n.clearRect(0,0,320,320),s&&b(n,s);let p=a&&a.length;if(p){let s=a[p-1];if(Array.isArray(s))for(a.done||(b(n,s,"green",6),d(n,s,"red"),p--);p;)d(n,a[--p]);else a.done||(b(n,[s],"green",6),--p&&d(n,[s,a[p-1]],"red"),a=a.slice(0,p)),d(n,a,"green",a.done)}};var h={props:{algorithm:Function,speed:Number},setup(s){const a=[];let p,t=s.speed,e=!1;return{STYLE:n,up(){t+=10},down(){t-=10,t<t&&(t=10)},random(n){e=!0;let s=+n.target.previousSibling.value||+(Math.random()+"").slice(8,9+(2*Math.random()|0))+1;for(a.splice(s);s;)a[--s]={x:320*Math.random()|0,y:320*Math.random()|0};p||(p=n.target.nextSibling.getContext("2d")),y(p,a)},async run(){if(e=!1,!p||!a.length)return;const n=function*(n,s,a){const p=n(s);let t;do{t=p.next(),a=yield new Promise((n=>{const s=t.value;s.done=t.done,setTimeout((()=>{n(s)}),a)}))}while(!t.done)}(s.algorithm,a,t);let o;for(;!(o=n.next(t)).done;){const n=await o.value;if(e)return;y(p,a,n)}},clear(){e=!0,a.splice(0),p&&y(p)},onClick(n){e=!0;const s=n.target;p=s.getContext("2d"),a.push({x:n.pageX-s.offsetLeft,y:n.pageY-s.offsetTop}),y(p,a)}}}};const g=p("br",null,null,-1),w=p("input",{type:"number",min:"1",step:"3"},null,-1),x=p("br",null,null,-1);h.render=function(n,e,o,l,c,r){return s(),a("div",{class:t(l.STYLE.wrap)},[g,p("i",{onClick:e[0]||(e[0]=(...n)=>l.run&&l.run(...n))},"生成最小凸包"),p("i",{onClick:e[1]||(e[1]=(...n)=>l.clear&&l.clear(...n))},"重置"),p("i",{onClick:e[2]||(e[2]=(...n)=>l.down&&l.down(...n))},"加速"),p("i",{onClick:e[3]||(e[3]=(...n)=>l.up&&l.up(...n))},"减速"),w,p("i",{onClick:e[4]||(e[4]=(...n)=>l.random&&l.random(...n))},"生成随机点"),p("canvas",{width:"320",height:"320",onClick:e[5]||(e[5]=(...n)=>l.onClick&&l.onClick(...n))}),x],2)};const f=(n,s)=>n===s||n.x===s.x&&n.y===s.y;function v(n,s,a){let p=n.length;if(a<p>>1)for(n.unshift(n[0]),p=1;p<=a;)n[p]=n[++p];else for(;p>a;)n[p]=n[--p];n[a]=s}function P(n,s,a){let p,t=0,e=s.length-1;for(;t<=e;)p=t+e>>1,a(s[p],n)?e=p-1:t=p+1;v(s,n,t)}function*_(n,s,a){let p=n.length;v(n,s,a),yield n.concat(n[0]);let t,e=a?a-1:p;const o=n[a];let l,c=n[e];for(;c!==o&&(t=e?e-1:p,l=n[t],!((c.x-o.x)*(l.y-o.y)<=(l.x-o.x)*(c.y-o.y)));)n.splice(e,1),p--,a&&a--,e=a?a-1:p,c=n[e],yield n.concat(n[0]);const r=c;for(e=a===p?0:a+1,c=n[e];c!==o&&c!==r&&(t=e===p?0:e+1,l=n[t],!((c.x-o.x)*(l.y-o.y)>=(l.x-o.x)*(c.y-o.y)));)n.splice(e,1),p--,e=e===p?0:e,c=n[e],yield n.concat(n[0]);return p}var A={components:{Show:k,Play:h},methods:{exhaust:function*(n){const s=n.length;if(s<4)return n;const a=[];let p=s;for(;p;){const t=n[--p],{x:e,y:o}=t;let l=p;for(;l;){const c=n[--l],r=c.x-e,u=c.y-o;let i=null,k=s;for(;k;){if(--k===p||k===l)continue;const s=n[k];yield a.concat([[t,c,s]]);const m=r*(s.y-o)>(s.x-e)*u;if(null===i)i=m;else if(m!==i){i=null;break}}null!==i&&(a.push([t,c]),yield a)}}return a},divide:u,jarvis:function*(n){const s=n.length;if(s<4)return n;let a,p,t=s;for(;t;)p=n[--t],(!a||p.x<a.x||p.x===a.x&&p.y<a.y)&&(a=p);const e=[a];let o,l,c,r,u,i,k=0;for(t=s;t;)if(p=n[--t],o=e[k],!f(p,o)){for(e.push(p),k++,l=o.x,c=o.y,r=p.x-l,u=p.y-c,i=s;i;)p=n[--i],yield e.concat(p),r*(p.y-c)<(p.x-l)*u&&(e[k]=p,r=p.x-l,u=p.y-c);if(f(e[k],a)){e.pop();break}}return e},graham:function*(n){let s,a,p=n.length;if(p<4)return n;for(;p;)a=n[--p],(!s||a.x<s.x||a.x===s.x&&a.y<s.y)&&(s=a);const t=[s];let e,o,l=1;for(n=function(n,s){const a=[],p=new WeakMap,t=n=>{let a=p.get(n);if(!a){const t=((s.x-n.x)**2+(s.y-n.y)**2)**.5;a=[(n.y-s.y)/t,t],p.set(n,a)}return a},e=(n,s)=>{const a=t(n),p=t(s);return a[0]===p[0]?a[1]<p[1]:a[0]<p[0]};let o=n.length;for(;o;)(l=n[--o])===(c=s)||l.x===c.x&&l.y===c.y||P(n[o],a,e);var l,c;return a}(n,s),p=n.length,p&&t.push(n[--p]),yield t;p;)a=n[p-1],yield t.concat(a),e=t[l-1],o=t[l],(o.x-e.x)*(a.y-e.y)<(a.x-e.x)*(o.y-e.y)?(t.pop(),l--):(t.push(a),l++,p--);return t},melkman:function*(n){let s=n.length;if(s<4)return n;const a=[n[--s]];let p,t,e,o,l=0;for(;s;)if(e=n[--s],t=a[l],(c=e)!==(r=t)&&(c.x!==r.x||c.y!==r.y))if(yield a.concat(e,a[0]),p=a[l-1],p){if(o=(t.x-p.x)*(e.y-p.y)-(e.x-p.x)*(t.y-p.y),o){o>0?a.push(e):(a[2]=a[1],a[1]=e),l++;break}e.x<p.x&&e.x<t.x||e.y<p.y&&e.y<t.y?a[p.x<t.x||p.y<t.y?l-1:l]=e:(e.x>p.x&&e.x>t.x||e.y>p.y&&e.y>t.y)&&(a[p.x>t.x||p.y>t.y?l-1:l]=e)}else a.push(e),l++;var c,r;let u,i;for(;s;)for(e=n[--s],yield a.concat(e,a[0]),u=0,i=l+1;i--;u=i)if(p=a[u],t=a[i],(t.x-p.x)*(e.y-p.y)>=(e.x-p.x)*(t.y-p.y)){l=yield*_(a,e,u);break}return a}}};const M='{"title":"最小凸包","description":"","frontmatter":{"title":"最小凸包","index":3},"headers":[{"level":2,"title":"问题描述","slug":"问题描述"},{"level":2,"title":"演示","slug":"演示"},{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"方法介绍","slug":"方法介绍"},{"level":3,"title":"穷举法 (O(n))","slug":"穷举法-o-n3"},{"level":3,"title":"分治法 (快包 O(n㏒n))","slug":"分治法-快包-o-n㏒n"},{"level":3,"title":"Jarvis 步进法 (O(nH))","slug":"jarvis-步进法-o-nh"},{"level":3,"title":"Graham 扫描法 (O(n㏒n)) [^GrahamScan]","slug":"graham-扫描法-o-n㏒n"},{"level":3,"title":"Melkman 算法 (O(n))","slug":"melkman-算法-o-n"},{"level":2,"title":"升维","slug":"升维"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"blog/algorithm/melkman.md","lastUpdated":1630342879545}',T=l('<p><em>2021-06-18</em></p><h2 id="问题描述"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h2><div class="warning custom-block"><p class="custom-block-title">求点集的最小凸包</p><p>平面上有3个及以上的点, 求这些点的<strong>最小外接凸多边形</strong>(凸包)</p></div><h2 id="演示"><a class="header-anchor" href="#演示" aria-hidden="true">#</a> 演示</h2>',4),V=l('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p><a href="./pinp.html#凸多边形">参考链接</a></p><h2 id="方法介绍"><a class="header-anchor" href="#方法介绍" aria-hidden="true">#</a> 方法介绍</h2><h3 id="穷举法-o-n3"><a class="header-anchor" href="#穷举法-o-n3" aria-hidden="true">#</a> 穷举法 (O(n<sup>3</sup>))</h3><p>穷举法试图枚举出所有可能, 并从中找到满足要求的情况. 所以重点是找到凸包顶点的充要条件, 这里判断的依据是:</p>',5),z=p("blockquote",null,[p("p",null,[c("若"),p("strong",null,"AB"),c("之外的点都在直线"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("mi",null,"A"),p("mi",null,"B")]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{AB}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.8833300000000001em","vertical-align":"0em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.8833300000000001em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"A"),p("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])]),p("span",{style:{top:"-3.80333em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),c("的"),p("strong",null,"同一侧"),c(", 则点"),p("strong",null,"A"),c("和点"),p("strong",null,"B"),c("都是凸包的顶点")])],-1),E=p("p",null,"计算的步骤为:",-1),S=p("ol",null,[p("li",null,[c("从点集里取出一点"),p("strong",null,"A"),c(", 与剩下的点"),p("strong",null,"B"),c("依次连接, 得到一条直线"),p("strong",null,"L"),c("("),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("mi",null,"A"),p("mi",null,"B")]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{AB}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.8833300000000001em","vertical-align":"0em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.8833300000000001em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"A"),p("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])]),p("span",{style:{top:"-3.80333em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),c(") (共 "),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mstyle",{scriptlevel:"0",displaystyle:"true"},[p("munderover",null,[p("mo",null,"∑"),p("mrow",null,[p("mi",null,"i"),p("mo",null,"="),p("mn",null,"1")]),p("mrow",null,[p("mi",null,"n"),p("mo",null,"−"),p("mn",null,"1")])]),p("mi",null,"i")])]),p("annotation",{encoding:"application/x-tex"},"\\displaystyle\\sum_{i=1}^{n-1}{i}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"3.0787820000000004em","vertical-align":"-1.277669em"}}),p("span",{class:"mop op-limits"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"1.8011130000000004em"}},[p("span",{style:{top:"-1.872331em","margin-left":"0em"}},[p("span",{class:"pstrut",style:{height:"3.05em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},[p("span",{class:"mord mathnormal mtight"},"i"),p("span",{class:"mrel mtight"},"="),p("span",{class:"mord mtight"},"1")])])]),p("span",{style:{top:"-3.050005em"}},[p("span",{class:"pstrut",style:{height:"3.05em"}}),p("span",null,[p("span",{class:"mop op-symbol large-op"},"∑")])]),p("span",{style:{top:"-4.300005em","margin-left":"0em"}},[p("span",{class:"pstrut",style:{height:"3.05em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},[p("span",{class:"mord mathnormal mtight"},"n"),p("span",{class:"mbin mtight"},"−"),p("span",{class:"mord mtight"},"1")])])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"1.277669em"}},[p("span")])])])]),p("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"i")])])])]),c(" 条)")]),p("li",null,[c("判断其他点(共 "),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mi",null,"n"),p("mo",null,"−"),p("mn",null,"2")]),p("annotation",{encoding:"application/x-tex"},"n - 2")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),p("span",{class:"mord mathnormal"},"n"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),p("span",{class:"mbin"},"−"),p("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),p("span",{class:"mord"},"2")])])]),c(" 个)是否都在直线"),p("strong",null,"L"),c("的同一侧, 是则将"),p("strong",null,"L"),c("加入边数组")]),p("li",null,[c("[按需] 将边数组转换为点数组 (将边首尾相连并展平"),p("code",null,"O(n㏒n)"),c(")")])],-1),C=p("h4",{id:"演示-1"},[p("a",{class:"header-anchor",href:"#演示-1","aria-hidden":"true"},"#"),c(" 演示")],-1),I=l('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token comment">/** 穷举法求最小凸包 */</span>\n<span class="token keyword">const</span> exhaust<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">size</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> p0 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> p0\n    <span class="token keyword">let</span> j <span class="token operator">=</span> i\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 线段 [p0, p1]</span>\n      <span class="token keyword">const</span> p1 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span>\n\n      <span class="token keyword">const</span> dx <span class="token operator">=</span> p1<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n      <span class="token keyword">const</span> dy <span class="token operator">=</span> p1<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n      <span class="token keyword">let</span> lastTurn<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n\n      <span class="token keyword">let</span> k <span class="token operator">=</span> size\n      <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">===</span> i <span class="token operator">||</span> k <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">continue</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 检查其他点是否在线段所在直线的同一侧</span>\n        <span class="token keyword">const</span> p2 <span class="token operator">=</span> points<span class="token punctuation">[</span>k<span class="token punctuation">]</span>\n\n        <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">const</span> turn <span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>p2<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> turn\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>turn <span class="token operator">!==</span> lastTurn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          lastTurn <span class="token operator">=</span> <span class="token keyword">null</span>\n          <span class="token keyword">break</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTurn <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p0<span class="token punctuation">,</span> p1<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">yield</span> result\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> exhaust\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div></details><h3 id="分治法-快包-o-n㏒n"><a class="header-anchor" href="#分治法-快包-o-n㏒n" aria-hidden="true">#</a> 分治法 (快包 O(n㏒n))</h3><p>也叫快速凸包构造算法(快包), 核心思想(分而治之)为:</p><blockquote><p>划分点集为更小的点集, 直到能解决问题, 然后汇总结果</p></blockquote><p>对于一个点集, 最容易确定是凸包顶点的, 是上下左右<strong>4个极值点(集)</strong>(x/y有相等时取两端参与划分), 剩下的点集暂时无法确定</p><p>基于这4个极值点(集), 可以想到把点集划分为<strong>5个区域</strong>, 很明显在中间的4-8边形内不可能存在凸包顶点, 剩余的<strong>4个区域</strong>(左上角、右上角、左下角、右下角) 可能存在凸包顶点</p><p>这4个区域可以视作新的点集继续划分, 但是问题是: 新的点集的极值点就<strong>不一定</strong>是凸包顶点了(请自己尝试)</p><div style="filter:brightness(0.5);"><p><img alt="划分" data-src="melkman/divide.png" loading="lazy" class="lazy"></p></div><p>我们需要用别的方式找到凸包上的点, 很容易证明:</p><blockquote><p><strong>到划分线距离最远</strong>的点一定是凸包上的点</p></blockquote><p><em><sup>划分线即凸包顶点的连线, 比如前面提到的极值点, 这里用于将点集进行划分</sup></em></p><p>所以考虑将划分方式改为三角形, 整理下计算的步骤:</p>',12),L=p("ol",null,[p("li",null,[c("找到x极值点"),p("strong",null,"p0"),c("和"),p("strong",null,"p1"),c("(p0.x < p1.x>), 线段"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("msub",null,[p("mi",null,"p"),p("mn",null,"0")]),p("msub",null,[p("mi",null,"p"),p("mn",null,"1")])]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.63056em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"0")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])]),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"1")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])])])]),p("span",{style:{top:"-3.55056em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.19444em"}},[p("span")])])])])])])]),c("将点集划分为两个部分, 称作"),p("strong",null,"上包"),c("(逆时针方向)和"),p("strong",null,"下包"),c("(顺时针方向)")]),p("li",null,[c("在"),p("strong",null,"上包"),c("中找到离直线"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("msub",null,[p("mi",null,"p"),p("mn",null,"0")]),p("msub",null,[p("mi",null,"p"),p("mn",null,"1")])]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_1}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.63056em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"0")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])]),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"1")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])])])]),p("span",{style:{top:"-3.55056em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.19444em"}},[p("span")])])])])])])]),c("最远的点"),p("strong",null,"p2"),c(", 分别使用直线"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("msub",null,[p("mi",null,"p"),p("mn",null,"0")]),p("msub",null,[p("mi",null,"p"),p("mn",null,"2")])]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{p_0p_2}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.63056em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"0")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])]),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"2")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])])])]),p("span",{style:{top:"-3.55056em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.19444em"}},[p("span")])])])])])])]),c(" 和 直线"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mover",{accent:"true"},[p("mrow",null,[p("msub",null,[p("mi",null,"p"),p("mn",null,"2")]),p("msub",null,[p("mi",null,"p"),p("mn",null,"1")])]),p("mo",{stretchy:"true"},"‾")])]),p("annotation",{encoding:"application/x-tex"},"\\overline{p_2p_1}")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.825em","vertical-align":"-0.19444em"}}),p("span",{class:"mord overline"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.63056em"}},[p("span",{style:{top:"-3em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"mord"},[p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"2")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])]),p("span",{class:"mord"},[p("span",{class:"mord mathnormal"},"p"),p("span",{class:"msupsub"},[p("span",{class:"vlist-t vlist-t2"},[p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[p("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[p("span",{class:"pstrut",style:{height:"2.7em"}}),p("span",{class:"sizing reset-size6 size3 mtight"},[p("span",{class:"mord mtight"},"1")])])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.15em"}},[p("span")])])])])])])]),p("span",{style:{top:"-3.55056em"}},[p("span",{class:"pstrut",style:{height:"3em"}}),p("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),p("span",{class:"vlist-s"},"​")]),p("span",{class:"vlist-r"},[p("span",{class:"vlist",style:{height:"0.19444em"}},[p("span")])])])])])])]),c(" 继续划分出新的上包"),p("strong",null,"A"),c("(逆时针方向, 下包一定在多边形内部了) "),p("ol",null,[p("li",null,[c("若"),p("strong",null,"A"),c("为空, 不再继续划分")]),p("li",null,[p("strong",null,"A"),c("不为空则对"),p("strong",null,"A"),c("按照步骤"),p("strong",null,"2"),c("进行划分")])])]),p("li",null,[c("对"),p("strong",null,"下包"),c("也做与"),p("strong",null,"第2步"),c("相似的操作")])],-1),j=p("h4",{id:"演示-2"},[p("a",{class:"header-anchor",href:"#演示-2","aria-hidden":"true"},"#"),c(" 演示")],-1),D=l('<details><summary>推导及代码实现</summary><p>使用<a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">前置知识</a>中介绍过的通过叉积的正负判断点在线段的顺时针/逆时针方向的方法, 叉积的绝对值表示两向量围成的<strong>平行四边形面积</strong>, 距离最远的点一定可以围出<strong>最大的面积</strong>(底相等, 高越大面积越大), 据此可以划分上下包及找到距离划分线最远的点</p><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>\n  points<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  start<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  middle<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  end<span class="token operator">:</span> Point<span class="token punctuation">,</span>\n  result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 需要画出来 故</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Generator<span class="token operator">&lt;</span>Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 按顺时针算使叉积为正</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> startX<span class="token punctuation">,</span> y<span class="token operator">:</span> startY <span class="token punctuation">}</span> <span class="token operator">=</span> start\n  <span class="token keyword">const</span> startMiddleDx <span class="token operator">=</span> middle<span class="token punctuation">.</span>x <span class="token operator">-</span> startX\n  <span class="token keyword">const</span> startMiddleDy <span class="token operator">=</span> middle<span class="token punctuation">.</span>y <span class="token operator">-</span> startY\n  <span class="token keyword">const</span> startMiddlePoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// middleStart顺时针方向 点集</span>\n  <span class="token keyword">let</span> startMiddleMax <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// middleStart顺时针方向 最大距离 +</span>\n  <span class="token keyword">let</span> startMiddle<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// middleStart顺时针方向 距离最远点</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> middleX<span class="token punctuation">,</span> y<span class="token operator">:</span> middleY <span class="token punctuation">}</span> <span class="token operator">=</span> middle\n  <span class="token keyword">const</span> middleEndDx <span class="token operator">=</span> end<span class="token punctuation">.</span>x <span class="token operator">-</span> middleX\n  <span class="token keyword">const</span> middleEndDy <span class="token operator">=</span> end<span class="token punctuation">.</span>y <span class="token operator">-</span> middleY\n  <span class="token keyword">const</span> middleEndPoints<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// endMiddle顺时针方向 点集</span>\n  <span class="token keyword">let</span> middleEndMax <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// endMiddle顺时针方向 最大距离 +</span>\n  <span class="token keyword">let</span> middleEnd<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// endMiddle顺时针方向 距离最远点</span>\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> area<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    area <span class="token operator">=</span> startMiddleDx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> startY<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> startX<span class="token punctuation">)</span> <span class="token operator">*</span> startMiddleDy\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n      startMiddlePoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> startMiddleMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        startMiddleMax <span class="token operator">=</span> area\n        startMiddle <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      area <span class="token operator">=</span> middleEndDx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> middleY<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> middleX<span class="token punctuation">)</span> <span class="token operator">*</span> middleEndDy\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> point<span class="token punctuation">)</span>\n        middleEndPoints<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> middleEndMax<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          middleEndMax <span class="token operator">=</span> area\n          middleEnd <span class="token operator">=</span> point\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>startMiddle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>startMiddlePoints<span class="token punctuation">,</span> start<span class="token punctuation">,</span> startMiddle<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>middleEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>middleEndPoints<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> middleEnd<span class="token punctuation">,</span> end<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** 分治法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">const</span> divide<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> left<span class="token operator">!</span><span class="token operator">:</span> Point\n  <span class="token keyword">let</span> right<span class="token operator">!</span><span class="token operator">:</span> Point\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> left<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      left <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>right <span class="token operator">||</span> right<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      right <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> left\n  <span class="token keyword">const</span> dx <span class="token operator">=</span> right<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n  <span class="token keyword">const</span> dy <span class="token operator">=</span> right<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 上包最大距离 +</span>\n  <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 下包最大距离 -</span>\n\n  <span class="token keyword">let</span> top<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// 上包距离最远点</span>\n  <span class="token keyword">let</span> bottom<span class="token operator">!</span><span class="token operator">:</span> Point <span class="token comment">// 下包距离最远点</span>\n\n  <span class="token keyword">const</span> up<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 上包点集</span>\n  <span class="token keyword">const</span> down<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 下包点集</span>\n\n  <span class="token keyword">let</span> area<span class="token operator">:</span> <span class="token builtin">number</span>\n  i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">yield</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> point<span class="token punctuation">]</span>\n    area <span class="token operator">=</span> dx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      up<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        max <span class="token operator">=</span> area\n        top <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      down<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        min <span class="token operator">=</span> area\n        bottom <span class="token operator">=</span> point\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>top<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">===</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">// 顺时针</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">cut</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> divide\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br></div></div></details><h3 id="jarvis-步进法-o-nh"><a class="header-anchor" href="#jarvis-步进法-o-nh" aria-hidden="true">#</a> Jarvis 步进法 (O(nH))</h3><p>把点集想象成木板上钉的若干钉子, 要构造出最小凸包, 我们可以借助一根绳子, 先找到一颗最外面的钉子, 然后顺时针或逆时针绕着木板行走, 每次绳子将和一颗或多颗钉子同时接触, 走一圈下来即可围出最小凸包</p><p>计算的步骤为:</p><ol><li>左上、右上、左下、右下四个角处的点一定是凸包上的点, 因此选任意一个用来作为起点</li><li>依次从剩下的点里取出一个点, 按照顺时针或逆时针方向, 夹角最接近平角的点(存在多个时任取一个就行)即为凸包顶点</li></ol><p>优化一下:</p><ol><li>先找到左上角的点入栈, 选取顺时针方向遍历, 结果为点数组(栈), 先将下一个非起点的点入栈</li><li>遍历全部点 <ol><li>若一个点<strong>A</strong>在栈顶两点向量的逆时针方向则用点<strong>A</strong>替换栈顶继续下一个点</li><li>若完成本轮遍历时得到的顶点为起点, 则结束, 否则入栈继续下一轮</li></ol></li></ol><h4 id="演示-3"><a class="header-anchor" href="#演示-3" aria-hidden="true">#</a> 演示</h4>',8),q=l('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">isPointEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">===</span> b <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">===</span> b<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>y <span class="token operator">===</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n\n<span class="token comment">/** jarvis步进法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">const</span> jarvis<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> size <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> start<span class="token operator">!</span><span class="token operator">:</span> Point\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start <span class="token operator">||</span> point<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> start<span class="token punctuation">.</span>x <span class="token operator">||</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">===</span> start<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      start <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 栈顶</span>\n  <span class="token keyword">let</span> startPoint<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> y<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> dx<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> dy<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> j<span class="token operator">:</span> <span class="token builtin">number</span>\n  i <span class="token operator">=</span> size\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    startPoint <span class="token operator">=</span> result<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPointEqual</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> startPoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n    pointer<span class="token operator">++</span>\n\n    x <span class="token operator">=</span> startPoint<span class="token punctuation">.</span>x\n    y <span class="token operator">=</span> startPoint<span class="token punctuation">.</span>y\n    dx <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n    dy <span class="token operator">=</span> point<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n\n    j <span class="token operator">=</span> size\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span>\n      <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span> <span class="token operator">=</span> point\n        dx <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> x\n        dy <span class="token operator">=</span> point<span class="token punctuation">.</span>y <span class="token operator">-</span> y\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPointEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> jarvis\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div></details><h3 id="graham-扫描法-o-n㏒n"><a class="header-anchor" href="#graham-扫描法-o-n㏒n" aria-hidden="true">#</a> Graham 扫描法 (O(n㏒n)) <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><p>在<a href="#jarvis-%E6%AD%A5%E8%BF%9B%E6%B3%95-o-nh">Jarvis 步进法</a>中, 我们已经可以顺时针或逆时针地将凸包围出来了, 但是每次都要去遍历所有的点判断其时针方向才能确定一个顶点, 那要是我们按照时针方向去一个个寻找顶点不就只需要遍历一次了么？</p><p>Graham 扫描法就是这个思路, 还是先找到一个起点, 然后剩下的点按照相对起点的时针方向排序, 然后进行连接</p><p>计算的步骤为(左上角起顺时针方向):</p><ol><li>找到左上角点作为起点<strong>O</strong></li><li>将点集按照与起点<strong>O</strong>的幅角(y轴正向)从小到大排序, 幅角相等则按与起点<strong>O</strong>的距离排序(近的在前), 先把第一个点添加进凸包顶点数组末尾</li><li>从排序数组中取出第一个点<strong>A</strong>, 直到数组为空时结束</li><li>从凸包数组取末尾两点得到一条直线<strong>L</strong>, 若点<strong>A</strong>在直线<strong>L</strong>顺时针方向, 则将点<strong>A</strong>加入凸包数组, 继续执行第<strong>3</strong>步; 否则移除凸包数组末尾点, 继续执行第<strong>4</strong>步</li></ol><h4 id="演示-4"><a class="header-anchor" href="#演示-4" aria-hidden="true">#</a> 演示</h4>',7),O=p("details",null,[p("summary",null,"推导及代码实现"),p("p",null,[c("其他点与起点的幅角范围为 [0, 180°], 使用"),p("span",{class:"katex"},[p("span",{class:"katex-mathml"},[p("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[p("semantics",null,[p("mrow",null,[p("mi",null,"cos"),p("mo",null,"⁡")]),p("annotation",{encoding:"application/x-tex"},"\\cos")])])]),p("span",{class:"katex-html","aria-hidden":"true"},[p("span",{class:"base"},[p("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),p("span",{class:"mop"},"cos")])])]),c("函数即可排序幅角, 同时可计算出距离")]),p("div",{class:"language-ts line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token keyword"},"import"),c(),p("span",{class:"token keyword"},"type"),c(),p("span",{class:"token punctuation"},"{"),c(" Point"),p("span",{class:"token punctuation"},","),c(" Algorithm "),p("span",{class:"token punctuation"},"}"),c(),p("span",{class:"token keyword"},"from"),c(),p("span",{class:"token string"},"'./types'"),c("\n\n"),p("span",{class:"token keyword"},"const"),c(),p("span",{class:"token function-variable function"},"isPointEqual"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"("),c("a"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},","),c(" b"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(" a "),p("span",{class:"token operator"},"==="),c(" b "),p("span",{class:"token operator"},"||"),c(),p("span",{class:"token punctuation"},"("),c("a"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"==="),c(" b"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"&&"),c(" a"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"==="),c(" b"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),c("\n\n"),p("span",{class:"token comment"},"/** 将 point 插入到 points 的 position 下标 (最多挪动一半元素)\n * @param points\n * @param point\n * @param position 整数范围: [0, points.length)\n */"),c("\n"),p("span",{class:"token keyword"},"export"),c(),p("span",{class:"token keyword"},"function"),c(),p("span",{class:"token function"},"insertAt"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(" point"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},","),c(" position"),p("span",{class:"token operator"},":"),c(),p("span",{class:"token builtin"},"number"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" pointer "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"."),c("length\n  "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("position "),p("span",{class:"token operator"},"<"),c(" pointer "),p("span",{class:"token operator"},">>"),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    points"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"unshift"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),c("\n    pointer "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),c("\n    "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("pointer "),p("span",{class:"token operator"},"<="),c(" position"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      points"),p("span",{class:"token punctuation"},"["),c("pointer"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token operator"},"++"),c("pointer"),p("span",{class:"token punctuation"},"]"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n  "),p("span",{class:"token punctuation"},"}"),c(),p("span",{class:"token keyword"},"else"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("pointer "),p("span",{class:"token operator"},">"),c(" position"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      points"),p("span",{class:"token punctuation"},"["),c("pointer"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token operator"},"--"),c("pointer"),p("span",{class:"token punctuation"},"]"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n  points"),p("span",{class:"token punctuation"},"["),c("position"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(" point\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"/** [稳定] 将 point 插入 points\n * @param point\n * @param points\n * @param compare 比较方法 返回 true: element > point\n */"),c("\n"),p("span",{class:"token keyword"},"function"),c(),p("span",{class:"token function"},"insert"),p("span",{class:"token punctuation"},"("),c("\n  point"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},","),c("\n  points"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c("\n  "),p("span",{class:"token function-variable function"},"compare"),p("span",{class:"token operator"},":"),c(),p("span",{class:"token punctuation"},"("),c("element"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},","),c(" point"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(),p("span",{class:"token builtin"},"boolean"),c("\n"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token comment"},"// 二分查找 [low, high]"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" low "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"0"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" mid"),p("span",{class:"token operator"},":"),c(),p("span",{class:"token builtin"},"number"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" high "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"."),c("length "),p("span",{class:"token operator"},"-"),c(),p("span",{class:"token number"},"1"),c("\n  "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("low "),p("span",{class:"token operator"},"<="),c(" high"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    mid "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"("),c("low "),p("span",{class:"token operator"},"+"),c(" high"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},">>"),c(),p("span",{class:"token number"},"1"),c(),p("span",{class:"token comment"},"// 除2并向下取整"),c("\n    "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"compare"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},"["),c("mid"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(" point"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      high "),p("span",{class:"token operator"},"="),c(" mid "),p("span",{class:"token operator"},"-"),c(),p("span",{class:"token number"},"1"),c("\n    "),p("span",{class:"token punctuation"},"}"),c(),p("span",{class:"token keyword"},"else"),c(),p("span",{class:"token punctuation"},"{"),c("\n      low "),p("span",{class:"token operator"},"="),c(" mid "),p("span",{class:"token operator"},"+"),c(),p("span",{class:"token number"},"1"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token comment"},"// points.splice(low, 0, point)"),c("\n  "),p("span",{class:"token function"},"insertAt"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},","),c(" point"),p("span",{class:"token punctuation"},","),c(" low"),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n"),p("span",{class:"token comment"},"/** 将点集按与 start→x轴正向 的幅角 排序 (幅角相等按距离)\n * @param points\n * @param start\n * @returns\n */"),c("\n"),p("span",{class:"token keyword"},"function"),c(),p("span",{class:"token function"},"sortPoints"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(" start"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token keyword"},"const"),c(" result"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),c("\n\n  "),p("span",{class:"token comment"},"/** 缓存点与起点的角度、距离 */"),c("\n  "),p("span",{class:"token keyword"},"const"),c(" cache "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token keyword"},"new"),c(),p("span",{class:"token class-name"},[c("WeakMap"),p("span",{class:"token operator"},"<"),c("Point"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token punctuation"},"["),p("span",{class:"token comment"},"/** angle */"),c(),p("span",{class:"token builtin"},"number"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token comment"},"/** distance */"),c(),p("span",{class:"token builtin"},"number"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token operator"},">")]),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),c("\n  "),p("span",{class:"token keyword"},"const"),c(),p("span",{class:"token function-variable function"},"getInfo"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token keyword"},"let"),c(" info "),p("span",{class:"token operator"},"="),c(" cache"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"get"),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"!"),c("info"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      "),p("span",{class:"token keyword"},"const"),c(" distance "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),c("start"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"-"),c(" point"),p("span",{class:"token punctuation"},"."),c("x"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"**"),c(),p("span",{class:"token number"},"2"),c(),p("span",{class:"token operator"},"+"),c(),p("span",{class:"token punctuation"},"("),c("start"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"-"),c(" point"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"**"),c(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"**"),c(),p("span",{class:"token number"},"0.5"),c("\n      info "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"-"),c(" start"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"/"),c(" distance"),p("span",{class:"token punctuation"},","),c(" distance"),p("span",{class:"token punctuation"},"]"),c("\n      cache"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"set"),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},","),c(" info"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n\n    "),p("span",{class:"token keyword"},"return"),c(" info\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"const"),c(),p("span",{class:"token function-variable function"},"compare"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"("),c("element"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},","),c(" point"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token keyword"},"const"),c(" elementInfo "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"getInfo"),p("span",{class:"token punctuation"},"("),c("element"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token keyword"},"const"),c(" pointInfo "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"getInfo"),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},")"),c("\n\n    "),p("span",{class:"token keyword"},"return"),c(" elementInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"==="),c(" pointInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),c("\n      "),p("span",{class:"token operator"},"?"),c(" elementInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"<"),c(" pointInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),c("\n      "),p("span",{class:"token operator"},":"),c(" elementInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"<"),c(" pointInfo"),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},"]"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"let"),c(" i "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"."),c("length\n  "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("i"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token function"},"isPointEqual"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token operator"},"--"),c("i"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(" start"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"||"),c(),p("span",{class:"token function"},"insert"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},"["),c("i"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),c(" result"),p("span",{class:"token punctuation"},","),c(" compare"),p("span",{class:"token punctuation"},")"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" result\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token comment"},"/** graham扫描法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/"),c("\n"),p("span",{class:"token keyword"},"const"),c(" graham"),p("span",{class:"token operator"},":"),c(),p("span",{class:"token function-variable function"},"Algorithm"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token keyword"},"function"),p("span",{class:"token operator"},"*"),c(),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" i "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"."),c("length\n  "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("i "),p("span",{class:"token operator"},"<"),c(),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token keyword"},"return"),c(" points\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"let"),c(" start"),p("span",{class:"token operator"},"!"),p("span",{class:"token operator"},":"),c(" Point\n\n  "),p("span",{class:"token keyword"},"let"),c(" point"),p("span",{class:"token operator"},":"),c(" Point\n  "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("i"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    point "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token operator"},"--"),c("i"),p("span",{class:"token punctuation"},"]"),c("\n\n    "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"!"),c("start "),p("span",{class:"token operator"},"||"),c(" point"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"<"),c(" start"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"||"),c(),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"==="),c(" start"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"&&"),c(" point"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"<"),c(" start"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      start "),p("span",{class:"token operator"},"="),c(" point\n    "),p("span",{class:"token punctuation"},"}"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"const"),c(" result"),p("span",{class:"token operator"},":"),c(" Point"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},"]"),c(),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"["),c("start"),p("span",{class:"token punctuation"},"]"),c("\n\n  "),p("span",{class:"token keyword"},"let"),c(" pointer "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token number"},"1"),c(),p("span",{class:"token comment"},"// 栈顶"),c("\n  "),p("span",{class:"token keyword"},"let"),c(" startPoint"),p("span",{class:"token operator"},":"),c(" Point\n  "),p("span",{class:"token keyword"},"let"),c(" endPoint"),p("span",{class:"token operator"},":"),c(" Point\n  points "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"sortPoints"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},","),c(" start"),p("span",{class:"token punctuation"},")"),c("\n  i "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"."),c("length\n  i "),p("span",{class:"token operator"},"&&"),c(" result"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"push"),p("span",{class:"token punctuation"},"("),c("points"),p("span",{class:"token punctuation"},"["),p("span",{class:"token operator"},"--"),c("i"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),c("\n  "),p("span",{class:"token keyword"},"yield"),c(" result\n  "),p("span",{class:"token keyword"},"while"),c(),p("span",{class:"token punctuation"},"("),c("i"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    point "),p("span",{class:"token operator"},"="),c(" points"),p("span",{class:"token punctuation"},"["),c("i "),p("span",{class:"token operator"},"-"),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),c("\n    "),p("span",{class:"token keyword"},"yield"),c(" result"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"concat"),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},")"),c("\n\n    startPoint "),p("span",{class:"token operator"},"="),c(" result"),p("span",{class:"token punctuation"},"["),c("pointer "),p("span",{class:"token operator"},"-"),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},"]"),c("\n    endPoint "),p("span",{class:"token operator"},"="),c(" result"),p("span",{class:"token punctuation"},"["),c("pointer"),p("span",{class:"token punctuation"},"]"),c("\n\n    "),p("span",{class:"token keyword"},"if"),c(),p("span",{class:"token punctuation"},"("),c("\n      "),p("span",{class:"token punctuation"},"("),c("endPoint"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"-"),c(" startPoint"),p("span",{class:"token punctuation"},"."),c("x"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"*"),c(),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"-"),c(" startPoint"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"<"),c("\n      "),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},"."),c("x "),p("span",{class:"token operator"},"-"),c(" startPoint"),p("span",{class:"token punctuation"},"."),c("x"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"*"),c(),p("span",{class:"token punctuation"},"("),c("endPoint"),p("span",{class:"token punctuation"},"."),c("y "),p("span",{class:"token operator"},"-"),c(" startPoint"),p("span",{class:"token punctuation"},"."),c("y"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n      result"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"pop"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),c("\n      pointer"),p("span",{class:"token operator"},"--"),c("\n    "),p("span",{class:"token punctuation"},"}"),c(),p("span",{class:"token keyword"},"else"),c(),p("span",{class:"token punctuation"},"{"),c("\n      result"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"push"),p("span",{class:"token punctuation"},"("),c("point"),p("span",{class:"token punctuation"},")"),c("\n      pointer"),p("span",{class:"token operator"},"++"),c("\n      i"),p("span",{class:"token operator"},"--"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n  "),p("span",{class:"token punctuation"},"}"),c("\n\n  "),p("span",{class:"token keyword"},"return"),c(" result\n"),p("span",{class:"token punctuation"},"}"),c("\n\n"),p("span",{class:"token keyword"},"export"),c(),p("span",{class:"token keyword"},"default"),c(" graham\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br"),p("span",{class:"line-number"},"11"),p("br"),p("span",{class:"line-number"},"12"),p("br"),p("span",{class:"line-number"},"13"),p("br"),p("span",{class:"line-number"},"14"),p("br"),p("span",{class:"line-number"},"15"),p("br"),p("span",{class:"line-number"},"16"),p("br"),p("span",{class:"line-number"},"17"),p("br"),p("span",{class:"line-number"},"18"),p("br"),p("span",{class:"line-number"},"19"),p("br"),p("span",{class:"line-number"},"20"),p("br"),p("span",{class:"line-number"},"21"),p("br"),p("span",{class:"line-number"},"22"),p("br"),p("span",{class:"line-number"},"23"),p("br"),p("span",{class:"line-number"},"24"),p("br"),p("span",{class:"line-number"},"25"),p("br"),p("span",{class:"line-number"},"26"),p("br"),p("span",{class:"line-number"},"27"),p("br"),p("span",{class:"line-number"},"28"),p("br"),p("span",{class:"line-number"},"29"),p("br"),p("span",{class:"line-number"},"30"),p("br"),p("span",{class:"line-number"},"31"),p("br"),p("span",{class:"line-number"},"32"),p("br"),p("span",{class:"line-number"},"33"),p("br"),p("span",{class:"line-number"},"34"),p("br"),p("span",{class:"line-number"},"35"),p("br"),p("span",{class:"line-number"},"36"),p("br"),p("span",{class:"line-number"},"37"),p("br"),p("span",{class:"line-number"},"38"),p("br"),p("span",{class:"line-number"},"39"),p("br"),p("span",{class:"line-number"},"40"),p("br"),p("span",{class:"line-number"},"41"),p("br"),p("span",{class:"line-number"},"42"),p("br"),p("span",{class:"line-number"},"43"),p("br"),p("span",{class:"line-number"},"44"),p("br"),p("span",{class:"line-number"},"45"),p("br"),p("span",{class:"line-number"},"46"),p("br"),p("span",{class:"line-number"},"47"),p("br"),p("span",{class:"line-number"},"48"),p("br"),p("span",{class:"line-number"},"49"),p("br"),p("span",{class:"line-number"},"50"),p("br"),p("span",{class:"line-number"},"51"),p("br"),p("span",{class:"line-number"},"52"),p("br"),p("span",{class:"line-number"},"53"),p("br"),p("span",{class:"line-number"},"54"),p("br"),p("span",{class:"line-number"},"55"),p("br"),p("span",{class:"line-number"},"56"),p("br"),p("span",{class:"line-number"},"57"),p("br"),p("span",{class:"line-number"},"58"),p("br"),p("span",{class:"line-number"},"59"),p("br"),p("span",{class:"line-number"},"60"),p("br"),p("span",{class:"line-number"},"61"),p("br"),p("span",{class:"line-number"},"62"),p("br"),p("span",{class:"line-number"},"63"),p("br"),p("span",{class:"line-number"},"64"),p("br"),p("span",{class:"line-number"},"65"),p("br"),p("span",{class:"line-number"},"66"),p("br"),p("span",{class:"line-number"},"67"),p("br"),p("span",{class:"line-number"},"68"),p("br"),p("span",{class:"line-number"},"69"),p("br"),p("span",{class:"line-number"},"70"),p("br"),p("span",{class:"line-number"},"71"),p("br"),p("span",{class:"line-number"},"72"),p("br"),p("span",{class:"line-number"},"73"),p("br"),p("span",{class:"line-number"},"74"),p("br"),p("span",{class:"line-number"},"75"),p("br"),p("span",{class:"line-number"},"76"),p("br"),p("span",{class:"line-number"},"77"),p("br"),p("span",{class:"line-number"},"78"),p("br"),p("span",{class:"line-number"},"79"),p("br"),p("span",{class:"line-number"},"80"),p("br"),p("span",{class:"line-number"},"81"),p("br"),p("span",{class:"line-number"},"82"),p("br"),p("span",{class:"line-number"},"83"),p("br"),p("span",{class:"line-number"},"84"),p("br"),p("span",{class:"line-number"},"85"),p("br"),p("span",{class:"line-number"},"86"),p("br"),p("span",{class:"line-number"},"87"),p("br"),p("span",{class:"line-number"},"88"),p("br"),p("span",{class:"line-number"},"89"),p("br"),p("span",{class:"line-number"},"90"),p("br"),p("span",{class:"line-number"},"91"),p("br"),p("span",{class:"line-number"},"92"),p("br"),p("span",{class:"line-number"},"93"),p("br"),p("span",{class:"line-number"},"94"),p("br"),p("span",{class:"line-number"},"95"),p("br"),p("span",{class:"line-number"},"96"),p("br"),p("span",{class:"line-number"},"97"),p("br"),p("span",{class:"line-number"},"98"),p("br"),p("span",{class:"line-number"},"99"),p("br"),p("span",{class:"line-number"},"100"),p("br"),p("span",{class:"line-number"},"101"),p("br"),p("span",{class:"line-number"},"102"),p("br"),p("span",{class:"line-number"},"103"),p("br"),p("span",{class:"line-number"},"104"),p("br"),p("span",{class:"line-number"},"105"),p("br"),p("span",{class:"line-number"},"106"),p("br"),p("span",{class:"line-number"},"107"),p("br"),p("span",{class:"line-number"},"108"),p("br"),p("span",{class:"line-number"},"109"),p("br"),p("span",{class:"line-number"},"110"),p("br"),p("span",{class:"line-number"},"111"),p("br"),p("span",{class:"line-number"},"112"),p("br"),p("span",{class:"line-number"},"113"),p("br"),p("span",{class:"line-number"},"114"),p("br"),p("span",{class:"line-number"},"115"),p("br"),p("span",{class:"line-number"},"116"),p("br"),p("span",{class:"line-number"},"117"),p("br"),p("span",{class:"line-number"},"118"),p("br"),p("span",{class:"line-number"},"119"),p("br"),p("span",{class:"line-number"},"120"),p("br"),p("span",{class:"line-number"},"121"),p("br"),p("span",{class:"line-number"},"122"),p("br"),p("span",{class:"line-number"},"123"),p("br"),p("span",{class:"line-number"},"124"),p("br"),p("span",{class:"line-number"},"125"),p("br"),p("span",{class:"line-number"},"126"),p("br"),p("span",{class:"line-number"},"127"),p("br"),p("span",{class:"line-number"},"128"),p("br"),p("span",{class:"line-number"},"129"),p("br"),p("span",{class:"line-number"},"130"),p("br"),p("span",{class:"line-number"},"131"),p("br"),p("span",{class:"line-number"},"132"),p("br"),p("span",{class:"line-number"},"133"),p("br"),p("span",{class:"line-number"},"134"),p("br"),p("span",{class:"line-number"},"135"),p("br"),p("span",{class:"line-number"},"136"),p("br"),p("span",{class:"line-number"},"137"),p("br"),p("span",{class:"line-number"},"138"),p("br"),p("span",{class:"line-number"},"139"),p("br"),p("span",{class:"line-number"},"140"),p("br"),p("span",{class:"line-number"},"141"),p("br"),p("span",{class:"line-number"},"142"),p("br"),p("span",{class:"line-number"},"143"),p("br"),p("span",{class:"line-number"},"144"),p("br"),p("span",{class:"line-number"},"145"),p("br")])])],-1),B=l('<h3 id="melkman-算法-o-n"><a class="header-anchor" href="#melkman-算法-o-n" aria-hidden="true">#</a> Melkman 算法 (O(n))</h3><p>从<a href="#graham-%E6%89%AB%E6%8F%8F%E6%B3%95-o-n%E3%8F%92n">Graham 扫描法</a>改进而来, 改进的思路是: Graham 扫描法一次只能从一端处理下一个有序点, 若是可以打开合适的位置, 那么任意一点都可以成为&quot;下一个有序点&quot;, 从而使用同样的方式去处理. 因此它也变成了一个在线算法: 在得到一个三角形凸包后, 之后每加入一个点就按上述思路对凸包进行调整. 该算法在输入的点有序时(按照幅角排序), 时间复杂度可达到<code>O(n)</code>, 否则 <code>O(n㏒n)</code></p><p>计算的步骤为:</p><ol><li>先依次取出点, 直到能构造出<strong>顺时针方向的</strong>三角形 (注意可能存在三点共线的情况)</li><li>读取下一点<strong>A</strong>, 顺时针遍历凸包上的边 <ol><li>若点<strong>A</strong>在所有边的<strong>顺时针</strong>方向, 则点<strong>A</strong>在凸包内部, 继续步骤<strong>2</strong></li><li>若点<strong>A</strong>在其中一条边<strong>L</strong>的<strong>逆时针</strong>方向, 则点<strong>A</strong>在凸包外部, 从边<strong>L</strong>处&quot;打开&quot;凸包, 使用与 Graham 扫描法相似的方法(步骤<strong>3</strong>)连接该点, 然后继续步骤<strong>2</strong></li></ol></li></ol><h4 id="演示-5"><a class="header-anchor" href="#演示-5" aria-hidden="true">#</a> 演示</h4>',5),Y=l('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Point<span class="token punctuation">,</span> Algorithm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> insertAt <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./graham&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">isPointEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> Point<span class="token punctuation">,</span> b<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">===</span> b <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">===</span> b<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>y <span class="token operator">===</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span>convex<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertex<span class="token operator">:</span> Point<span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> pointer <span class="token operator">=</span> convex<span class="token punctuation">.</span>length\n\n  <span class="token function">insertAt</span><span class="token punctuation">(</span>convex<span class="token punctuation">,</span> vertex<span class="token punctuation">,</span> position<span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> convex<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>convex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> middlePointer <span class="token operator">=</span> position <span class="token operator">?</span> position <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> pointer\n  <span class="token keyword">let</span> endPointer<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">const</span> startVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>position<span class="token punctuation">]</span>\n  <span class="token keyword">let</span> middleVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>middlePointer<span class="token punctuation">]</span>\n  <span class="token keyword">let</span> endVertex<span class="token operator">:</span> Point\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>middleVertex <span class="token operator">!==</span> startVertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    endPointer <span class="token operator">=</span> middlePointer <span class="token operator">?</span> middlePointer <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> pointer\n    endVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>endPointer<span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token punctuation">(</span>middleVertex<span class="token punctuation">.</span>x <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>endVertex<span class="token punctuation">.</span>y <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span>\n      <span class="token punctuation">(</span>endVertex<span class="token punctuation">.</span>x <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>middleVertex<span class="token punctuation">.</span>y <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n\n    convex<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>middlePointer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 优化: 循环外面处理</span>\n    pointer<span class="token operator">--</span>\n    position <span class="token operator">&amp;&amp;</span> position<span class="token operator">--</span>\n    middlePointer <span class="token operator">=</span> position <span class="token operator">?</span> position <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> pointer\n    middleVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>middlePointer<span class="token punctuation">]</span>\n    <span class="token keyword">yield</span> convex<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>convex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> lastMiddleVertex <span class="token operator">=</span> middleVertex\n  middlePointer <span class="token operator">=</span> position <span class="token operator">===</span> pointer <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> position <span class="token operator">+</span> <span class="token number">1</span>\n  middleVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>middlePointer<span class="token punctuation">]</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>middleVertex <span class="token operator">!==</span> startVertex <span class="token operator">&amp;&amp;</span> middleVertex <span class="token operator">!==</span> lastMiddleVertex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    endPointer <span class="token operator">=</span> middlePointer <span class="token operator">===</span> pointer <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> middlePointer <span class="token operator">+</span> <span class="token number">1</span>\n    endVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>endPointer<span class="token punctuation">]</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token punctuation">(</span>middleVertex<span class="token punctuation">.</span>x <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>endVertex<span class="token punctuation">.</span>y <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&gt;=</span>\n      <span class="token punctuation">(</span>endVertex<span class="token punctuation">.</span>x <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>middleVertex<span class="token punctuation">.</span>y <span class="token operator">-</span> startVertex<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n\n    convex<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>middlePointer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 优化: 循环外面处理</span>\n    pointer<span class="token operator">--</span>\n    middlePointer <span class="token operator">=</span> middlePointer <span class="token operator">===</span> pointer <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> middlePointer\n    middleVertex <span class="token operator">=</span> convex<span class="token punctuation">[</span>middlePointer<span class="token punctuation">]</span>\n    <span class="token keyword">yield</span> convex<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>convex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> pointer\n<span class="token punctuation">}</span>\n\n<span class="token comment">/** melkman算法法求最小凸包 使用canvas坐标系, 如下\no——→ x\n|\n↓\ny\n*/</span>\n<span class="token keyword">const</span> melkman<span class="token operator">:</span> <span class="token function-variable function">Algorithm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> points<span class="token punctuation">.</span>length\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> points\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> result<span class="token operator">:</span> Point<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n  <span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 栈顶</span>\n  <span class="token keyword">let</span> startPoint<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> endPoint<span class="token operator">:</span> Point\n\n  <span class="token keyword">let</span> point<span class="token operator">:</span> Point\n  <span class="token keyword">let</span> product<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">// 构造初始凸包(三角形)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    endPoint <span class="token operator">=</span> result<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPointEqual</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> endPoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    startPoint <span class="token operator">=</span> result<span class="token punctuation">[</span>pointer <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>startPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n      pointer<span class="token operator">++</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n\n    product <span class="token operator">=</span>\n      <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span>\n      <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>product<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 共线 只保留两端的点叭~</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> startPoint<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> startPoint<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> endPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">[</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> endPoint<span class="token punctuation">.</span>x <span class="token operator">||</span> startPoint<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> endPoint<span class="token punctuation">.</span>y <span class="token operator">?</span> pointer <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> pointer<span class="token punctuation">]</span> <span class="token operator">=</span>\n          point\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> startPoint<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> endPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">||</span>\n        <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> startPoint<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> point<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> endPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">[</span>startPoint<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> endPoint<span class="token punctuation">.</span>x <span class="token operator">||</span> startPoint<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> endPoint<span class="token punctuation">.</span>y <span class="token operator">?</span> pointer <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> pointer<span class="token punctuation">]</span> <span class="token operator">=</span>\n          point\n      <span class="token punctuation">}</span>\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 保证三个点顺时针方向</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n      result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> point\n    <span class="token punctuation">}</span>\n    pointer<span class="token operator">++</span>\n    <span class="token keyword">break</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 依次连接下一个点</span>\n  <span class="token keyword">let</span> startPointer<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> endPointer<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    point <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">yield</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>startPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> endPointer <span class="token operator">=</span> pointer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> endPointer<span class="token operator">--</span><span class="token punctuation">;</span> startPointer <span class="token operator">=</span> endPointer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      startPoint <span class="token operator">=</span> result<span class="token punctuation">[</span>startPointer<span class="token punctuation">]</span>\n      endPoint <span class="token operator">=</span> result<span class="token punctuation">[</span>endPointer<span class="token punctuation">]</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>point<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">&gt;=</span>\n        <span class="token punctuation">(</span>point<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>endPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 点在当前凸包外面</span>\n        pointer <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> point<span class="token punctuation">,</span> startPointer<span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> melkman\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br></div></div></details><h2 id="升维"><a class="header-anchor" href="#升维" aria-hidden="true">#</a> 升维</h2><p>3D中的情况如何?</p><p><a href="https://zhuanlan.zhihu.com/p/166105080" target="_blank" rel="noopener noreferrer">凸包问题——快速凸包算法</a></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://cyw3.github.io/YalesonChan/2016/ConvexHull.html" target="_blank" rel="noopener noreferrer">凸包算法剖析</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://muthu.co/understanding-graham-scan-algorithm-for-finding-the-convex-hull-of-a-set-of-points/" target="_blank" rel="noopener noreferrer">Understanding Graham scan algorithm for finding the Convex hull of a set of Points</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',8);A.render=function(n,p,t,l,c,r){const u=e("Show"),i=e("Play");return s(),a("div",null,[T,o(u),V,z,E,S,C,o(i,{algorithm:r.exhaust,speed:80},null,8,["algorithm"]),I,L,j,o(i,{algorithm:r.divide,speed:125},null,8,["algorithm"]),D,o(i,{algorithm:r.jarvis,speed:125},null,8,["algorithm"]),q,o(i,{algorithm:r.graham,speed:125},null,8,["algorithm"]),O,B,o(i,{algorithm:r.melkman,speed:250},null,8,["algorithm"]),Y])};export{M as __pageData,A as default};
