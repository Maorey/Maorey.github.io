import{o as e,c as a,a as s,r as n,d as l,b as t}from"./app.ff4669d0.js";import{S as r}from"./canvas.module.1cb43611.js";var i={setup(){}};const o={width:"320",height:"320"};i.render=function(s,n,l,t,r,i){return e(),a("canvas",o)};function h(e,a,s){e.clearRect(0,0,320,320);let n,l=a&&a.length;if(l)for(e.fillStyle="red";l--;)n=a[l],e.fillRect(n.x-2,n.y-2,4,4);if(l=s&&s.length,l){let a=s[--l];for(s.done||(e.fillStyle="green",e.fillRect(a.x-3,a.y-3,6,6),l&&(e.beginPath(),e.moveTo(a.x,a.y),a=s[--l],e.lineTo(a.x,a.y),e.strokeStyle="red",e.stroke())),e.beginPath(),e.moveTo(a.x,a.y);l;)a=s[--l],e.lineTo(a.x,a.y);s.done&&e.closePath(),e.strokeStyle="green",e.stroke()}}var c={props:{algorithm:Function},setup(e){const a=[];let s,n=!1;return{STYLE:r,async run(){if(n=!1,s&&a.length)for await(const l of function*(e,a){const s=e(a);let n;do{n=s.next(),yield new Promise((e=>{const a=n.value;a.done=n.done,setTimeout((()=>{e(a)}),250)}))}while(!n.done)}(e.algorithm,a)){if(n)return;h(s,a,l)}},clear(){n=!0,a.splice(0),s&&h(s)},onClick(e){n=!0;const l=e.target;s=l.getContext("2d"),a.push({x:e.pageX-l.offsetLeft,y:e.pageY-l.offsetTop}),h(s,a)}}}};const m=s("br",null,null,-1),p=s("br",null,null,-1);c.render=function(n,l,t,r,i,o){return e(),a("div",{class:r.STYLE.wrap},[m,s("i",{onClick:l[1]||(l[1]=(...e)=>r.run&&r.run(...e))},"生成最小凸包"),s("i",{onClick:l[2]||(l[2]=(...e)=>r.clear&&r.clear(...e))},"重置"),s("canvas",{width:"320",height:"320",onClick:l[3]||(l[3]=(...e)=>r.onClick&&r.onClick(...e))}),p],2)};var d,u;(u=d||(d={}))[u.all=0]="all",u[u.leftTop=1]="leftTop",u[u.rightTop=2]="rightTop",u[u.leftBottom=3]="leftBottom",u[u.rightBottom=4]="rightBottom";const g=(e,a,s)=>{if(a.length){const n=s(a[0],e);!0===n?a.splice(0,a.length,e):n&&((e,a,s)=>{const n=e[s];let l,t=0,r=a.length;for(;t<r;)l=t+r>>1,a[l][s]>n?r=l-1:t=l+1;for(l=a.length;l>t;)a[l]=a[--l];a[t]=e})(e,a,n)}else a.push(e)},f=(e,a)=>e.x===a.x?"y":e.x>a.x,_=(e,a)=>e.x===a.x?"y":e.x<a.x,v=(e,a)=>e.y===a.y?"x":e.y<a.y,y=(e,a)=>e.y===a.y?"x":e.y>a.y,b=(e,a,s)=>{let n,l;switch(s){case 1:n=a[0],l=e[e.length-1];break;case 2:n=e[a.length-1],l=a[e.length-1];break;case 3:n=e[0],l=a[0];break;case 4:n=a[a.length-1],l=e[0]}const{x:t,y:r}=n;return{x:t,y:r,dx:l.x-t,dy:l.y-r}},T=(e,a)=>a.dx*(e.y-a.y)>(e.x-a.x)*a.dy,x=(e,a)=>{const s=[],n=[];let l,t,r,i=e.length;if(i<2)return[e,s,n];switch(a){case 1:l=f,t=v;break;case 2:l=_,t=v;break;case 3:l=f,t=y;break;case 4:l=_,t=y;break;default:return console.error("partitionCorner: unknown corner "+a),[s,n,n]}for(;i;)r=e[--i],g(r,s,l),g(r,n,t);const o=[];o.corner=a;const h=b(s,n,a);for(i=e.length;i;)r=e[--i],T(r,h)&&o.push(r);return[s,n,o]},k=(e,a,s,n)=>{const l=[...e];l[l.length-1]===s[0]&&l.pop(),l.push(...s);let t=a.length;for(l[l.length-1]===a[t-1]&&t--;t;)l.push(a[--t]);for(t=n.length,l[l.length-1]===n[t-1]&&t--;t;)l.push(n[--t]);return l};var w={components:{Show:i,Play:c},methods:{divide:function*(e){const a=(e=>{const a=[],s=[],n=[],l=[];let t,r=e.length;if(r<3)return;for(;r;)t=e[--r],g(t,a,f),g(t,s,_),g(t,n,v),g(t,l,y);const i=[],o=b(a,n,1);i.corner=1;const h=[],c=b(s,n,2);h.corner=2;const m=[],p=b(a,l,3);m.corner=3;const d=[],u=b(s,l,4);for(d.corner=4,r=e.length;r;)t=e[--r],T(t,o)?i.push(t):T(t,c)?h.push(t):T(t,p)?m.push(t):T(t,u)&&d.push(t);return[[a,s,n,l],[i,h,m,d]]})(e);if(!a)return e;const[s,n]=a,[l,t,r,i]=s;let o,h,c;for(;n.length;){switch(yield k.apply(null,s),o=n.shift(),[h,c,o]=x(o,o.corner),o.corner){case 1:l.push(...h),r.unshift(...c);break;case 2:t.push(...h),r.push(...c);break;case 3:l.unshift(...h),i.unshift(...c);break;case 4:t.unshift(...h),i.push(...c)}o.length&&n.push(o)}return k.apply(null,s)}}};const S='{"title":"最小凸包","description":"","frontmatter":{"title":"最小凸包","index":3},"headers":[{"level":2,"title":"问题描述","slug":"问题描述"},{"level":2,"title":"演示","slug":"演示"},{"level":2,"title":"前置知识","slug":"前置知识"},{"level":2,"title":"方法介绍","slug":"方法介绍"},{"level":3,"title":"穷举法 (O(n))","slug":"穷举法-o-n3"},{"level":3,"title":"分治法 (快包 O(n㏒n))","slug":"分治法-快包-o-n㏒n"},{"level":3,"title":"Jarvis 步进法 (O(nH))","slug":"jarvis-步进法-o-nh"},{"level":3,"title":"Graham 扫描法 (O(n㏒n)) [^GrahamScan]","slug":"graham-扫描法-o-n㏒n"},{"level":3,"title":"Melkman 算法 (O(n))","slug":"melkman-算法-o-n"},{"level":2,"title":"升维","slug":"升维"},{"level":2,"title":"参考链接","slug":"参考链接"}],"relativePath":"blog/algorithm/melkman.md","lastUpdated":1622732096368}',A=s("p",null,"2021-06-04",-1),C=s("h2",{id:"问题描述"},[s("a",{class:"header-anchor",href:"#问题描述","aria-hidden":"true"},"#"),l(" 问题描述")],-1),P=s("p",null,"平面上任意位置有3个及以上的点, 求这些点的最小外接凸多边形",-1),E=s("h2",{id:"演示"},[s("a",{class:"header-anchor",href:"#演示","aria-hidden":"true"},"#"),l(" 演示")],-1),I=t('<h2 id="前置知识"><a class="header-anchor" href="#前置知识" aria-hidden="true">#</a> 前置知识</h2><p><a href="./pinp.html#凸多边形">参考链接</a></p><h2 id="方法介绍"><a class="header-anchor" href="#方法介绍" aria-hidden="true">#</a> 方法介绍</h2><h3 id="穷举法-o-n3"><a class="header-anchor" href="#穷举法-o-n3" aria-hidden="true">#</a> 穷举法 (O(n<sup>3</sup>))</h3><p>最重要的目标时候找到哪些点是凸包的顶点, 然后根据坐标排序构造凸包</p><p>凸包的顶点满足的条件: 任意其他点在<strong>两个顶点连线的同一侧</strong> (如何判断见<a href="#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">前置知识</a>)</p><p>计算的步骤为</p>',7),V=s("ol",null,[s("li",null,[l("从点集里取出一点, 与剩下的点依次连接, 得到一条直线 (共 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mo",null,"∑"),s("mstyle",{scriptlevel:"1"},[s("mtable",{rowspacing:"0.1000em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"1",displaystyle:"false"},[s("mrow",null,[s("mn",null,"1"),s("mo",null,"<"),s("mi",null,"i"),s("mo",null,"<"),s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")])])])])])])])]),s("annotation",{encoding:"application/x-tex"},"\\sum_{\\substack{1 < i < n - 1}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.168542em","vertical-align":"-0.418542em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.16912199999999994em"}},[s("span",{style:{top:"-2.40029em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.66976em"}},[s("span",{style:{top:"-2.71024em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mrel mtight"},"<"),s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"<"),s("span",{class:"mord mathnormal mtight"},"n"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.16976em"}},[s("span")])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.418542em"}},[s("span")])])])])])])])]),l(" 条)")]),s("li",null,[l("判断其他点是否在这条线的同一侧 (共 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"n - 2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"mord"},"2")])])]),l(" 个), 是则将这两个顶点去重地加入顶点数组 (插入更佳 按x,y排序)")]),s("li",null,"按一定规则(按x,y排序)连接顶点得到凸包")],-1),O=t('<h3 id="分治法-快包-o-n㏒n"><a class="header-anchor" href="#分治法-快包-o-n㏒n" aria-hidden="true">#</a> 分治法 (快包 O(n㏒n))</h3><p>快速凸包构造算法的思路为: 想办法将点集进行划分, 然后分而治之</p><p>对于一个点集, 最容易确定是凸包顶点的, 是上下左右<strong>4个极值点</strong>(有相等时取两端参与划分), 剩下的凸包顶点暂时无法确定</p><p>那么基于这4个极值点, 可以想到把点集划分为<strong>5个区域</strong>, 很明显在这4个点围成的四边形内不可能存在凸包顶点, 那么还剩余的<strong>4个区域</strong></p><p>对于这4个区域我们可以视作新的点集, 重复上述步骤直到不能继续划分</p><p><img alt="划分" data-src="melkman/divide.png" loading="lazy" class="lazy"></p><h4 id="演示-1"><a class="header-anchor" href="#演示-1" aria-hidden="true">#</a> 演示</h4>',7),D=t('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="jarvis-步进法-o-nh"><a class="header-anchor" href="#jarvis-步进法-o-nh" aria-hidden="true">#</a> Jarvis 步进法 (O(nH))</h3><h4 id="演示-2"><a class="header-anchor" href="#演示-2" aria-hidden="true">#</a> 演示</h4>',3),R=t('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="graham-扫描法-o-n㏒n"><a class="header-anchor" href="#graham-扫描法-o-n㏒n" aria-hidden="true">#</a> Graham 扫描法 (O(n㏒n)) <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><h4 id="演示-3"><a class="header-anchor" href="#演示-3" aria-hidden="true">#</a> 演示</h4>',3),M=t('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h3 id="melkman-算法-o-n"><a class="header-anchor" href="#melkman-算法-o-n" aria-hidden="true">#</a> Melkman 算法 (O(n))</h3><h4 id="演示-4"><a class="header-anchor" href="#演示-4" aria-hidden="true">#</a> 演示</h4>',3),z=t('<details><summary>推导及代码实现</summary><div class="language-ts line-numbers-mode"><pre><code>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div></details><h2 id="升维"><a class="header-anchor" href="#升维" aria-hidden="true">#</a> 升维</h2><p>3D中的情况如何?</p><p><a href="https://zhuanlan.zhihu.com/p/166105080" target="_blank" rel="noopener noreferrer">凸包问题——快速凸包算法</a></p><h2 id="参考链接"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><ul><li><a href="https://www.cnblogs.com/dream-it-possible/p/8514706.html" target="_blank" rel="noopener noreferrer">凸包算法入门</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://muthu.co/understanding-graham-scan-algorithm-for-finding-the-convex-hull-of-a-set-of-points/" target="_blank" rel="noopener noreferrer">Understanding Graham scan algorithm for finding the Convex hull of a set of Points</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',8);w.render=function(l,t,r,i,o,h){const c=n("Show"),m=n("Play");return e(),a("div",null,[A,C,P,E,s(c),I,V,O,s(m,{algorithm:h.divide},null,8,["algorithm"]),D,s(m,{algorithm:h.divide},null,8,["algorithm"]),R,s(m,{algorithm:h.divide},null,8,["algorithm"]),M,s(m,{algorithm:h.divide},null,8,["algorithm"]),z])};export default w;export{S as __pageData};
