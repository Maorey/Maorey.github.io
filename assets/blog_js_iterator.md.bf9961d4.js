import{o as n,c as s,b as a}from"./app.cb351c43.js";const p='{"title":"迭代器","description":"","frontmatter":{"title":"迭代器","index":1},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"迭代器 (Iterators - ES2015)","slug":"迭代器-iterators-es2015"},{"level":2,"title":"异步迭代器 (AsyncIterators - ES2018)","slug":"异步迭代器-asynciterators-es2018"},{"level":2,"title":"生成器函数 (GeneratorFunction - ES2015)","slug":"生成器函数-generatorfunction-es2015"},{"level":3,"title":"next","slug":"next"},{"level":3,"title":"return","slug":"return"},{"level":3,"title":"throw","slug":"throw"},{"level":3,"title":"yield* 表达式","slug":"yield-表达式"},{"level":3,"title":"执行器","slug":"执行器"},{"level":2,"title":"异步函数 (AsyncFunction - ES2017)","slug":"异步函数-asyncfunction-es2017"},{"level":2,"title":"异步生成器函数 (AsyncGeneratorFunction - ES2018)","slug":"异步生成器函数-asyncgeneratorfunction-es2018"},{"level":2,"title":"聊聊","slug":"聊聊"},{"level":3,"title":"应用","slug":"应用"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"blog/js/iterator.md","lastUpdated":1615943093605}',t={},e=a('<h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>这次咱来聊聊迭代器相关ES语法, 因为也不是特别新的语法(<code>ES2015-2018</code>), 标题就酱紫吧🤣, 现代浏览器都支持 (IE: 啥? 村里通网了么?)</p><h2 id="迭代器-iterators-es2015"><a class="header-anchor" href="#迭代器-iterators-es2015" aria-hidden="true">#</a> 迭代器 (Iterators - ES2015)</h2><p>迭代器<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener noreferrer">接口定义</a>如下:</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">interface</span> <span class="token class-name">IteratorYieldResult<span class="token operator">&lt;</span>TYield<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 是否到达结束位置 */</span>\n  done<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token comment">/** 当前位置值 */</span>\n  value<span class="token operator">:</span> TYield\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">IteratorReturnResult<span class="token operator">&lt;</span>TReturn<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  done<span class="token operator">:</span> <span class="token boolean">true</span>\n  value<span class="token operator">:</span> TReturn\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>\n  <span class="token operator">|</span> IteratorYieldResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  <span class="token operator">|</span> IteratorReturnResult<span class="token operator">&lt;</span>TReturn<span class="token operator">&gt;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> TNext <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/** 返回下一个指针位置信息 */</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>TNext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n  <span class="token comment">/** 从外部控制 提前结束迭代器并指定返回值 */</span>\n  <span class="token keyword">return</span><span class="token operator">?</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> TReturn<span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n  <span class="token comment">/** 从外部控制 抛出错误并结束迭代器 */</span>\n  <span class="token keyword">throw</span><span class="token operator">?</span><span class="token punctuation">(</span>e<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>它为数据的迭代(遍历)提供了统一的实现方式, 原生部署了迭代器接口的数据类型有:</p><ul><li><code>Array</code> / <code>TypedArray</code></li><li><code>Map</code></li><li><code>Set</code></li><li><code>String</code></li><li><code>Arguments</code></li><li><code>NodeList</code></li><li>[请补充]</li></ul><p>你可以通过从上述类型的实例/字面量调用<code>[Symbol.iterator]</code>方法得到迭代器实例:</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><div class="highlighted"> </div><br><br><br><br><br><br></div><pre><code><span class="token keyword">const</span> <span class="token constant">SOME_STRING</span> <span class="token operator">=</span> <span class="token string">&#39;AB&#39;</span>\n<span class="token keyword">const</span> iterator<span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">SOME_STRING</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;A&#39;, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;B&#39;, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>迭代器的主要消费者 (<code>done = true</code> 时即结束迭代)</p><ul><li><code>for...of</code> / <code>for await...of</code></li><li><code>...</code> (解构赋值, 扩展运算)</li><li><code>yield*</code></li><li><code>Array.from()</code></li><li><code>Map(), Set(), WeakMap(), WeakSet()</code> (比如: <code>new Map([[&#39;a&#39;, 1], [&#39;b&#39;, 2]])</code>)</li><li><code>Promise.all()</code></li><li><code>Promise.race()</code></li><li>[请补充]</li></ul><p>我们来自己实现一下<code>Iterator</code>:</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br></div><pre><code><span class="token keyword">const</span> someObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token string">&#39;someObject&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token constant">MAX_SIZE</span> <span class="token operator">=</span> <span class="token number">3</span>\n    <span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next: iterator is done&#39;</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        value <span class="token operator">=</span> value <span class="token operator">||</span> pointer<span class="token operator">++</span>\n        done <span class="token operator">=</span> value <span class="token operator">&gt;</span> <span class="token constant">MAX_SIZE</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;current value is: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">return</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;return: iterator is done&#39;</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        done <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">throw</span><span class="token operator">:</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;throw: iterator is done&#39;</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        done <span class="token operator">=</span> <span class="token boolean">true</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// case0: 检查迭代器状态</span>\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> someObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 0, done: false }</span>\n<span class="token comment">// try yourself</span>\n\n<span class="token comment">// case1: for...of (可使用 break/continue)</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> someObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;for...of someObject: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// case2: 解构赋值</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> someObject\n<span class="token comment">// first = 0, rest = [1, 2, 3]</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> <span class="token operator">...</span>restProperty <span class="token punctuation">}</span> <span class="token operator">=</span> someObject\n<span class="token comment">// [...restProperty] = [0, 1, 2, 3]</span>\n\n<span class="token comment">// case3: 展开</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>someObject<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// [0, 1, 2, 3]</span>\n\n<span class="token comment">// case4:</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// [0, 1, 2, 3]</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h2 id="异步迭代器-asynciterators-es2018"><a class="header-anchor" href="#异步迭代器-asynciterators-es2018" aria-hidden="true">#</a> 异步迭代器 (AsyncIterators - ES2018)</h2><p>异步迭代器, 即调用 <code>next</code> 方法得到一个<code>Promise</code>对象, 接口签名如下:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">interface</span> <span class="token class-name">AsyncIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> TNext <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>TNext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n  <span class="token keyword">return</span><span class="token operator">?</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> TReturn <span class="token operator">|</span> PromiseLike<span class="token operator">&lt;</span>TReturn<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n  <span class="token keyword">throw</span><span class="token operator">?</span><span class="token punctuation">(</span>e<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">AsyncIterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AsyncIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">AsyncIterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AsyncIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AsyncIterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>部署了异步迭代器的对象可以通过 <code>for await...of</code> (也可遍历<strong>同步迭代器</strong>)等方式遍历</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token keyword">const</span> someObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token string">&#39;someObject&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token constant">MAX_SIZE</span> <span class="token operator">=</span> <span class="token number">3</span>\n    <span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">let</span> done <span class="token operator">=</span> <span class="token boolean">false</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      next<span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next: asyncIterator is done&#39;</span><span class="token punctuation">)</span>\n          <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            value <span class="token operator">=</span> value <span class="token operator">||</span> pointer<span class="token operator">++</span>\n            done <span class="token operator">=</span> value <span class="token operator">&gt;</span> <span class="token constant">MAX_SIZE</span>\n            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;current value is: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n\n            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">250</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> someObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0, 1, 2, 3</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="生成器函数-generatorfunction-es2015"><a class="header-anchor" href="#生成器函数-generatorfunction-es2015" aria-hidden="true">#</a> 生成器函数 (GeneratorFunction - ES2015)</h2><p>生成器函数顾名思义就是用来生成<strong>迭代器</strong>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener noreferrer">Generator</a> 对象, 该对象实现了<a href="#%E8%BF%AD%E4%BB%A3%E5%99%A8-iterators-es2015"><code>Iterator</code></a>接口, 包括<code>next/return/throw</code>方法)的函数, 示例语法:</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">interface</span> <span class="token class-name">Generator<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> TReturn <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> TNext <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token punctuation">,</span> TNext<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>TNext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>value<span class="token operator">:</span> TReturn<span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n  <span class="token keyword">throw</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Generator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token punctuation">,</span> TNext<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Generator <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;hello&#39;</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;world&#39;</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;over&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">helloGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;hello&#39;, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;world&#39;, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: &#39;over&#39;, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>生成器函数使用 <code>function*</code> 声明, 函数体内可使用 <code>yield</code> <a href="https://tc39.es/ecma262/#sec-expressions" target="_blank" rel="noopener noreferrer">表达式</a>返回当前迭代器的值 (可视作迭代器 <code>next</code> 方法), 没有 <code>return</code> 语句则以 <code>undefined</code> 为 <code>value</code> 结束, 总是返回一个迭代器, 不可用作构造函数(即<code>new</code>)</p><p>如果<code>yield</code>表达式在另一个表达式中<strong>必须</strong>加括号:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token operator">||</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// SyntaxError</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> name <span class="token operator">||</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// SyntaxError</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">yield</span> name<span class="token punctuation">)</span> <span class="token operator">||</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>调用生成器函数时仅创建迭代器, 调用迭代器时才执行具体逻辑, 这些逻辑以 <code>yield</code> 表达式分割, 可以理解为<strong>每次执行完下一条<code>yield</code>表达式所在的语句后就暂停执行</strong></p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br></div><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;lazy is run&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;lazy is run&#39; \\n { value: undefined, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>下面是使用<code>for...of</code>/<code>...</code>/<code>Array.from</code>等遍历的示例:</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run foo&#39;</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo1 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">yield</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo3&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// run foo \\n value: 1 \\n foo1 undefined \\n value: 2 \\n foo2 undefined \\n foo3</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><br><code>next</code> / <code>return</code> / <code>throw</code> 本质上是一样的, 都是恢复执行生成器函数(并使用不同的方法替换<code>yield</code>表达式)</p><h3 id="next"><a class="header-anchor" href="#next" aria-hidden="true">#</a> next</h3><p>可通过<code>next</code>方法向生成器函数里传递数据(将<code>yield</code>表达式替换为指定值):</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br></div><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n\n  <span class="token keyword">let</span> input\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    input <span class="token operator">=</span> <span class="token keyword">yield</span> sum <span class="token comment">// yield 后面不写 = yield undefined</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> sum\n    <span class="token punctuation">}</span>\n    sum <span class="token operator">+=</span> input\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// { value: 0, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// { value: 5, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// { value: 5, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="return"><a class="header-anchor" href="#return" aria-hidden="true">#</a> return</h3><p>可通过<code>return</code>方法结束迭代器(将<code>yield</code>表达式替换为<code>return</code>语句)</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><br><br></div><pre><code><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { value: 0, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="throw"><a class="header-anchor" href="#throw" aria-hidden="true">#</a> throw</h3><p>可通过<code>throw</code>方法向迭代器内部传递错误(将<code>yield</code>表达式替换为<code>throw</code>语句), 生成器函数内部可使用<code>try...catch</code>捕获错误, 若未捕获则抛出错误<strong>并结束迭代</strong>, 否则继续执行到<strong>下一条<code>yield</code>表达式</strong></p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run foo&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo1 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">yield</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo3&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// run foo \\n { value: 1, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token string">&#39;给我报错&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 给我报错 \\n { value: 2, done: false }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// foo2 1 \\n foo3 \\n { value: 3, done: true }</span>\niterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="yield-表达式"><a class="header-anchor" href="#yield-表达式" aria-hidden="true">#</a> yield* 表达式</h3><p>在生成器函数内部可使用 <code>yield*</code> 表达式遍历其他<strong>可迭代数据结构</strong> (部署了 迭代器/异步迭代器 的数据结构), 有递归的效果</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token number">1</span>\n  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 或(function* bar() {yield 2; yield 3})()</span>\n  <span class="token keyword">yield</span> <span class="token number">4</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>等价于</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br></div><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token number">1</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> value\n  <span class="token punctuation">}</span>\n  <span class="token keyword">yield</span> <span class="token number">4</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="执行器"><a class="header-anchor" href="#执行器" aria-hidden="true">#</a> 执行器</h3><p>使用生成器函数有个问题是<strong>需要了解实现细节</strong>, 所以比较好的方式是牺牲一定的灵活度, 遵循一定的规则来实现, 这样就可以使用<strong>特定的执行器</strong>来执行它, 常见的方式是使用<a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener noreferrer">Thunk</a>函数(<code>(callback: any) =&gt; any</code>)/<code>Promise</code>来作为<code>yield</code>的值</p><h2 id="异步函数-asyncfunction-es2017"><a class="header-anchor" href="#异步函数-asyncfunction-es2017" aria-hidden="true">#</a> 异步函数 (AsyncFunction - ES2017)</h2><p>异步函数使用 <code>async function</code> 声明, 函数体内部可以使用 <code>await</code> 表达式等待异步操作结果(<code>thenAble</code>对象), 总是返回一个<code>Promise</code>对象, 它是<a href="#%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0-generatorfunction-es2015">生成器函数</a>的语法糖(内置执行器)</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n<span class="token comment">// 酱紫也可以</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    cb <span class="token operator">&amp;&amp;</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">{</span>\n    <span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> <span class="token keyword">typeof</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cb <span class="token operator">=</span> callback\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">async</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;value: &#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// value: done</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">qux</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等同于</span>\n<span class="token keyword">function</span> <span class="token function">qux</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// typeof spawn = (fn: GeneratorFunction) =&gt; Promise</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>其中<code>spawn</code>函数返回的<code>Promise</code>对象将会在生成器函数自动执行完成后, 变更为<code>fulfilled</code>状态. 使用时注意下异步操作的<strong>并行</strong>(使用<code>Promise.all</code>等方式)/<strong>串行</strong>及<strong>错误处理</strong>即可</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token comment">// 错误处理</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result\n  <span class="token keyword">let</span> errorInfo\n\n  <span class="token keyword">let</span> tryTimes <span class="token operator">=</span> <span class="token number">5</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>tryTimes<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      errorInfo <span class="token operator">=</span> error\n      <span class="token keyword">continue</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> errorInfo\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="异步生成器函数-asyncgeneratorfunction-es2018"><a class="header-anchor" href="#异步生成器函数-asyncgeneratorfunction-es2018" aria-hidden="true">#</a> 异步生成器函数 (AsyncGeneratorFunction - ES2018)</h2><p>异步生成器函数的语法上是 <a href="#%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0-asyncfunction-es2017">异步函数</a> 和 <a href="#%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0-generatorfunction-es2015">生成器函数</a> 的结合, 用来生成一个<strong>异步迭代器</strong>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#control_abstraction_objects" target="_blank" rel="noopener noreferrer">AsyncGenerator</a> 仅列出, 暂无文档)对象, 该对象实现了<a href="#%E5%BC%82%E6%AD%A5%E8%BF%AD%E4%BB%A3%E5%99%A8-asynciterators-es2018">异步迭代器</a>接口, 包括<code>next/return/throw</code>方法)的函数, 示例语法:</p><div class="language-TypeScript line-numbers-mode"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">interface</span> <span class="token class-name">AsyncGenerator<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> TReturn <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> TNext <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AsyncIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token punctuation">,</span> TNext<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>TNext<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n  <span class="token keyword">return</span><span class="token punctuation">(</span>value<span class="token operator">:</span> TReturn <span class="token operator">|</span> PromiseLike<span class="token operator">&lt;</span>TReturn<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n  <span class="token keyword">throw</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token operator">&gt;&gt;</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AsyncGenerator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TReturn<span class="token punctuation">,</span> TNext<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> AsyncGenerator <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 1&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 2&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> result\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 3&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> data\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">async</span> <span class="token operator">*</span><span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run:&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// foo: 1 \\n foo: 2 \\n run: done \\n foo: 3</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>异步生成器函数返回的异步迭代器, 其<a href="#next">next</a> / <a href="#return">return</a> / <a href="#throw">throw</a> 方法的行为与上述生成器函数返回的迭代器相似, 注意下<code>Promise</code>和错误处理(<code>try...catch</code>)即可, 也可以被 <a href="#yield-%E8%A1%A8%E8%BE%BE%E5%BC%8F">yield*</a> 遍历, 不可用作构造函数(即<code>new</code>)</p><div class="language-TypeScript line-numbers-mode"><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 0&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;foo: 1&#39;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 2&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> <span class="token string">&#39;foo: 3&#39;</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo: 4&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar: 0&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;bar: 1&#39;</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar: 2&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz: 0&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;baz: 1&#39;</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz: 2&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz: 3&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz: 4&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;run:&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// baz: 0 \\n run: baz: 1 \\n baz: 2 \\n foo: 0</span>\n<span class="token comment">// run: foo: 1 \\n foo: 2 \\n run: foo: 3 \\n foo: 4</span>\n<span class="token comment">// baz: 3 \\n bar: 0 \\n run: bar: 1 \\n bar: 2 \\n baz: 4</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>遵循一定的规范, 是可以使用相同的执行器来执行的. 这是比较巧妙(但不是巧合)的地方, 可以忽略掉同步和异步的差别</p><h2 id="聊聊"><a class="header-anchor" href="#聊聊" aria-hidden="true">#</a> 聊聊</h2><ul><li><a href="https://mp.weixin.qq.com/s/57IERpGIlvRwYCh6vSbMDA" target="_blank" rel="noopener noreferrer">协程</a>: 可以看到, 迭代器(含异步)这种执行权交替转移的方式是协程的不完全实现</li><li><a href="https://tc39.es/ecma262/#sec-execution-contexts" target="_blank" rel="noopener noreferrer">上下文</a>: 自动绑定了(生成器(含异步)函数)执行上下文</li><li>性能: 迭代器性能自然是比不上传统的迭代方式的, 不管是从数据结构(含内存分配)还是查找等方面考量, 都是如此. 但是我们使用它的场景往往是在于管道的控制等, 所以一般也不会有大量的数据/步骤需要迭代, 缺点是可忽略的. 而且使用它会给我们带来的开发/维护等方面的诸多好处, 这是<strong>不可忽视的优点</strong></li></ul><h3 id="应用"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><ul><li>顺序一致性: 确保对数据每次遍历的顺序一致(类数组)</li><li>异步编程: 异步编程的同步化表达</li><li>状态机: 迭代器(含异步)是很适合做状态机的结构, 而生成器函数(含异步)大大方便了创建迭代器</li><li>控制流: 任务组合, 流程控制</li><li>[请补充]</li></ul><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://developer.mozilla.org" target="_blank" rel="noopener noreferrer">MDN</a>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators" target="_blank" rel="noopener noreferrer">Iterators_and_Generators</a> 等</li><li><a href="http://www.ruanyifeng.com" target="_blank" rel="noopener noreferrer">阮一峰</a>: <a href="https://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener noreferrer">Iterator 和 for...of 循环</a> 等</li><li><a href="https://tc39.es/ecma262/2020" target="_blank" rel="noopener noreferrer">ES2020</a>: <a href="https://tc39.es/ecma262/2020/#sec-operations-on-iterator-objects" target="_blank" rel="noopener noreferrer">operations-on-iterator-objects</a> 等</li><li>微信公众号: <a href="https://mp.weixin.qq.com/s/gFSb0BYSbL7c5K4cCcgeow" target="_blank" rel="noopener noreferrer">实现一个 async/await</a></li><li>微信公众号: <a href="https://mp.weixin.qq.com/s/AzS6p2d7ZEw20eL4GVnp2w" target="_blank" rel="noopener noreferrer">哈希表</a></li></ul>',62);t.render=function(a,p,t,o,c,l){return n(),s("div",null,[e])};export default t;export{p as __pageData};
